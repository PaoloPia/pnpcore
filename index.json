{
  "api/index.html": {
    "href": "api/index.html",
    "title": "PnP Core SDK API documentation | PnP Core SDK",
    "keywords": "PnP Core SDK API documentation Welcome to the API documentation of the PnP Core SDK. If you want to browse our API, in the left side navigation you can filter by namespace. If you're looking for a particular class, it's easier to use the filter and simply type the class name. Note This documentation is auto generated based on the public API surface and code comments (triple slash comments). If you like to submit any changes or to fix any typos, please create a PR against the respective source files with updated code comments. Community rocks!"
  },
  "api/Microsoft.Extensions.DependencyInjection.AuthenticationCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.AuthenticationCollectionExtensions.html",
    "title": "Class AuthenticationCollectionExtensions | PnP Core SDK",
    "keywords": "Class AuthenticationCollectionExtensions Extension methods to assist with setting up the IAuthenticationProvider infrastructure Inheritance Object AuthenticationCollectionExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : PnP.Core.Auth.dll Syntax public static class AuthenticationCollectionExtensions : object Methods AddPnPCoreAuthentication(IServiceCollection) Adds all the IAuthenticationProvider flavors to the collection of loaded services Declaration public static IServiceCollection AddPnPCoreAuthentication(this IServiceCollection collection) Parameters IServiceCollection collection Collection of loaded services Returns IServiceCollection Collection of loaded services AddPnPCoreAuthentication(IServiceCollection, Action<PnPCoreAuthenticationOptions>) Adds all the IAuthenticationProvider flavors to the collection of loaded services Declaration public static IServiceCollection AddPnPCoreAuthentication(this IServiceCollection collection, Action<PnPCoreAuthenticationOptions> options) Parameters IServiceCollection collection Collection of loaded services Action < PnPCoreAuthenticationOptions > options PnPCoreAuthenticationOptions options to use for configuration Returns IServiceCollection Collection of loaded services"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | PnP Core SDK",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes AuthenticationCollectionExtensions Extension methods to assist with setting up the IAuthenticationProvider infrastructure PnPCoreServiceCollectionExtensions Extension methods for setting up PnP Core SDK services in an ."
  },
  "api/Microsoft.Extensions.DependencyInjection.PnPCoreServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.PnPCoreServiceCollectionExtensions.html",
    "title": "Class PnPCoreServiceCollectionExtensions | PnP Core SDK",
    "keywords": "Class PnPCoreServiceCollectionExtensions Extension methods for setting up PnP Core SDK services in an . Inheritance Object PnPCoreServiceCollectionExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : PnP.Core.dll Syntax public static class PnPCoreServiceCollectionExtensions : object Methods AddPnPCore(IServiceCollection) Configures PnP Core SDK with default options Declaration public static IPnPCoreBuilder AddPnPCore(this IServiceCollection services) Parameters IServiceCollection services The collection of services in an Returns IPnPCoreBuilder A PnPCoreBuilder instance AddPnPCore(IServiceCollection, Action<PnPCoreOptions>) Configures PnP Core SDK with default options Declaration public static IPnPCoreBuilder AddPnPCore(this IServiceCollection services, Action<PnPCoreOptions> options) Parameters IServiceCollection services The collection of services in an Action < PnPCoreOptions > options An Action to configure the Authentication options Returns IPnPCoreBuilder A PnPCoreBuilder instance"
  },
  "api/PnP.Core.Auth.CredentialManagerAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.CredentialManagerAuthenticationProvider.html",
    "title": "Class CredentialManagerAuthenticationProvider | PnP Core SDK",
    "keywords": "Class CredentialManagerAuthenticationProvider Authentication Provider that uses a set of credentials stored in the Credentials Manager of Windows Inheritance Object OAuthAuthenticationProvider CredentialManagerAuthenticationProvider Inherited Members OAuthAuthenticationProvider.ConfigurationName OAuthAuthenticationProvider.ClientId OAuthAuthenticationProvider.TenantId OAuthAuthenticationProvider.DefaultAADAppId Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public sealed class CredentialManagerAuthenticationProvider : OAuthAuthenticationProvider, IAuthenticationProvider Constructors CredentialManagerAuthenticationProvider(ILogger<OAuthAuthenticationProvider>) Public constructor leveraging DI to initialize the ILogger interfafce Declaration public CredentialManagerAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger) Parameters ILogger < OAuthAuthenticationProvider > logger The instance of the logger service provided by DI CredentialManagerAuthenticationProvider(String, String, String) Public constructor for external consumers of the library Declaration public CredentialManagerAuthenticationProvider(string clientId, string tenantId, string credentialManagerName) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenand ID for the Authentication Provider String credentialManagerName The Name of the Credential Manager item for authentication Properties CredentialManagerName The name of the Windows Credential Manager settings to use Declaration public string CredentialManagerName { get; set; } Property Value String Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public override Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. Overrides OAuthAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public override Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri) GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public override Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for String [] scopes Scopes to request Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri, String[]) Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.DeviceCodeAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.DeviceCodeAuthenticationProvider.html",
    "title": "Class DeviceCodeAuthenticationProvider | PnP Core SDK",
    "keywords": "Class DeviceCodeAuthenticationProvider Authentication Provider that uses a device code flow for authentication Inheritance Object OAuthAuthenticationProvider DeviceCodeAuthenticationProvider Inherited Members OAuthAuthenticationProvider.ConfigurationName OAuthAuthenticationProvider.ClientId OAuthAuthenticationProvider.TenantId OAuthAuthenticationProvider.DefaultAADAppId Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public class DeviceCodeAuthenticationProvider : OAuthAuthenticationProvider, IAuthenticationProvider Constructors DeviceCodeAuthenticationProvider(ILogger<OAuthAuthenticationProvider>) Public constructor leveraging DI to initialize the ILogger interfafce Declaration public DeviceCodeAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger) Parameters ILogger < OAuthAuthenticationProvider > logger The instance of the logger service provided by DI DeviceCodeAuthenticationProvider(String, String, Uri, Action<DeviceCodeNotification>) Public constructor for external consumers of the library Declaration public DeviceCodeAuthenticationProvider(string clientId, string tenantId, Uri redirectUri, Action<DeviceCodeNotification> deviceCodeVerification) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenand ID for the Authentication Provider Uri redirectUri The Redirect URI for the authentication flow Action < DeviceCodeNotification > deviceCodeVerification External action to manage the Device Code verification Properties DeviceCodeVerification Action to notify the end user about the device code request Declaration public Action<DeviceCodeNotification> DeviceCodeVerification { get; set; } Property Value Action < DeviceCodeNotification > RedirectUri The Redirect URI for the authentication flow Declaration public Uri RedirectUri { get; set; } Property Value Uri Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public override Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. Overrides OAuthAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public override Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri) GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public override Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for String [] scopes Scopes to request Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri, String[]) Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.DeviceCodeNotification.html": {
    "href": "api/PnP.Core.Auth.DeviceCodeNotification.html",
    "title": "Class DeviceCodeNotification | PnP Core SDK",
    "keywords": "Class DeviceCodeNotification Provides information about the Device Code authentication request Inheritance Object DeviceCodeNotification Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public class DeviceCodeNotification : object Properties Message User friendly text response that can be used for display purpose. Declaration public string Message { get; set; } Property Value String UserCode Device code returned by the service Declaration public string UserCode { get; set; } Property Value String VerificationUrl Verification URL where the user must navigate to authenticate using the device code and credentials Declaration public Uri VerificationUrl { get; set; } Property Value Uri Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.ExternalAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.ExternalAuthenticationProvider.html",
    "title": "Class ExternalAuthenticationProvider | PnP Core SDK",
    "keywords": "Class ExternalAuthenticationProvider Authentication Provider that relies on an external token provider Inheritance Object OAuthAuthenticationProvider ExternalAuthenticationProvider Inherited Members OAuthAuthenticationProvider.ConfigurationName OAuthAuthenticationProvider.ClientId OAuthAuthenticationProvider.TenantId OAuthAuthenticationProvider.DefaultAADAppId Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public sealed class ExternalAuthenticationProvider : OAuthAuthenticationProvider, IAuthenticationProvider Constructors ExternalAuthenticationProvider(Func<Uri, String[], String>) Public constructor for external consumers of the library Declaration public ExternalAuthenticationProvider(Func<Uri, string[], string> accessTokenProvider) Parameters Func < Uri , String [], String > accessTokenProvider A function providing the access token to use ExternalAuthenticationProvider(ILogger<OAuthAuthenticationProvider>) Public constructor leveraging DI to initialize the ILogger interfafce Declaration public ExternalAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger) Parameters ILogger < OAuthAuthenticationProvider > logger The instance of the logger service provided by DI Properties AccessTokenProvider A function providing the access token to use Declaration public Func<Uri, string[], string> AccessTokenProvider { get; set; } Property Value Func < Uri , String [], String > Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public override Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. Overrides OAuthAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public override Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri) GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public override Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for String [] scopes Scopes to request Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri, String[]) Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.html": {
    "href": "api/PnP.Core.Auth.html",
    "title": "Namespace PnP.Core.Auth | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Auth Classes CredentialManagerAuthenticationProvider Authentication Provider that uses a set of credentials stored in the Credentials Manager of Windows DeviceCodeAuthenticationProvider Authentication Provider that uses a device code flow for authentication DeviceCodeNotification Provides information about the Device Code authentication request ExternalAuthenticationProvider Authentication Provider that relies on an external token provider InteractiveAuthenticationProvider Authentication Provider that uses an interactive flow prompting the user for credentials OAuthAuthenticationProvider Base authentication provider class OnBehalfOfAuthenticationProvider Authentication Provider based on the OnBehalfOf flow UsernamePasswordAuthenticationProvider Authentication Provider that uses a Resource Owner Password Credentials (ROCP) credential flow X509CertificateAuthenticationProvider Authentication Provider based on the X.509 Certificate"
  },
  "api/PnP.Core.Auth.InteractiveAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.InteractiveAuthenticationProvider.html",
    "title": "Class InteractiveAuthenticationProvider | PnP Core SDK",
    "keywords": "Class InteractiveAuthenticationProvider Authentication Provider that uses an interactive flow prompting the user for credentials Inheritance Object OAuthAuthenticationProvider InteractiveAuthenticationProvider Inherited Members OAuthAuthenticationProvider.ConfigurationName OAuthAuthenticationProvider.ClientId OAuthAuthenticationProvider.TenantId OAuthAuthenticationProvider.DefaultAADAppId Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public class InteractiveAuthenticationProvider : OAuthAuthenticationProvider, IAuthenticationProvider Constructors InteractiveAuthenticationProvider(ILogger<OAuthAuthenticationProvider>) Public constructor leveraging DI to initialize the ILogger interfafce Declaration public InteractiveAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger) Parameters ILogger < OAuthAuthenticationProvider > logger The instance of the logger service provided by DI InteractiveAuthenticationProvider(String, String, Uri) Public constructor for external consumers of the library Declaration public InteractiveAuthenticationProvider(string clientId, string tenantId, Uri redirectUri) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenand ID for the Authentication Provider Uri redirectUri The Redirect URI for the authentication flow Properties RedirectUri The Redirect URI for the authentication flow Declaration public Uri RedirectUri { get; set; } Property Value Uri Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public override Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. Overrides OAuthAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public override Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri) GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public override Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for String [] scopes Scopes to request Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri, String[]) Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.OAuthAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.OAuthAuthenticationProvider.html",
    "title": "Class OAuthAuthenticationProvider | PnP Core SDK",
    "keywords": "Class OAuthAuthenticationProvider Base authentication provider class Inheritance Object OAuthAuthenticationProvider CredentialManagerAuthenticationProvider DeviceCodeAuthenticationProvider ExternalAuthenticationProvider InteractiveAuthenticationProvider OnBehalfOfAuthenticationProvider UsernamePasswordAuthenticationProvider X509CertificateAuthenticationProvider Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public abstract class OAuthAuthenticationProvider : object, IAuthenticationProvider Constructors OAuthAuthenticationProvider(ILogger<OAuthAuthenticationProvider>) Public constructor for any OAuth Authentication privider Declaration public OAuthAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger) Parameters ILogger < OAuthAuthenticationProvider > logger Fields DefaultAADAppId Default Azure AD application id (PnP Management Shell) Declaration protected const string DefaultAADAppId = null Field Value String Properties ClientId The ClientId of the application to use for authentication Declaration public string ClientId { get; set; } Property Value String ConfigurationName The Name of the configuration for the Authentication Provider Declaration public string ConfigurationName { get; set; } Property Value String TenantId The Tenand ID for the application, default value is \"organizations\" for multi-tenant applications Declaration public string TenantId { get; set; } Property Value String Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public abstract Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public abstract Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public abstract Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for String [] scopes Scopes to request Returns Task < String > An access token Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.OnBehalfOfAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.OnBehalfOfAuthenticationProvider.html",
    "title": "Class OnBehalfOfAuthenticationProvider | PnP Core SDK",
    "keywords": "Class OnBehalfOfAuthenticationProvider Authentication Provider based on the OnBehalfOf flow Inheritance Object OAuthAuthenticationProvider OnBehalfOfAuthenticationProvider Inherited Members OAuthAuthenticationProvider.ConfigurationName OAuthAuthenticationProvider.ClientId OAuthAuthenticationProvider.TenantId OAuthAuthenticationProvider.DefaultAADAppId Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public sealed class OnBehalfOfAuthenticationProvider : OAuthAuthenticationProvider, IAuthenticationProvider Remarks You can find further details about the On-Behalf-Of flow here: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow Constructors OnBehalfOfAuthenticationProvider(ILogger<OAuthAuthenticationProvider>) Public constructor leveraging DI to initialize the ILogger interfafce Declaration public OnBehalfOfAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger) Parameters ILogger < OAuthAuthenticationProvider > logger The instance of the logger service provided by DI OnBehalfOfAuthenticationProvider(String, String, SecureString, Func<String>) Public constructor for external consumers of the library Declaration public OnBehalfOfAuthenticationProvider(string clientId, string tenantId, SecureString clientSecret, Func<string> userTokenProvider) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenand ID for the Authentication Provider SecureString clientSecret The Client Secret of the app Func < String > userTokenProvider A function providing the consumer user access token to use for the On-Behalf-Of flow OnBehalfOfAuthenticationProvider(String, String, StoreName, StoreLocation, String, Func<String>) Public constructor for external consumers of the library Declaration public OnBehalfOfAuthenticationProvider(string clientId, string tenantId, StoreName storeName, StoreLocation storeLocation, string thumbprint, Func<string> userTokenProvider) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenand ID for the Authentication Provider StoreName storeName The Store Name to get the X.509 certificate from StoreLocation storeLocation The Store Location to get the X.509 certificate from String thumbprint The Thumbprint of the X.509 certificate Func < String > userTokenProvider A function providing the consumer user access token to use for the On-Behalf-Of flow Properties Certificate The X.509 Certificate to use for app authentication Declaration public X509Certificate2 Certificate { get; set; } Property Value X509Certificate2 ClientSecret The ClientSecret to authenticate the app with ClientId Declaration public SecureString ClientSecret { get; set; } Property Value SecureString UserTokenProvider A function providing the consumer user access token to use for the On-Behalf-Of flow Declaration public Func<string> UserTokenProvider { get; set; } Property Value Func < String > Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public override Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. Overrides OAuthAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public override Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri) GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public override Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for String [] scopes Scopes to request Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri, String[]) Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.AuthenticationProviderFactory.html": {
    "href": "api/PnP.Core.Auth.Services.AuthenticationProviderFactory.html",
    "title": "Class AuthenticationProviderFactory | PnP Core SDK",
    "keywords": "Class AuthenticationProviderFactory Public factory service to create IAuthenticationProvider object instances Inheritance Object AuthenticationProviderFactory Namespace : PnP.Core.Auth.Services Assembly : PnP.Core.Auth.dll Syntax public class AuthenticationProviderFactory : object, IAuthenticationProviderFactory Constructors AuthenticationProviderFactory(IOptionsMonitor<PnPCoreAuthenticationOptions>, ILogger<PnPContext>, IServiceProvider) AuthenticationProviderFactory constructor Declaration public AuthenticationProviderFactory(IOptionsMonitor<PnPCoreAuthenticationOptions> options, ILogger<PnPContext> logger, IServiceProvider serviceProvider) Parameters IOptionsMonitor < PnPCoreAuthenticationOptions > options Options to configure the AuthenticationProviderFactory ILogger < PnPContext > logger Logger for log output IServiceProvider serviceProvider DI container service Methods Create(String) Creates a new instance of IAuthenticationProvider based on a provided configuration name Declaration public IAuthenticationProvider Create(string name) Parameters String name The name of the IAuthenticationProvider configuration to use Returns IAuthenticationProvider An object that implements IAuthenticationProvider based on the provided configuration name Implements IAuthenticationProviderFactory.Create(String) CreateDefault() Creates the default instance of IAuthenticationProvider based on the configuration Declaration public IAuthenticationProvider CreateDefault() Returns IAuthenticationProvider An object that implements IAuthenticationProvider based on the configuration Implements IAuthenticationProviderFactory.CreateDefault() Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.AuthenticationProvidersOptionsConfigurator.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.AuthenticationProvidersOptionsConfigurator.html",
    "title": "Class AuthenticationProvidersOptionsConfigurator | PnP Core SDK",
    "keywords": "Class AuthenticationProvidersOptionsConfigurator Handles the configuration of PnPCoreOptions based on the AuthenticationOptions settings Inheritance Object AuthenticationProvidersOptionsConfigurator Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class AuthenticationProvidersOptionsConfigurator : IConfigureOptions<PnPCoreOptions> Constructors AuthenticationProvidersOptionsConfigurator(IOptions<PnPCoreAuthenticationOptions>, IAuthenticationProviderFactory) Default constructor Declaration public AuthenticationProvidersOptionsConfigurator(IOptions<PnPCoreAuthenticationOptions> authenticationOptions, IAuthenticationProviderFactory authenticationProviderFactory) Parameters IOptions < PnPCoreAuthenticationOptions > authenticationOptions PnPCoreAuthenticationOptions authentication options IAuthenticationProviderFactory authenticationProviderFactory Authentication factory Methods Configure(PnPCoreOptions) Process the PnPCoreOptions options Declaration public void Configure(PnPCoreOptions options) Parameters PnPCoreOptions options Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.html",
    "title": "Namespace PnP.Core.Auth.Services.Builder.Configuration | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Auth.Services.Builder.Configuration Classes AuthenticationProvidersOptionsConfigurator Handles the configuration of PnPCoreOptions based on the AuthenticationOptions settings PnPCoreAuthenticationCredentialConfigurationOptions Options for one configured credentials PnPCoreAuthenticationCredentialManagerOptions Options for the CredentialManagerAuthenticationProvider PnPCoreAuthenticationCredentialsConfigurationsOptions Options for configuring PnP Core SDK PnPCoreAuthenticationCredentialsOptions Defines a collection of credential settings for secure connections to the target resources PnPCoreAuthenticationDeviceCodeOptions Options for the DeviceCodeAuthenticationProvider PnPCoreAuthenticationInteractiveOptions Options for the UsernamePasswordAuthenticationProvider PnPCoreAuthenticationOnBehalfOfOptions Options for the OnBehalfOfAuthenticationProvider PnPCoreAuthenticationOptions Options for configuring the PnP Core SDK Authentication Providers PnPCoreAuthenticationSiteOptions Options for configuring a single site in PnP Core SDK PnPCoreAuthenticationSitesOptions Options for configuring PnP Core SDK PnPCoreAuthenticationUsernamePasswordOptions Options for the UsernamePasswordAuthenticationProvider PnPCoreAuthenticationX509CertificateOptions Options for the X509CertificateAuthenticationProvider"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialConfigurationOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialConfigurationOptions.html",
    "title": "Class PnPCoreAuthenticationCredentialConfigurationOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationCredentialConfigurationOptions Options for one configured credentials Inheritance Object PnPCoreAuthenticationCredentialConfigurationOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationCredentialConfigurationOptions : object Properties ClientId The ClientId of the application to use for authentication Declaration public string ClientId { get; set; } Property Value String CredentialManager The options for the Credential Manager Authentication Provider Declaration public PnPCoreAuthenticationCredentialManagerOptions CredentialManager { get; set; } Property Value PnPCoreAuthenticationCredentialManagerOptions DeviceCode The options for the Device Code Provider Declaration public PnPCoreAuthenticationDeviceCodeOptions DeviceCode { get; set; } Property Value PnPCoreAuthenticationDeviceCodeOptions Interactive The options for the Interactive Authentication Provider Declaration public PnPCoreAuthenticationInteractiveOptions Interactive { get; set; } Property Value PnPCoreAuthenticationInteractiveOptions OnBehalfOf The options for the On Behalf Of Authentication Provider Declaration public PnPCoreAuthenticationOnBehalfOfOptions OnBehalfOf { get; set; } Property Value PnPCoreAuthenticationOnBehalfOfOptions TenantId The Tenand ID for the application, can be null Declaration public string TenantId { get; set; } Property Value String UsernamePassword The options for the Username and Password Authentication Provider Declaration public PnPCoreAuthenticationUsernamePasswordOptions UsernamePassword { get; set; } Property Value PnPCoreAuthenticationUsernamePasswordOptions X509Certificate The options for the X509 Certificate Authentication Provider Declaration public PnPCoreAuthenticationX509CertificateOptions X509Certificate { get; set; } Property Value PnPCoreAuthenticationX509CertificateOptions Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialManagerOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialManagerOptions.html",
    "title": "Class PnPCoreAuthenticationCredentialManagerOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationCredentialManagerOptions Options for the CredentialManagerAuthenticationProvider Inheritance Object PnPCoreAuthenticationCredentialManagerOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationCredentialManagerOptions : object Properties CredentialManagerName The name of the Windows Credential Manager settings to use Declaration public string CredentialManagerName { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialsConfigurationsOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialsConfigurationsOptions.html",
    "title": "Class PnPCoreAuthenticationCredentialsConfigurationsOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationCredentialsConfigurationsOptions Options for configuring PnP Core SDK Inheritance Object PnPCoreAuthenticationCredentialsConfigurationsOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationCredentialsConfigurationsOptions : Dictionary<string, PnPCoreAuthenticationCredentialConfigurationOptions> Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialsOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationCredentialsOptions.html",
    "title": "Class PnPCoreAuthenticationCredentialsOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationCredentialsOptions Defines a collection of credential settings for secure connections to the target resources Inheritance Object PnPCoreAuthenticationCredentialsOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationCredentialsOptions : object Properties Configurations The credentials options Declaration public PnPCoreAuthenticationCredentialsConfigurationsOptions Configurations { get; } Property Value PnPCoreAuthenticationCredentialsConfigurationsOptions DefaultConfiguration Defines the name of the default configuration Declaration public string DefaultConfiguration { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationDeviceCodeOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationDeviceCodeOptions.html",
    "title": "Class PnPCoreAuthenticationDeviceCodeOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationDeviceCodeOptions Options for the DeviceCodeAuthenticationProvider Inheritance Object PnPCoreAuthenticationDeviceCodeOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationDeviceCodeOptions : object Properties RedirectUri The Redirect URI for the authentication flow Declaration public Uri RedirectUri { get; set; } Property Value Uri Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationInteractiveOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationInteractiveOptions.html",
    "title": "Class PnPCoreAuthenticationInteractiveOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationInteractiveOptions Options for the UsernamePasswordAuthenticationProvider Inheritance Object PnPCoreAuthenticationInteractiveOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationInteractiveOptions : object Properties RedirectUri The Redirect URI for the authentication flow Declaration public Uri RedirectUri { get; set; } Property Value Uri Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationOnBehalfOfOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationOnBehalfOfOptions.html",
    "title": "Class PnPCoreAuthenticationOnBehalfOfOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationOnBehalfOfOptions Options for the OnBehalfOfAuthenticationProvider Inheritance Object PnPCoreAuthenticationOnBehalfOfOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationOnBehalfOfOptions : object Properties ClientSecret The ClientSecret to authenticate the app with ClientId Declaration public string ClientSecret { get; set; } Property Value String StoreLocation The location in the certificate store Declaration public StoreLocation StoreLocation { get; set; } Property Value StoreLocation StoreName The name of the certificate store Declaration public StoreName StoreName { get; set; } Property Value StoreName Thumbprint The thumbprint of the certificate Declaration public string Thumbprint { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationOptions.html",
    "title": "Class PnPCoreAuthenticationOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationOptions Options for configuring the PnP Core SDK Authentication Providers Inheritance Object PnPCoreAuthenticationOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationOptions : object Properties Credentials The credential options Declaration public PnPCoreAuthenticationCredentialsOptions Credentials { get; set; } Property Value PnPCoreAuthenticationCredentialsOptions Sites The sites options Declaration public PnPCoreAuthenticationSitesOptions Sites { get; } Property Value PnPCoreAuthenticationSitesOptions Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationSiteOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationSiteOptions.html",
    "title": "Class PnPCoreAuthenticationSiteOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationSiteOptions Options for configuring a single site in PnP Core SDK Inheritance Object PnPCoreAuthenticationSiteOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationSiteOptions : object Properties AuthenticationProviderName The Authentication Provider name Declaration public string AuthenticationProviderName { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationSitesOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationSitesOptions.html",
    "title": "Class PnPCoreAuthenticationSitesOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationSitesOptions Options for configuring PnP Core SDK Inheritance Object PnPCoreAuthenticationSitesOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationSitesOptions : Dictionary<string, PnPCoreAuthenticationSiteOptions> Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationUsernamePasswordOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationUsernamePasswordOptions.html",
    "title": "Class PnPCoreAuthenticationUsernamePasswordOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationUsernamePasswordOptions Options for the UsernamePasswordAuthenticationProvider Inheritance Object PnPCoreAuthenticationUsernamePasswordOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationUsernamePasswordOptions : object Properties Password The password for authentication Declaration public string Password { get; set; } Property Value String Username The username for authentication Declaration public string Username { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationX509CertificateOptions.html": {
    "href": "api/PnP.Core.Auth.Services.Builder.Configuration.PnPCoreAuthenticationX509CertificateOptions.html",
    "title": "Class PnPCoreAuthenticationX509CertificateOptions | PnP Core SDK",
    "keywords": "Class PnPCoreAuthenticationX509CertificateOptions Options for the X509CertificateAuthenticationProvider Inheritance Object PnPCoreAuthenticationX509CertificateOptions Namespace : PnP.Core.Auth.Services.Builder.Configuration Assembly : PnP.Core.Auth.dll Syntax public class PnPCoreAuthenticationX509CertificateOptions : object Properties StoreLocation The location in the certificate store Declaration public StoreLocation StoreLocation { get; set; } Property Value StoreLocation StoreName The name of the certificate store Declaration public StoreName StoreName { get; set; } Property Value StoreName Thumbprint The thumbprint of the certificate Declaration public string Thumbprint { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.html": {
    "href": "api/PnP.Core.Auth.Services.html",
    "title": "Namespace PnP.Core.Auth.Services | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Auth.Services Classes AuthenticationProviderFactory Public factory service to create IAuthenticationProvider object instances Interfaces IAuthenticationProviderFactory Public interface for the injectable service to create instances of the interface IAuthenticationProvider IAuthenticationProviderOptions Basic interface for all the Authentication Provider configurations"
  },
  "api/PnP.Core.Auth.Services.IAuthenticationProviderFactory.html": {
    "href": "api/PnP.Core.Auth.Services.IAuthenticationProviderFactory.html",
    "title": "Interface IAuthenticationProviderFactory | PnP Core SDK",
    "keywords": "Interface IAuthenticationProviderFactory Public interface for the injectable service to create instances of the interface IAuthenticationProvider Namespace : PnP.Core.Auth.Services Assembly : PnP.Core.Auth.dll Syntax public interface IAuthenticationProviderFactory Methods Create(String) Creates a new instance of IAuthenticationProvider based on a provided configuration name Declaration IAuthenticationProvider Create(string name) Parameters String name The name of the IAuthenticationProvider configuration to use Returns IAuthenticationProvider An object that implements IAuthenticationProvider based on the provided configuration name CreateDefault() Creates the default instance of IAuthenticationProvider based on the configuration Declaration IAuthenticationProvider CreateDefault() Returns IAuthenticationProvider An object that implements IAuthenticationProvider based on the configuration Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.Services.IAuthenticationProviderOptions.html": {
    "href": "api/PnP.Core.Auth.Services.IAuthenticationProviderOptions.html",
    "title": "Interface IAuthenticationProviderOptions | PnP Core SDK",
    "keywords": "Interface IAuthenticationProviderOptions Basic interface for all the Authentication Provider configurations Namespace : PnP.Core.Auth.Services Assembly : PnP.Core.Auth.dll Syntax public interface IAuthenticationProviderOptions Properties AuthenticationProviderType Defines the type of the IAuthenticationProvider to create Declaration Type AuthenticationProviderType { get; } Property Value Type ClientId The ClientId of the application to use for authentication Declaration string ClientId { get; set; } Property Value String TenantId The Tenand ID for the application, can be \"organizations\" for multi-tenant applications Declaration string TenantId { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.UsernamePasswordAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.UsernamePasswordAuthenticationProvider.html",
    "title": "Class UsernamePasswordAuthenticationProvider | PnP Core SDK",
    "keywords": "Class UsernamePasswordAuthenticationProvider Authentication Provider that uses a Resource Owner Password Credentials (ROCP) credential flow Inheritance Object OAuthAuthenticationProvider UsernamePasswordAuthenticationProvider Inherited Members OAuthAuthenticationProvider.ConfigurationName OAuthAuthenticationProvider.ClientId OAuthAuthenticationProvider.TenantId OAuthAuthenticationProvider.DefaultAADAppId Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public sealed class UsernamePasswordAuthenticationProvider : OAuthAuthenticationProvider, IAuthenticationProvider Remarks You can find further details about ROPC here: https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth-ropc Constructors UsernamePasswordAuthenticationProvider(ILogger<OAuthAuthenticationProvider>) Public constructor leveraging DI to initialize the ILogger interfafce Declaration public UsernamePasswordAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger) Parameters ILogger < OAuthAuthenticationProvider > logger The instance of the logger service provided by DI UsernamePasswordAuthenticationProvider(String, String, String, SecureString) Public constructor for external consumers of the library Declaration public UsernamePasswordAuthenticationProvider(string clientId, string tenantId, string username, SecureString password) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenand ID for the Authentication Provider String username The Username for authentication SecureString password The Password for authentication Properties Password The password for authenticating Declaration public SecureString Password { get; set; } Property Value SecureString Username The username for authenticating Declaration public string Username { get; set; } Property Value String Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public override Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. Overrides OAuthAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public override Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri) GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public override Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for String [] scopes Scopes to request Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri, String[]) Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Auth.X509CertificateAuthenticationProvider.html": {
    "href": "api/PnP.Core.Auth.X509CertificateAuthenticationProvider.html",
    "title": "Class X509CertificateAuthenticationProvider | PnP Core SDK",
    "keywords": "Class X509CertificateAuthenticationProvider Authentication Provider based on the X.509 Certificate Inheritance Object OAuthAuthenticationProvider X509CertificateAuthenticationProvider Inherited Members OAuthAuthenticationProvider.ConfigurationName OAuthAuthenticationProvider.ClientId OAuthAuthenticationProvider.TenantId OAuthAuthenticationProvider.DefaultAADAppId Namespace : PnP.Core.Auth Assembly : PnP.Core.Auth.dll Syntax public sealed class X509CertificateAuthenticationProvider : OAuthAuthenticationProvider, IAuthenticationProvider Constructors X509CertificateAuthenticationProvider(ILogger<OAuthAuthenticationProvider>) Public constructor leveraging DI to initialize the ILogger interfafce Declaration public X509CertificateAuthenticationProvider(ILogger<OAuthAuthenticationProvider> logger) Parameters ILogger < OAuthAuthenticationProvider > logger The instance of the logger service provided by DI X509CertificateAuthenticationProvider(String, String, StoreName, StoreLocation, String) Public constructor for external consumers of the library Declaration public X509CertificateAuthenticationProvider(string clientId, string tenantId, StoreName storeName, StoreLocation storeLocation, string thumbprint) Parameters String clientId The Client ID for the Authentication Provider String tenantId The Tenand ID for the Authentication Provider StoreName storeName The Store Name to get the X.509 certificate from StoreLocation storeLocation The Store Location to get the X.509 certificate from String thumbprint The Thumbprint of the X.509 certificate Properties Certificate The X.509 Certificate to use for app authentication Declaration public X509Certificate2 Certificate { get; set; } Property Value X509Certificate2 Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration public override Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. Overrides OAuthAuthenticationProvider.AuthenticateRequestAsync(Uri, HttpRequestMessage) GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration public override Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri) GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration public override Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) Parameters Uri resource Resource to request an access token for String [] scopes Scopes to request Returns Task < String > An access token Overrides OAuthAuthenticationProvider.GetAccessTokenAsync(Uri, String[]) Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.AuthenticationError.html": {
    "href": "api/PnP.Core.AuthenticationError.html",
    "title": "Class AuthenticationError | PnP Core SDK",
    "keywords": "Class AuthenticationError Error class for authentication errors Inheritance Object BaseError AuthenticationError Inherited Members BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData BaseError.AddAdditionalData(String, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class AuthenticationError : BaseError Constructors AuthenticationError(ErrorType, JsonElement) Constructs an AuthenticationError instance Declaration public AuthenticationError(ErrorType type, JsonElement error) Parameters ErrorType type Type of the error JsonElement error Error content as AuthenticationError(ErrorType, String) Constructs an AuthenticationError instance Declaration public AuthenticationError(ErrorType type, string error) Parameters ErrorType type Type of the error String error Error content as Properties Code Error code Declaration public string Code { get; } Property Value String CorrelationId Correlation id Declaration public Guid CorrelationId { get; } Property Value Guid ErrorCodes List of returned error codes Declaration public List<long> ErrorCodes { get; } Property Value List < Int64 > Message Error message Declaration public string Message { get; } Property Value String TimeStamp Time the error happened Declaration public string TimeStamp { get; } Property Value String TraceId Trace id Declaration public Guid TraceId { get; } Property Value Guid Methods ToString() Outputs a AuthenticationError to a string representation Declaration public override string ToString() Returns String String representation Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.AuthenticationException.html": {
    "href": "api/PnP.Core.AuthenticationException.html",
    "title": "Class AuthenticationException | PnP Core SDK",
    "keywords": "Class AuthenticationException Authentication exception Inheritance Object PnPException AuthenticationException Inherited Members PnPException.Error Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class AuthenticationException : PnPException Constructors AuthenticationException(ErrorType, String) AuthenticationException constructor Declaration public AuthenticationException(ErrorType type, string message) Parameters ErrorType type Type of error String message Error message AuthenticationException(ErrorType, String, Exception) AuthenticationException constructor Declaration public AuthenticationException(ErrorType type, string message, Exception innerException) Parameters ErrorType type Type of error String message Error message Exception innerException Inner exception (if any) Methods ToString() Outputs a AuthenticationException to a string representation Declaration public override string ToString() Returns String String representation Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.BaseError.html": {
    "href": "api/PnP.Core.BaseError.html",
    "title": "Class BaseError | PnP Core SDK",
    "keywords": "Class BaseError Base error information Inheritance Object BaseError AuthenticationError ClientError ServiceError Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public abstract class BaseError : object Constructors BaseError(ErrorType) Default base constructor/> Declaration public BaseError(ErrorType type) Parameters ErrorType type Type of the error Properties AdditionalData Additional data linked to an error Declaration public IDictionary<string, object> AdditionalData { get; } Property Value IDictionary < String , Object > PnPCorrelationId Correlation for a PnP Core SDK operation Declaration public Guid PnPCorrelationId { get; } Property Value Guid Type ErrorType of the error Declaration public ErrorType Type { get; } Property Value ErrorType Methods AddAdditionalData(String, Object) Adds additional error data to this error as property/value pairs Declaration protected void AddAdditionalData(string propertyName, object propertyValue) Parameters String propertyName Property to add Object propertyValue Value to add Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.ClientError.html": {
    "href": "api/PnP.Core.ClientError.html",
    "title": "Class ClientError | PnP Core SDK",
    "keywords": "Class ClientError Information about the client error Inheritance Object BaseError ClientError Inherited Members BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData BaseError.AddAdditionalData(String, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class ClientError : BaseError Constructors ClientError(ErrorType, String) ClientError constructor, creates a ClientError for the provided error type and message Declaration public ClientError(ErrorType type, string message) Parameters ErrorType type Type of the error String message Error message Properties Message Error message that was linked to the client error Declaration public string Message { get; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.ClientException.html": {
    "href": "api/PnP.Core.ClientException.html",
    "title": "Class ClientException | PnP Core SDK",
    "keywords": "Class ClientException PnP Client exception Inheritance Object PnPException ClientException Inherited Members PnPException.Error Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class ClientException : PnPException Constructors ClientException(ErrorType, String) ClientException constructor Declaration public ClientException(ErrorType type, string message) Parameters ErrorType type Type of the error String message Error message ClientException(ErrorType, String, Exception) ClientException constructor Declaration public ClientException(ErrorType type, string message, Exception innerException) Parameters ErrorType type Type of the error String message Error message Exception innerException Inner exception to link to this exception Methods ToString() Outputs a ClientException to a string representation Declaration public override string ToString() Returns String String representation Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.CsomError.html": {
    "href": "api/PnP.Core.CsomError.html",
    "title": "Class CsomError | PnP Core SDK",
    "keywords": "Class CsomError Csom service error Inheritance Object BaseError ServiceError CsomError Inherited Members ServiceError.HttpResponseCode ServiceError.Message ServiceError.ClientRequestId ServiceError.Code BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData BaseError.AddAdditionalData(String, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class CsomError : ServiceError Constructors CsomError(ErrorType, Int32, JsonElement) Default constructor for the SharePointRestError error Declaration public CsomError(ErrorType type, int httpResponseCode, JsonElement errorJson) Parameters ErrorType type ErrorType type of the error Int32 httpResponseCode Http response code of the service request that failed JsonElement errorJson Json containing the error information Properties ServerErrorCode SharePoint server error code Declaration public long ServerErrorCode { get; } Property Value Int64 Methods ToString() Outputs a CsomError to a string representation Declaration public override string ToString() Returns String String representation Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.CsomServiceException.html": {
    "href": "api/PnP.Core.CsomServiceException.html",
    "title": "Class CsomServiceException | PnP Core SDK",
    "keywords": "Class CsomServiceException CSOM Service exception Inheritance Object PnPException ServiceException CsomServiceException Inherited Members PnPException.Error Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class CsomServiceException : ServiceException Constructors CsomServiceException(ErrorType, Int32, JsonElement) Creates a CsomServiceException using the provided error type, http response code and CSOM request response Declaration public CsomServiceException(ErrorType type, int httpResponseCode, JsonElement response) Parameters ErrorType type Type of the error Int32 httpResponseCode Http response code of the executed CSOM request JsonElement response JSON response of the executed CSOM request Methods ToString() Outputs a CsomServiceException to a string representation Declaration public override string ToString() Returns String String representation Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.ErrorType.html": {
    "href": "api/PnP.Core.ErrorType.html",
    "title": "Enum ErrorType | PnP Core SDK",
    "keywords": "Enum ErrorType List of possible errors that can be thrown Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public enum ErrorType : int AzureADError Authentication call to Azure AD failed CollectionNotLoaded Collection needs to be loaded once before you can use the paging methods for paged data retrieval ConfigurationError There's an issue in the provided configuration data CsomServiceError CSOM request returned an error GraphBetaNotAllowed Making a Graph Beta call is not allowed. See usage docs to learn more GraphServiceError Graph service request returned an error InstanceWasDeleted This model instance was deleted, you can't use it anymore InvalidParameters Invalid parameters are sent it for a request LinqError Something went wrong with issuing a linq query MissingAddApiHandler Adding an item to Microsoft 365 using 'AddAsync' requires that the added model class has an AddApiHandler configured. See contribution docs to learn more ModelMetadataIncorrect There's incomplete model metadata configured. See contribution docs to learn more. OfflineDataError There's an issue with the available offline test data PropertyNotLoaded The property you want to use was not yet loaded, first request it before using it SharePointRestServiceError SharePoint REST request returned an error TeamsAsyncOperationError Something went wrong when doing an Teams async operation TooManyBatchRetries Too many retries of a request in a Graph batch happened TooManyRetries Too many retries of an http request happened UnexpectedMappingType The payload to map to object has an unexpected type UnresolvedTokens The API call still contains unresolved tokens Unsupported Unsupported action UnsupportedViaBatch The requests in this batch are not vald Extension Methods DataModelExtensions.IsPropertyAvailable<ErrorType>(Expression<Func<ErrorType, Object>>)"
  },
  "api/PnP.Core.html": {
    "href": "api/PnP.Core.html",
    "title": "Namespace PnP.Core | PnP Core SDK",
    "keywords": "Namespace PnP.Core Classes AuthenticationError Error class for authentication errors AuthenticationException Authentication exception BaseError Base error information ClientError Information about the client error ClientException PnP Client exception CsomError Csom service error CsomServiceException CSOM Service exception MicrosoftGraphError Microsoft Graph service error MicrosoftGraphServiceException Microsoft Graph Service exception PnPConstants Support class to provide all the constants for the engine PnPException Base class for the pnp core sdk exceptions ServiceError Error information for a service error ServiceException Abstract class representing service errors SharePointRestError SharePoint Rest service error SharePointRestServiceException Microsoft SharePoint REST Service exception UrlUtility Static methods to modify URL paths. Enums ErrorType List of possible errors that can be thrown"
  },
  "api/PnP.Core.MicrosoftGraphError.html": {
    "href": "api/PnP.Core.MicrosoftGraphError.html",
    "title": "Class MicrosoftGraphError | PnP Core SDK",
    "keywords": "Class MicrosoftGraphError Microsoft Graph service error Inheritance Object BaseError ServiceError MicrosoftGraphError Inherited Members ServiceError.HttpResponseCode ServiceError.Message ServiceError.ClientRequestId ServiceError.Code BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData BaseError.AddAdditionalData(String, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class MicrosoftGraphError : ServiceError Constructors MicrosoftGraphError(ErrorType, Int32, JsonElement) Default constructor for the MicrosoftGraphError error Declaration public MicrosoftGraphError(ErrorType type, int httpResponseCode, JsonElement error) Parameters ErrorType type ErrorType type of the error Int32 httpResponseCode Http response code of the service request that failed JsonElement error holding the json data of the service error MicrosoftGraphError(ErrorType, Int32, String) Default constructor for the MicrosoftGraphError error Declaration public MicrosoftGraphError(ErrorType type, int httpResponseCode, string response) Parameters ErrorType type ErrorType type of the error Int32 httpResponseCode Http response code of the service request that failed String response String holding the information about the failed request Methods ToString() Outputs a MicrosoftGraphError to a string representation Declaration public override string ToString() Returns String String representation Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.MicrosoftGraphServiceException.html": {
    "href": "api/PnP.Core.MicrosoftGraphServiceException.html",
    "title": "Class MicrosoftGraphServiceException | PnP Core SDK",
    "keywords": "Class MicrosoftGraphServiceException Microsoft Graph Service exception Inheritance Object PnPException ServiceException MicrosoftGraphServiceException Inherited Members PnPException.Error Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class MicrosoftGraphServiceException : ServiceException Constructors MicrosoftGraphServiceException(ErrorType, Int32, JsonElement) Creates a MicrosoftGraphServiceException using the provided error type, http response code and request response Declaration public MicrosoftGraphServiceException(ErrorType type, int httpResponseCode, JsonElement error) Parameters ErrorType type Type of the error Int32 httpResponseCode Http response code of the executed Graph request JsonElement error Json error coming from the executed Graph request MicrosoftGraphServiceException(ErrorType, Int32, String) Creates a MicrosoftGraphServiceException using the provided error type, http response code and request response Declaration public MicrosoftGraphServiceException(ErrorType type, int httpResponseCode, string response) Parameters ErrorType type Type of the error Int32 httpResponseCode Http response code of the executed Graph request String response Response of the executed Graph request Methods ToString() Outputs a MicrosoftGraphServiceException to a string representation Declaration public override string ToString() Returns String String representation Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.DataModelExtensions.html": {
    "href": "api/PnP.Core.Model.DataModelExtensions.html",
    "title": "Class DataModelExtensions | PnP Core SDK",
    "keywords": "Class DataModelExtensions Data model extension methods for public use Inheritance Object DataModelExtensions Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public static class DataModelExtensions : object Methods ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) Checks if the needed properties were loaded or not Declaration public static bool ArePropertiesAvailable<TModel>(this IDataModel<TModel> model, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModel <TModel> model Implementation of the model (e.g. Web) Expression < Func <TModel, Object >>[] expressions Expression listing the properties to check Returns Boolean True if properties were loaded, false otherwise Type Parameters TModel Model type (e.g. IWeb) EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) Checks if the requested properties are loaded for the given model, if not they're loaded via a GetAsync call Declaration public static Task EnsurePropertiesAsync<TModel>(this IDataModel<TModel> model, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModel <TModel> model Implementation of the model (e.g. Web) Expression < Func <TModel, Object >>[] expressions Expressions listing the properties to load Returns Task Type Parameters TModel Model type (e.g. IWeb) IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) Checks if a property is loaded or not on a complex type Declaration public static bool IsPropertyAvailable<TModel>(this TModel model, Expression<Func<TModel, object>> expression) Parameters TModel model Implementation of the model (e.g. TeamFunSettings) Expression < Func <TModel, Object >> expression Expression listing the property to load Returns Boolean True if property was loaded, false otherwise Type Parameters TModel Model type (e.g. ITeamFunSettings) IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) Checks if a property is loaded or not Declaration public static bool IsPropertyAvailable<TModel>(this IDataModel<TModel> model, Expression<Func<TModel, object>> expression) Parameters IDataModel <TModel> model Implementation of the model (e.g. Web) Expression < Func <TModel, Object >> expression Expression listing the property to load Returns Boolean True if property was loaded, false otherwise Type Parameters TModel Model type (e.g. IWeb) LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[]) Enables using the .LoadProperties lambda expression syntax on a collection Declaration public static IQueryable<TModel> LoadProperties<TModel>(this IDataModelCollection<TModel> collection, params Expression<Func<TModel, object>>[] expressions) Parameters IDataModelCollection <TModel> collection Collection to apply the .LoadProperties on Expression < Func <TModel, Object >>[] expressions Expression Returns IQueryable <TModel> Null...return value is not needed Type Parameters TModel Collection model"
  },
  "api/PnP.Core.Model.html": {
    "href": "api/PnP.Core.Model.html",
    "title": "Namespace PnP.Core.Model | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Model Classes DataModelExtensions Data model extension methods for public use TransientDictionary Class tracks Dictionary changes Interfaces IComplexType Interface describing a complex type IDataModel<TModel> Defines the very basic interface for every Domain Model object. Add methods are implemented in their respective model interfaces IDataModelCollection<TModel> Defines the very basic interface for every collection of Domain Model objects IDataModelDelete Defines the delete interface for Domain Model objects that need delete. IDataModelGet Defines the basic untyped read interface for Domain Model objects that can be read. IDataModelGet<TModel> Defines the read interface for Domain Model objects that can be read. IDataModelMappingHandler Interface to the define the basic behavior of Domain Model object that can be mapped from a JSON response coming out of a REST request IDataModelParent Interface to implement parent concept on all model objects IDataModelUpdate Defines the update interface for Domain Model objects that need update. IDataModelWithContext Interface to implement PnPContext concept on all model objects IDataModelWithKey Defines the basic behavior for a Domain Model object with an identifying key IExpandoComplexType Public interface to define an object extensible through a dictionary of metadata properties IExpandoDataModel Public interface to define an object extensible through a dictionary of metadata properties IManageableCollection Defines the behavior of a collection that can be managed with untyped prototype methods IManageableCollection<TModel> Defines the behavior of a collection that can be managed with fully typed prototype methods IMetadataExtensible Defines the very basic interface for every object that is provided with metadata eventually with deferred loading IQueryableDataModel Interface describing a linq queryable model IRequestable Defines the very basic interface for every object that is somehow requestable through an external querying system IRequestableCollection Defines the very basic interface for every collection that is somehow requestable through an external querying system ISupportPaging<TModel> Paged data retrieval can be done using the methods provided via this interface"
  },
  "api/PnP.Core.Model.IComplexType.html": {
    "href": "api/PnP.Core.Model.IComplexType.html",
    "title": "Interface IComplexType | PnP Core SDK",
    "keywords": "Interface IComplexType Interface describing a complex type Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IComplexType Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModel-1.html": {
    "href": "api/PnP.Core.Model.IDataModel-1.html",
    "title": "Interface IDataModel<TModel> | PnP Core SDK",
    "keywords": "Interface IDataModel<TModel> Defines the very basic interface for every Domain Model object. Add methods are implemented in their respective model interfaces Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<TModel>.GetBatchAsync(Batch, Expression<Func<TModel, Object>>[]) IDataModelGet<TModel>.GetBatchAsync(Expression<Func<TModel, Object>>[]) IDataModelGet<TModel>.GetBatch(Batch, Expression<Func<TModel, Object>>[]) IDataModelGet<TModel>.GetBatch(Expression<Func<TModel, Object>>[]) IDataModelGet<TModel>.GetAsync(Expression<Func<TModel, Object>>[]) IDataModelGet<TModel>.GetAsync(ApiResponse, Expression<Func<TModel, Object>>[]) IDataModelGet<TModel>.Get(Expression<Func<TModel, Object>>[]) IDataModelGet<TModel>.Get(ApiResponse, Expression<Func<TModel, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModel<TModel> : IDataModelParent, IDataModelWithContext, IDataModelGet<TModel>, IDataModelGet Type Parameters TModel The actual type of the Domain Model object Properties Requested Was this model requested from the back-end Declaration bool Requested { get; set; } Property Value Boolean Methods HasChanged(String) Checks if a property on this model object has changed Declaration bool HasChanged(string propertyName = \"\") Parameters String propertyName Property to check Returns Boolean True if changed, false otherwise HasValue(String) Checks if a property on this model object has a value set Declaration bool HasValue(string propertyName = \"\") Parameters String propertyName Property to check Returns Boolean True if set, false otherwise Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModelCollection-1.html": {
    "href": "api/PnP.Core.Model.IDataModelCollection-1.html",
    "title": "Interface IDataModelCollection<TModel> | PnP Core SDK",
    "keywords": "Interface IDataModelCollection<TModel> Defines the very basic interface for every collection of Domain Model objects Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelCollection<TModel> : IEnumerable<TModel>, IDataModelParent, IDataModelWithContext, IRequestableCollection Type Parameters TModel The actual type of the Domain Model objects Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.IDataModelDelete.html": {
    "href": "api/PnP.Core.Model.IDataModelDelete.html",
    "title": "Interface IDataModelDelete | PnP Core SDK",
    "keywords": "Interface IDataModelDelete Defines the delete interface for Domain Model objects that need delete. Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelDelete Methods Delete() Deletes a Domain Model object into the remote data source Declaration void Delete() DeleteAsync() Deletes a Domain Model object into the remote data source Declaration Task DeleteAsync() Returns Task DeleteBatch() Collects the request to delete a Domain Model object into the remote data source Declaration void DeleteBatch() DeleteBatch(Batch) Collects the request to delete a Domain Model object into the remote data source using a batch Declaration void DeleteBatch(Batch batch) Parameters Batch batch Batch add this request to DeleteBatchAsync() Collects the request to delete a Domain Model object into the remote data source Declaration Task DeleteBatchAsync() Returns Task DeleteBatchAsync(Batch) Collects the request to delete a Domain Model object into the remote data source using a batch Declaration Task DeleteBatchAsync(Batch batch) Parameters Batch batch Batch add this request to Returns Task Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModelGet.html": {
    "href": "api/PnP.Core.Model.IDataModelGet.html",
    "title": "Interface IDataModelGet | PnP Core SDK",
    "keywords": "Interface IDataModelGet Defines the basic untyped read interface for Domain Model objects that can be read. Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelGet Methods Get(Expression<Func<Object, Object>>[]) Retrieves a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration object Get(params Expression<Func<object, object>>[] expressions) Parameters Expression < Func < Object , Object >>[] expressions The properties to select Returns Object The Domain Model object Get(ApiResponse, Expression<Func<Object, Object>>[]) Special override the load child model classes ==> if apiResponse != default then no get will be done but the system will handle the mapping from json to model Declaration object Get(ApiResponse apiResponse, params Expression<Func<object, object>>[] expressions) Parameters ApiResponse apiResponse Json response (when in recursive mapping of json to model), default otherwise Expression < Func < Object , Object >>[] expressions The properties to select Returns Object The Domain Model object GetAsync(Expression<Func<Object, Object>>[]) Retrieves a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task<object> GetAsync(params Expression<Func<object, object>>[] expressions) Parameters Expression < Func < Object , Object >>[] expressions The properties to select Returns Task < Object > The Domain Model object GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) Special override the load child model classes ==> if apiResponse != default then no get will be done but the system will handle the mapping from json to model Declaration Task<object> GetAsync(ApiResponse apiResponse, params Expression<Func<object, object>>[] expressions) Parameters ApiResponse apiResponse Json response (when in recursive mapping of json to model), default otherwise Expression < Func < Object , Object >>[] expressions The properties to select Returns Task < Object > The Domain Model object GetBatch(Expression<Func<Object, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration object GetBatch(params Expression<Func<object, object>>[] expressions) Parameters Expression < Func < Object , Object >>[] expressions The properties to select Returns Object The Domain Model object GetBatch(Batch, Expression<Func<Object, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration object GetBatch(Batch batch, params Expression<Func<object, object>>[] expressions) Parameters Batch batch Batch add this request to Expression < Func < Object , Object >>[] expressions The properties to select Returns Object The Domain Model object GetBatchAsync(Expression<Func<Object, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task<object> GetBatchAsync(params Expression<Func<object, object>>[] expressions) Parameters Expression < Func < Object , Object >>[] expressions The properties to select Returns Task < Object > The Domain Model object GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task<object> GetBatchAsync(Batch batch, params Expression<Func<object, object>>[] expressions) Parameters Batch batch Batch add this request to Expression < Func < Object , Object >>[] expressions The properties to select Returns Task < Object > The Domain Model object Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModelGet-1.html": {
    "href": "api/PnP.Core.Model.IDataModelGet-1.html",
    "title": "Interface IDataModelGet<TModel> | PnP Core SDK",
    "keywords": "Interface IDataModelGet<TModel> Defines the read interface for Domain Model objects that can be read. Inherited Members IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelGet<TModel> : IDataModelGet Type Parameters TModel Methods Get(Expression<Func<TModel, Object>>[]) Retrieves a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration TModel Get(params Expression<Func<TModel, object>>[] expressions) Parameters Expression < Func <TModel, Object >>[] expressions The properties to select Returns TModel The Domain Model object Get(ApiResponse, Expression<Func<TModel, Object>>[]) Special override the load child model classes ==> if apiResponse != default then no get will be done but the system will handle the mapping from json to model Declaration TModel Get(ApiResponse apiResponse, params Expression<Func<TModel, object>>[] expressions) Parameters ApiResponse apiResponse Json response (when in recursive mapping of json to model), default otherwise Expression < Func <TModel, Object >>[] expressions The properties to select Returns TModel The Domain Model object GetAsync(Expression<Func<TModel, Object>>[]) Retrieves a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task<TModel> GetAsync(params Expression<Func<TModel, object>>[] expressions) Parameters Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task <TModel> The Domain Model object GetAsync(ApiResponse, Expression<Func<TModel, Object>>[]) Special override the load child model classes ==> if apiResponse != default then no get will be done but the system will handle the mapping from json to model Declaration Task<TModel> GetAsync(ApiResponse apiResponse, params Expression<Func<TModel, object>>[] expressions) Parameters ApiResponse apiResponse Json response (when in recursive mapping of json to model), default otherwise Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task <TModel> The Domain Model object GetBatch(Expression<Func<TModel, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration TModel GetBatch(params Expression<Func<TModel, object>>[] expressions) Parameters Expression < Func <TModel, Object >>[] expressions The properties to select Returns TModel The Domain Model object GetBatch(Batch, Expression<Func<TModel, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration TModel GetBatch(Batch batch, params Expression<Func<TModel, object>>[] expressions) Parameters Batch batch Batch add this request to Expression < Func <TModel, Object >>[] expressions The properties to select Returns TModel The Domain Model object GetBatchAsync(Expression<Func<TModel, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task<TModel> GetBatchAsync(params Expression<Func<TModel, object>>[] expressions) Parameters Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task <TModel> The Domain Model object GetBatchAsync(Batch, Expression<Func<TModel, Object>>[]) Batches the retrieval of a Domain Model object from the remote data source, eventually selecting custom properties or using a default set of properties Declaration Task<TModel> GetBatchAsync(Batch batch, params Expression<Func<TModel, object>>[] expressions) Parameters Batch batch Batch add this request to Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task <TModel> The Domain Model object Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModelMappingHandler.html": {
    "href": "api/PnP.Core.Model.IDataModelMappingHandler.html",
    "title": "Interface IDataModelMappingHandler | PnP Core SDK",
    "keywords": "Interface IDataModelMappingHandler Interface to the define the basic behavior of Domain Model object that can be mapped from a JSON response coming out of a REST request Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelMappingHandler Properties MappingHandler Handler that will fire when a property mapping does cannot be done automatically Declaration Func<FromJson, object> MappingHandler { get; set; } Property Value Func < FromJson , Object > PostMappingHandler Handler that will fire after the full json to model operation was done Declaration Action<string> PostMappingHandler { get; set; } Property Value Action < String > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModelParent.html": {
    "href": "api/PnP.Core.Model.IDataModelParent.html",
    "title": "Interface IDataModelParent | PnP Core SDK",
    "keywords": "Interface IDataModelParent Interface to implement parent concept on all model objects Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelParent Properties Parent Represents the parent of the current domain model object Declaration IDataModelParent Parent { get; set; } Property Value IDataModelParent Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModelUpdate.html": {
    "href": "api/PnP.Core.Model.IDataModelUpdate.html",
    "title": "Interface IDataModelUpdate | PnP Core SDK",
    "keywords": "Interface IDataModelUpdate Defines the update interface for Domain Model objects that need update. Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelUpdate Methods Update() Updates a Domain Model object into the remote data source Declaration void Update() UpdateAsync() Updates a Domain Model object into the remote data source Declaration Task UpdateAsync() Returns Task UpdateBatch() Collects the request to update a Domain Model object into the remote data source Declaration void UpdateBatch() UpdateBatch(Batch) Collects the request to update a Domain Model object into the remote data source using a batch Declaration void UpdateBatch(Batch batch) Parameters Batch batch Batch add this request to UpdateBatchAsync() Collects the request to update a Domain Model object into the remote data source Declaration Task UpdateBatchAsync() Returns Task UpdateBatchAsync(Batch) Collects the request to update a Domain Model object into the remote data source using a batch Declaration Task UpdateBatchAsync(Batch batch) Parameters Batch batch Batch add this request to Returns Task Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModelWithContext.html": {
    "href": "api/PnP.Core.Model.IDataModelWithContext.html",
    "title": "Interface IDataModelWithContext | PnP Core SDK",
    "keywords": "Interface IDataModelWithContext Interface to implement PnPContext concept on all model objects Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelWithContext Properties PnPContext PnPContext linked to this model instance Declaration PnPContext PnPContext { get; set; } Property Value PnPContext Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IDataModelWithKey.html": {
    "href": "api/PnP.Core.Model.IDataModelWithKey.html",
    "title": "Interface IDataModelWithKey | PnP Core SDK",
    "keywords": "Interface IDataModelWithKey Defines the basic behavior for a Domain Model object with an identifying key Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IDataModelWithKey Properties Key Readonly property to get the untyped key of the object Declaration object Key { get; set; } Property Value Object Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IExpandoComplexType.html": {
    "href": "api/PnP.Core.Model.IExpandoComplexType.html",
    "title": "Interface IExpandoComplexType | PnP Core SDK",
    "keywords": "Interface IExpandoComplexType Public interface to define an object extensible through a dictionary of metadata properties Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IExpandoComplexType : IComplexType Properties Count Gets the count of properties of the current expando complex type object Declaration int Count { get; } Property Value Int32 Item[String] Gets or sets dynamic properties Declaration object this[string key] { get; set; } Parameters String key The key of the property to get or set Property Value Object The value of the property Methods AsDynamic() Transforms the current model instance into a dynamic type Declaration dynamic AsDynamic() Returns Object Dynamic version of current model instance Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IExpandoDataModel.html": {
    "href": "api/PnP.Core.Model.IExpandoDataModel.html",
    "title": "Interface IExpandoDataModel | PnP Core SDK",
    "keywords": "Interface IExpandoDataModel Public interface to define an object extensible through a dictionary of metadata properties Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IExpandoDataModel Properties Values The dictionary of metadata properties Declaration TransientDictionary Values { get; } Property Value TransientDictionary Methods AsDynamic() Transforms the current model instance into a dynamic type Declaration dynamic AsDynamic() Returns Object Dynamic version of current model instance Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IManageableCollection.html": {
    "href": "api/PnP.Core.Model.IManageableCollection.html",
    "title": "Interface IManageableCollection | PnP Core SDK",
    "keywords": "Interface IManageableCollection Defines the behavior of a collection that can be managed with untyped prototype methods Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IManageableCollection Methods Add(Object) Method to add a new item to the collection Declaration void Add(object item) Parameters Object item The untyped item to add AddOrUpdate(Object, Predicate<Object>) Method to add a new untyped item or update an already existing one based on a selection predicate Declaration void AddOrUpdate(object newItem, Predicate<object> selector) Parameters Object newItem The untyped item to add Predicate < Object > selector The selection predicate for the already existing item, if any CreateNew() Method to create a new item of the collection, ready to be added to the same collection Declaration object CreateNew() Returns Object The new item, ready to be added to the current collection CreateNewAndAdd() Method to create a new typed item of the collection and immediately add it the collection Declaration object CreateNewAndAdd() Returns Object The new item, added to the collection Remove(Object) Method to remove an untyped item from the collection Declaration bool Remove(object item) Parameters Object item The untyped item to remove Returns Boolean True if the removal is successful Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IManageableCollection-1.html": {
    "href": "api/PnP.Core.Model.IManageableCollection-1.html",
    "title": "Interface IManageableCollection<TModel> | PnP Core SDK",
    "keywords": "Interface IManageableCollection<TModel> Defines the behavior of a collection that can be managed with fully typed prototype methods Inherited Members IManageableCollection.Add(Object) IManageableCollection.AddOrUpdate(Object, Predicate<Object>) IManageableCollection.Remove(Object) Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IManageableCollection<TModel> : IManageableCollection Type Parameters TModel Methods Add(TModel) Method to add a new item to the collection Declaration void Add(TModel item) Parameters TModel item The untyped item to add AddOrUpdate(TModel, Predicate<TModel>) Method to add a new fully typed item or update an already existing one based on a selection predicate Declaration void AddOrUpdate(TModel newItem, Predicate<TModel> selector) Parameters TModel newItem The fully typed item to add Predicate <TModel> selector The selection predicate for the already existing item, if any CreateNew() Method to create a new typed item of the collection, ready to be added to the same collection Declaration TModel CreateNew() Returns TModel The new item, ready to be added to the current collection CreateNewAndAdd() Method to create a new typed item of the collection and immediately add it the collection Declaration TModel CreateNewAndAdd() Returns TModel The new item, added to the collection Remove(TModel) Method to remove an fully typed item from the collection Declaration bool Remove(TModel item) Parameters TModel item The fully typed item to remove Returns Boolean True if the removal is successful Replace(Int32, TModel) Replaces an item in the collection with a new one Declaration void Replace(int itemIndex, TModel newItem) Parameters Int32 itemIndex The index of the item to replace within the collection TModel newItem New item to replace the old one with Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IMetadataExtensible.html": {
    "href": "api/PnP.Core.Model.IMetadataExtensible.html",
    "title": "Interface IMetadataExtensible | PnP Core SDK",
    "keywords": "Interface IMetadataExtensible Defines the very basic interface for every object that is provided with metadata eventually with deferred loading Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IMetadataExtensible Properties Metadata Dictionary to access the domain model object Metadata Declaration Dictionary<string, string> Metadata { get; } Property Value Dictionary < String , String > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IQueryableDataModel.html": {
    "href": "api/PnP.Core.Model.IQueryableDataModel.html",
    "title": "Interface IQueryableDataModel | PnP Core SDK",
    "keywords": "Interface IQueryableDataModel Interface describing a linq queryable model Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IQueryableDataModel Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IRequestable.html": {
    "href": "api/PnP.Core.Model.IRequestable.html",
    "title": "Interface IRequestable | PnP Core SDK",
    "keywords": "Interface IRequestable Defines the very basic interface for every object that is somehow requestable through an external querying system Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IRequestable Properties Requested Was this object requested, a collection with 0 items and Requested == false was never loaded Declaration bool Requested { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.IRequestableCollection.html": {
    "href": "api/PnP.Core.Model.IRequestableCollection.html",
    "title": "Interface IRequestableCollection | PnP Core SDK",
    "keywords": "Interface IRequestableCollection Defines the very basic interface for every collection that is somehow requestable through an external querying system Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface IRequestableCollection Properties Length Returns the size of the collection Declaration int Length { get; } Property Value Int32 Requested Was this collection requested, a collection with 0 items and Requested == false was never loaded Declaration bool Requested { get; set; } Property Value Boolean RequestedItems Represents the items already requested from the back-end service Declaration Collections.IEnumerable RequestedItems { get; } Property Value Collections.IEnumerable Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.ISupportPaging-1.html": {
    "href": "api/PnP.Core.Model.ISupportPaging-1.html",
    "title": "Interface ISupportPaging<TModel> | PnP Core SDK",
    "keywords": "Interface ISupportPaging<TModel> Paged data retrieval can be done using the methods provided via this interface Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public interface ISupportPaging<TModel> Type Parameters TModel Properties CanPage Determines whether paging is possible Declaration bool CanPage { get; } Property Value Boolean Methods GetAllPagesAsync() Retrieves all pages Declaration Task GetAllPagesAsync() Returns Task GetNextPageAsync() Gets the next page in a series Declaration Task GetNextPageAsync() Returns Task GetPagedAsync(Int32, Expression<Func<TModel, Object>>[]) Gets the first page with a given size Declaration Task GetPagedAsync(int pageSize, params Expression<Func<TModel, object>>[] expressions) Parameters Int32 pageSize Size of the page to request, minimal size is 1 Expression < Func <TModel, Object >>[] expressions The properties to select Returns Task Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Security.GroupVisibility.html": {
    "href": "api/PnP.Core.Model.Security.GroupVisibility.html",
    "title": "Enum GroupVisibility | PnP Core SDK",
    "keywords": "Enum GroupVisibility Group visibility Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public enum GroupVisibility : int Hiddenmembership Group is a hidden membership group Private Group is a private group Public Group is a public group Extension Methods DataModelExtensions.IsPropertyAvailable<GroupVisibility>(Expression<Func<GroupVisibility, Object>>)"
  },
  "api/PnP.Core.Model.Security.html": {
    "href": "api/PnP.Core.Model.Security.html",
    "title": "Namespace PnP.Core.Model.Security | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Model.Security Interfaces IGraphGroup A Microsoft 365 Group IGraphGroupCollection Public interface to define a collection of Microsoft 365 Groups IGraphPrincipal Represents a Microsoft 365 user or group IGraphUser Public interface to define a Microsoft 365 user IGraphUserCollection Public interface to define a collection of Microsoft 365 users IIdentity The Identity resource represents an identity of an actor. For example, an actor can be a user, device, or application. ISharePointGroup Public interface to define a SharePoint Group ISharePointGroupCollection Public interface to define a collection of SharePoint groups ISharePointPrincipal Represents a SharePoint user or group that can be assigned permissions to control security. ISharePointUser Public interface to define a SharePoint User ISharePointUserCollection Public interface to define a collection of SharePoint users Enums GroupVisibility Group visibility PrincipalType Specifies the type of a principal. This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values."
  },
  "api/PnP.Core.Model.Security.IGraphGroup.html": {
    "href": "api/PnP.Core.Model.Security.IGraphGroup.html",
    "title": "Interface IGraphGroup | PnP Core SDK",
    "keywords": "Interface IGraphGroup A Microsoft 365 Group Inherited Members IDataModel<IGraphGroup>.HasValue(String) IDataModel<IGraphGroup>.HasChanged(String) IDataModel<IGraphGroup>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IGraphGroup>.GetBatchAsync(Batch, Expression<Func<IGraphGroup, Object>>[]) IDataModelGet<IGraphGroup>.GetBatchAsync(Expression<Func<IGraphGroup, Object>>[]) IDataModelGet<IGraphGroup>.GetBatch(Batch, Expression<Func<IGraphGroup, Object>>[]) IDataModelGet<IGraphGroup>.GetBatch(Expression<Func<IGraphGroup, Object>>[]) IDataModelGet<IGraphGroup>.GetAsync(Expression<Func<IGraphGroup, Object>>[]) IDataModelGet<IGraphGroup>.GetAsync(ApiResponse, Expression<Func<IGraphGroup, Object>>[]) IDataModelGet<IGraphGroup>.Get(Expression<Func<IGraphGroup, Object>>[]) IDataModelGet<IGraphGroup>.Get(ApiResponse, Expression<Func<IGraphGroup, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IGraphPrincipal.Id Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IGraphGroup : IDataModel<IGraphGroup>, IDataModelParent, IDataModelWithContext, IDataModelGet<IGraphGroup>, IDataModelGet, IGraphPrincipal, IQueryableDataModel Properties Classification Classification of this group Declaration string Classification { get; set; } Property Value String CreatedDateTime When was this group created Declaration DateTimeOffset CreatedDateTime { get; } Property Value DateTimeOffset Description Description of the Microsoft 365 Group Declaration string Description { get; set; } Property Value String DisplayName Name of the Microsoft 365 Group Declaration string DisplayName { get; set; } Property Value String Mail Email address of this Microsoft 365 group Declaration string Mail { get; } Property Value String MailEnabled Is this group mail enabled Declaration bool MailEnabled { get; set; } Property Value Boolean MailNickname Mail nickname of this Microsoft 365 group Declaration string MailNickname { get; } Property Value String Visibility Visibility of this group Declaration GroupVisibility Visibility { get; set; } Property Value GroupVisibility WebUrl Url of the SharePoint site connected to this Microsoft 365 group Declaration Uri WebUrl { get; } Property Value Uri Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Security.IGraphGroupCollection.html": {
    "href": "api/PnP.Core.Model.Security.IGraphGroupCollection.html",
    "title": "Interface IGraphGroupCollection | PnP Core SDK",
    "keywords": "Interface IGraphGroupCollection Public interface to define a collection of Microsoft 365 Groups Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IGraphGroupCollection : IQueryable<IGraphGroup>, IDataModelCollection<IGraphGroup>, IEnumerable<IGraphGroup>, IDataModelParent, IDataModelWithContext, IRequestableCollection Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.Security.IGraphPrincipal.html": {
    "href": "api/PnP.Core.Model.Security.IGraphPrincipal.html",
    "title": "Interface IGraphPrincipal | PnP Core SDK",
    "keywords": "Interface IGraphPrincipal Represents a Microsoft 365 user or group Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IGraphPrincipal Properties Id Gets a value that specifies the member identifier for the user or group. Declaration string Id { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Security.IGraphUser.html": {
    "href": "api/PnP.Core.Model.Security.IGraphUser.html",
    "title": "Interface IGraphUser | PnP Core SDK",
    "keywords": "Interface IGraphUser Public interface to define a Microsoft 365 user Inherited Members IDataModel<IGraphUser>.HasValue(String) IDataModel<IGraphUser>.HasChanged(String) IDataModel<IGraphUser>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IGraphUser>.GetBatchAsync(Batch, Expression<Func<IGraphUser, Object>>[]) IDataModelGet<IGraphUser>.GetBatchAsync(Expression<Func<IGraphUser, Object>>[]) IDataModelGet<IGraphUser>.GetBatch(Batch, Expression<Func<IGraphUser, Object>>[]) IDataModelGet<IGraphUser>.GetBatch(Expression<Func<IGraphUser, Object>>[]) IDataModelGet<IGraphUser>.GetAsync(Expression<Func<IGraphUser, Object>>[]) IDataModelGet<IGraphUser>.GetAsync(ApiResponse, Expression<Func<IGraphUser, Object>>[]) IDataModelGet<IGraphUser>.Get(Expression<Func<IGraphUser, Object>>[]) IDataModelGet<IGraphUser>.Get(ApiResponse, Expression<Func<IGraphUser, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IGraphPrincipal.Id Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IGraphUser : IDataModel<IGraphUser>, IDataModelParent, IDataModelWithContext, IDataModelGet<IGraphUser>, IDataModelGet, IGraphPrincipal, IQueryableDataModel Properties Mail Email adress of the user Declaration string Mail { get; set; } Property Value String OfficeLocation Office location of the user Declaration string OfficeLocation { get; set; } Property Value String UserPrincipalName User principle name (UPN) of the user Declaration string UserPrincipalName { get; set; } Property Value String Methods AsSharePointUser() Returns this Graph user as a SharePoint user for the connected site collection Declaration ISharePointUser AsSharePointUser() Returns ISharePointUser AsSharePointUserAsync() Returns this Graph user as a SharePoint user for the connected site collection Declaration Task<ISharePointUser> AsSharePointUserAsync() Returns Task < ISharePointUser > Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Security.IGraphUserCollection.html": {
    "href": "api/PnP.Core.Model.Security.IGraphUserCollection.html",
    "title": "Interface IGraphUserCollection | PnP Core SDK",
    "keywords": "Interface IGraphUserCollection Public interface to define a collection of Microsoft 365 users Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IGraphUserCollection : IQueryable<IGraphUser>, IDataModelCollection<IGraphUser>, IEnumerable<IGraphUser>, IDataModelParent, IDataModelWithContext, IRequestableCollection Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.Security.IIdentity.html": {
    "href": "api/PnP.Core.Model.Security.IIdentity.html",
    "title": "Interface IIdentity | PnP Core SDK",
    "keywords": "Interface IIdentity The Identity resource represents an identity of an actor. For example, an actor can be a user, device, or application. Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface IIdentity : IComplexType Properties DisplayName The identity's display name. Note that this may not always be available or up to date. For example, if a user changes their display name, the API may show the new value in a future response, but the items associated with the user won't show up as having changed when using delta. Declaration string DisplayName { get; set; } Property Value String Id Unique identifier for the identity. Declaration string Id { get; } Property Value String TenantId Unique identity of the tenant (optional). Declaration string TenantId { get; set; } Property Value String UserIdentityType In case the identity is a user this property contains the user type of the user Declaration string UserIdentityType { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Security.ISharePointGroup.html": {
    "href": "api/PnP.Core.Model.Security.ISharePointGroup.html",
    "title": "Interface ISharePointGroup | PnP Core SDK",
    "keywords": "Interface ISharePointGroup Public interface to define a SharePoint Group Inherited Members IDataModel<ISharePointGroup>.HasValue(String) IDataModel<ISharePointGroup>.HasChanged(String) IDataModel<ISharePointGroup>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ISharePointGroup>.GetBatchAsync(Batch, Expression<Func<ISharePointGroup, Object>>[]) IDataModelGet<ISharePointGroup>.GetBatchAsync(Expression<Func<ISharePointGroup, Object>>[]) IDataModelGet<ISharePointGroup>.GetBatch(Batch, Expression<Func<ISharePointGroup, Object>>[]) IDataModelGet<ISharePointGroup>.GetBatch(Expression<Func<ISharePointGroup, Object>>[]) IDataModelGet<ISharePointGroup>.GetAsync(Expression<Func<ISharePointGroup, Object>>[]) IDataModelGet<ISharePointGroup>.GetAsync(ApiResponse, Expression<Func<ISharePointGroup, Object>>[]) IDataModelGet<ISharePointGroup>.Get(Expression<Func<ISharePointGroup, Object>>[]) IDataModelGet<ISharePointGroup>.Get(ApiResponse, Expression<Func<ISharePointGroup, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) ISharePointPrincipal.Id ISharePointPrincipal.IsHiddenInUI ISharePointPrincipal.PrincipalType ISharePointPrincipal.LoginName ISharePointPrincipal.Title Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface ISharePointGroup : IDataModel<ISharePointGroup>, IDataModelParent, IDataModelWithContext, IDataModelGet<ISharePointGroup>, IDataModelGet, ISharePointPrincipal, IQueryableDataModel Properties AllowMembersEditMembership Allow members to edit the group members Declaration bool AllowMembersEditMembership { get; set; } Property Value Boolean AllowRequestToJoinLeave Allow requests to join or leave the group Declaration bool AllowRequestToJoinLeave { get; set; } Property Value Boolean AutoAcceptRequestToJoinLeave Automatically accept requests to join or leave the group Declaration bool AutoAcceptRequestToJoinLeave { get; set; } Property Value Boolean CanCurrentUserEditMembership Can the current user edit the group members Declaration bool CanCurrentUserEditMembership { get; set; } Property Value Boolean CanCurrentUserManageGroup Can the current user manage the group Declaration bool CanCurrentUserManageGroup { get; set; } Property Value Boolean CanCurrentUserViewMembership Can the current user view the group membership Declaration bool CanCurrentUserViewMembership { get; set; } Property Value Boolean Description Group description Declaration string Description { get; set; } Property Value String OnlyAllowMembersViewMembership Only members can see other group members Declaration bool OnlyAllowMembersViewMembership { get; set; } Property Value Boolean OwnerTitle Group owner title Declaration string OwnerTitle { get; set; } Property Value String RequestToJoinLeaveEmailSetting Email configuration for the group join or leave operations Declaration bool RequestToJoinLeaveEmailSetting { get; set; } Property Value Boolean Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Security.ISharePointGroupCollection.html": {
    "href": "api/PnP.Core.Model.Security.ISharePointGroupCollection.html",
    "title": "Interface ISharePointGroupCollection | PnP Core SDK",
    "keywords": "Interface ISharePointGroupCollection Public interface to define a collection of SharePoint groups Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface ISharePointGroupCollection : IQueryable<ISharePointGroup>, IDataModelCollection<ISharePointGroup>, IEnumerable<ISharePointGroup>, IDataModelParent, IDataModelWithContext, IRequestableCollection Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.Security.ISharePointPrincipal.html": {
    "href": "api/PnP.Core.Model.Security.ISharePointPrincipal.html",
    "title": "Interface ISharePointPrincipal | PnP Core SDK",
    "keywords": "Interface ISharePointPrincipal Represents a SharePoint user or group that can be assigned permissions to control security. Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface ISharePointPrincipal Properties Id Gets a value that specifies the member identifier for the user or group. Declaration int Id { get; set; } Property Value Int32 IsHiddenInUI Gets a value that indicates whether this member should be hidden in the UI. Declaration bool IsHiddenInUI { get; } Property Value Boolean LoginName Gets the login name of the user. Declaration string LoginName { get; set; } Property Value String PrincipalType Gets a value containing the type of the principal. Declaration PrincipalType PrincipalType { get; } Property Value PrincipalType Title Name of the user Declaration string Title { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Security.ISharePointUser.html": {
    "href": "api/PnP.Core.Model.Security.ISharePointUser.html",
    "title": "Interface ISharePointUser | PnP Core SDK",
    "keywords": "Interface ISharePointUser Public interface to define a SharePoint User Inherited Members IDataModel<ISharePointUser>.HasValue(String) IDataModel<ISharePointUser>.HasChanged(String) IDataModel<ISharePointUser>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ISharePointUser>.GetBatchAsync(Batch, Expression<Func<ISharePointUser, Object>>[]) IDataModelGet<ISharePointUser>.GetBatchAsync(Expression<Func<ISharePointUser, Object>>[]) IDataModelGet<ISharePointUser>.GetBatch(Batch, Expression<Func<ISharePointUser, Object>>[]) IDataModelGet<ISharePointUser>.GetBatch(Expression<Func<ISharePointUser, Object>>[]) IDataModelGet<ISharePointUser>.GetAsync(Expression<Func<ISharePointUser, Object>>[]) IDataModelGet<ISharePointUser>.GetAsync(ApiResponse, Expression<Func<ISharePointUser, Object>>[]) IDataModelGet<ISharePointUser>.Get(Expression<Func<ISharePointUser, Object>>[]) IDataModelGet<ISharePointUser>.Get(ApiResponse, Expression<Func<ISharePointUser, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) ISharePointPrincipal.Id ISharePointPrincipal.IsHiddenInUI ISharePointPrincipal.PrincipalType ISharePointPrincipal.LoginName ISharePointPrincipal.Title Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface ISharePointUser : IDataModel<ISharePointUser>, IDataModelParent, IDataModelWithContext, IDataModelGet<ISharePointUser>, IDataModelGet, ISharePointPrincipal, IQueryableDataModel Properties AadObjectId Id of the underlying graph object (if any) Declaration string AadObjectId { get; set; } Property Value String Department Department of the user Declaration string Department { get; set; } Property Value String Expiration Gets the expiration value of the current user Declaration string Expiration { get; } Property Value String IsEmailAuthenticationGuestUser Indicates whether the user is a guest user authenticated via an e-mail address Declaration bool IsEmailAuthenticationGuestUser { get; } Property Value Boolean IsShareByEmailGuestUser Indicates whether the user is a guest user shared by e-mail Declaration bool IsShareByEmailGuestUser { get; } Property Value Boolean IsSiteAdmin Indicates whether the user is a site collection administrator Declaration bool IsSiteAdmin { get; } Property Value Boolean Mail Email adress of the user Declaration string Mail { get; set; } Property Value String UserPrincipalName User principle name (UPN) of the user Declaration string UserPrincipalName { get; set; } Property Value String Methods AsGraphUser() Returns this SharePoint user as a Graph user Declaration IGraphUser AsGraphUser() Returns IGraphUser AsGraphUserAsync() Returns this SharePoint user as a Graph user Declaration Task<IGraphUser> AsGraphUserAsync() Returns Task < IGraphUser > Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Security.ISharePointUserCollection.html": {
    "href": "api/PnP.Core.Model.Security.ISharePointUserCollection.html",
    "title": "Interface ISharePointUserCollection | PnP Core SDK",
    "keywords": "Interface ISharePointUserCollection Public interface to define a collection of SharePoint users Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public interface ISharePointUserCollection : IQueryable<ISharePointUser>, IDataModelCollection<ISharePointUser>, IEnumerable<ISharePointUser>, IDataModelParent, IDataModelWithContext, IRequestableCollection Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.Security.PrincipalType.html": {
    "href": "api/PnP.Core.Model.Security.PrincipalType.html",
    "title": "Enum PrincipalType | PnP Core SDK",
    "keywords": "Enum PrincipalType Specifies the type of a principal. This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values. Namespace : PnP.Core.Model.Security Assembly : PnP.Core.dll Syntax public enum PrincipalType : int All Enumeration whose value specifies all principal types. Value = 15. DistributionList Enumeration whose value specifies a distribution list as the principal type. Value = 2. None Enumeration whose value specifies no principal type. Value = 0. SecurityGroup Enumeration whose value specifies a security group as the principal type. Value = 4. SharePointGroup Enumeration whose value specifies a group (2) as the principal type. Value = 8. User Enumeration whose value specifies a user as the principal type. Value = 1. Extension Methods DataModelExtensions.IsPropertyAvailable<PrincipalType>(Expression<Func<PrincipalType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.AddFieldOptionsFlags.html": {
    "href": "api/PnP.Core.Model.SharePoint.AddFieldOptionsFlags.html",
    "title": "Enum AddFieldOptionsFlags | PnP Core SDK",
    "keywords": "Enum AddFieldOptionsFlags Specifies the control settings while adding a field. This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum AddFieldOptionsFlags : int AddFieldCheckDisplayName Enumeration whose values specify to confirm that no other field has the same display name. The value = 32. /// AddFieldInternalNameHint Enumeration whose values specify adding an internal field name hint for the purpose of avoiding possible database locking or field renaming operations.The value = 8. AddFieldToDefaultView Enumeration whose values specify that a new field that is added to the specified list must also be added to the default list view.The value = 16. AddToAllContentTypes Enumeration whose values specify that a new field that is added to the specified list must also be added to all content types in the site collection.The value = 4. AddToDefaultContentType Enumeration whose values specify that a new field added to the list must also be added to the default content type in the site collection.The value = 1. AddToNoContentType Enumeration whose values specify that a new field must not be added to any other content type.The value = 2. DefaultValue Enumeration whose values specify that a new field added to the list must also be added to the default content type in the site collection.The value = 0. Extension Methods DataModelExtensions.IsPropertyAvailable<AddFieldOptionsFlags>(Expression<Func<AddFieldOptionsFlags, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.CalendarType.html": {
    "href": "api/PnP.Core.Model.SharePoint.CalendarType.html",
    "title": "Enum CalendarType | PnP Core SDK",
    "keywords": "Enum CalendarType A calendar type is a 2-byte integer value that specifies the type of calendar to use in a particular context. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee543260%28v%3doffice.15%29 Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum CalendarType : int ChineseLunar Specifies Chinese Lunar calendar type. Gregorian Specifies Gregorian (localized) calendar type. GregorianArabic Specifies a Gregorian (Arabic) calendar type. GregorianMEFrench Specifies a Gregorian (Middle East French) calendar type. GregorianXLITEnglish Specifies a Gregorian (transliterated English) calendar type. GregorianXLITFrench Specifies a Gregorian (transliterated French) calendar type. Hebrew Specifies a Hebrew (Lunar) calendar type. Hijri Specifies a Hijri (Arabic Lunar) calendar type. Japan Specifies a Japanese Emperor Era calendar type. Korea Specifies a Korean Tangun Era calendar type. KoreaJapanLunar Specifies a Korean and Japanese Lunar calendar type. None The calendar type is not specified. SakaEra Specifies a Saka Era calendar type. Taiwan Specifies a Year of Taiwan calendar type. Thai Specifies a Thai calendar type. Extension Methods DataModelExtensions.IsPropertyAvailable<CalendarType>(Expression<Func<CalendarType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.CamlQueryOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.CamlQueryOptions.html",
    "title": "Class CamlQueryOptions | PnP Core SDK",
    "keywords": "Class CamlQueryOptions Options for making a CAML query to SharePoint Online Inheritance Object CamlQueryOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class CamlQueryOptions : object Properties AllowIncrementalResults Can the query return incremental results Declaration public bool? AllowIncrementalResults { get; set; } Property Value Nullable < Boolean > DatesInUtc Return dates in UTC format Declaration public bool? DatesInUtc { get; set; } Property Value Nullable < Boolean > FolderServerRelativeUrl Specifies the server relative URL of a list folder from which results will be returned Declaration public string FolderServerRelativeUrl { get; set; } Property Value String ListItemCollectionPosition Value that specifies information, as name-value pairs, required to get the next page of data for a list view Declaration public string ListItemCollectionPosition { get; set; } Property Value String ViewXml Caml query to execute Declaration public string ViewXml { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.CheckinType.html": {
    "href": "api/PnP.Core.Model.SharePoint.CheckinType.html",
    "title": "Enum CheckinType | PnP Core SDK",
    "keywords": "Enum CheckinType Specifies the type of check-in for a file. (see https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee542953(v=office.15) ) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum CheckinType : int MajorCheckIn Enumeration whose values are incremented as a major version. The value = 1. MinorCheckIn Enumeration whose values are incremented as minor version. The value = 0. OverwriteCheckIn Enumeration whose values overwrite the file. The value = 2. Extension Methods DataModelExtensions.IsPropertyAvailable<CheckinType>(Expression<Func<CheckinType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.CheckOutType.html": {
    "href": "api/PnP.Core.Model.SharePoint.CheckOutType.html",
    "title": "Enum CheckOutType | PnP Core SDK",
    "keywords": "Enum CheckOutType Enumeration that describes the different checkout states of a file, independent of the lock state of the file. (e.g. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee538918(v=office.15) ) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum CheckOutType : int None The file is not checked out. Offline The file is checked out for editing on the local computer. Online The file is checked out for editing on the server. Extension Methods DataModelExtensions.IsPropertyAvailable<CheckOutType>(Expression<Func<CheckOutType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ChoiceFormatType.html": {
    "href": "api/PnP.Core.Model.SharePoint.ChoiceFormatType.html",
    "title": "Enum ChoiceFormatType | PnP Core SDK",
    "keywords": "Enum ChoiceFormatType Enumeration that specifies how options are displayed for the selections in a choice field. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee536424%28v%3doffice.15%29 Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ChoiceFormatType : int Dropdown A drop-down list box. RadioButtons Option buttons (also known as radio buttons). Extension Methods DataModelExtensions.IsPropertyAvailable<ChoiceFormatType>(Expression<Func<ChoiceFormatType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.CommonFieldOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.CommonFieldOptions.html",
    "title": "Class CommonFieldOptions | PnP Core SDK",
    "keywords": "Class CommonFieldOptions Available options for adding most of SharePoint fields (Excepted Lookup fields) Inheritance Object FieldOptions CommonFieldOptions FieldCalculatedOptions FieldCurrencyOptions FieldDateTimeOptions FieldMultiChoiceOptions FieldMultilineTextOptions FieldNumberOptions FieldTextOptions FieldUrlOptions FieldUserOptions Inherited Members FieldOptions.Required Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public abstract class CommonFieldOptions : FieldOptions Properties DefaultFormula Sets the default formula of the field Declaration public string DefaultFormula { get; set; } Property Value String Description Sets the description of the field Declaration public string Description { get; set; } Property Value String EnforceUniqueValues Sets whether the field enforces unique values Declaration public bool? EnforceUniqueValues { get; set; } Property Value Nullable < Boolean > Group Sets the group of the field Declaration public string Group { get; set; } Property Value String Hidden Sets whether the field is hidden Declaration public bool? Hidden { get; set; } Property Value Nullable < Boolean > Indexed Sets whether the field is indexed Declaration public bool? Indexed { get; set; } Property Value Nullable < Boolean > ValidationFormula Sets the validation formula of the field Declaration public string ValidationFormula { get; set; } Property Value String ValidationMessage Sets the validation message of the field Declaration public string ValidationMessage { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.CustomizedPageStatus.html": {
    "href": "api/PnP.Core.Model.SharePoint.CustomizedPageStatus.html",
    "title": "Enum CustomizedPageStatus | PnP Core SDK",
    "keywords": "Enum CustomizedPageStatus Specifies the cache and customization status for a page. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum CustomizedPageStatus : int Customized Enumeration whose values specify that the page was cached and has been customized. The value = 2. None Enumeration whose values specify that the page was never cached. The value = 0. Uncustomized Enumeration whose values specify that the page is cached and has not been customized. The value = 1. Extension Methods DataModelExtensions.IsPropertyAvailable<CustomizedPageStatus>(Expression<Func<CustomizedPageStatus, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.DateTimeFieldFormatType.html": {
    "href": "api/PnP.Core.Model.SharePoint.DateTimeFieldFormatType.html",
    "title": "Enum DateTimeFieldFormatType | PnP Core SDK",
    "keywords": "Enum DateTimeFieldFormatType Specifies the display format for date and time fields. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee537367%28v%3doffice.15%29 Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum DateTimeFieldFormatType : int DateOnly Displays only the date. DateTime Displays the date and time. Extension Methods DataModelExtensions.IsPropertyAvailable<DateTimeFieldFormatType>(Expression<Func<DateTimeFieldFormatType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.DateTimeFieldFriendlyFormatType.html": {
    "href": "api/PnP.Core.Model.SharePoint.DateTimeFieldFriendlyFormatType.html",
    "title": "Enum DateTimeFieldFriendlyFormatType | PnP Core SDK",
    "keywords": "Enum DateTimeFieldFriendlyFormatType Specifies a friendly format to use in displaying date and time fields. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/jj168261%28v%3doffice.15%29 Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum DateTimeFieldFriendlyFormatType : int Disabled The standard absolute representation will be used. Value = 1. Relative The standard friendly relative representation will be used (for example, \"today at 3:00 PM\"). Value = 2. Unspecified Undefined. The default rendering will be used. Value = 0. Extension Methods DataModelExtensions.IsPropertyAvailable<DateTimeFieldFriendlyFormatType>(Expression<Func<DateTimeFieldFriendlyFormatType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FieldCalculatedOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldCalculatedOptions.html",
    "title": "Class FieldCalculatedOptions | PnP Core SDK",
    "keywords": "Class FieldCalculatedOptions Available options for SharePoint Calculated fields Inheritance Object FieldOptions CommonFieldOptions FieldCalculatedOptions Inherited Members CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage FieldOptions.Required Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldCalculatedOptions : CommonFieldOptions Properties CurrencyLocaleId Gets or sets a value that specifies the language code identifier (LCID) used to format the value of the field. Declaration public int? CurrencyLocaleId { get; set; } Property Value Nullable < Int32 > DateFormat Gets or sets the type of date and time format that is used in the field. Declaration public DateTimeFieldFormatType? DateFormat { get; set; } Property Value Nullable < DateTimeFieldFormatType > Formula Gets or sets a value that specifies the formula for the field. Declaration public string Formula { get; set; } Property Value String OutputType Gets or sets a value that specifies the output format for the field. Declaration public FieldType OutputType { get; set; } Property Value FieldType ShowAsPercentage Gets or sets whether the field must be shown as percentage. Declaration public bool? ShowAsPercentage { get; set; } Property Value Nullable < Boolean > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FieldChoiceOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldChoiceOptions.html",
    "title": "Class FieldChoiceOptions | PnP Core SDK",
    "keywords": "Class FieldChoiceOptions Available options for SharePoint Choice fields Inheritance Object FieldOptions CommonFieldOptions FieldMultiChoiceOptions FieldChoiceOptions Inherited Members FieldMultiChoiceOptions.FillInChoice FieldMultiChoiceOptions.Choices CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage FieldOptions.Required Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldChoiceOptions : FieldMultiChoiceOptions Properties EditFormat Determines whether to display the choice field as option buttons (also known as “radio buttons”) or as a drop-down list. Declaration public ChoiceFormatType EditFormat { get; set; } Property Value ChoiceFormatType Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FieldCurrencyOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldCurrencyOptions.html",
    "title": "Class FieldCurrencyOptions | PnP Core SDK",
    "keywords": "Class FieldCurrencyOptions Available options for SharePoint Currency fields Inheritance Object FieldOptions CommonFieldOptions FieldCurrencyOptions Inherited Members CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage FieldOptions.Required Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldCurrencyOptions : CommonFieldOptions Properties CurrencyLocaleId Gets or sets a value that specifies the language code identifier (LCID) used to format the value of the field. Declaration public int? CurrencyLocaleId { get; set; } Property Value Nullable < Int32 > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FieldDateTimeOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldDateTimeOptions.html",
    "title": "Class FieldDateTimeOptions | PnP Core SDK",
    "keywords": "Class FieldDateTimeOptions Available options for SharePoint DateTime fields Inheritance Object FieldOptions CommonFieldOptions FieldDateTimeOptions Inherited Members CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage FieldOptions.Required Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldDateTimeOptions : CommonFieldOptions Properties DateTimeCalendarType Gets or sets a value that specifies the calendar type of the field. Declaration public CalendarType DateTimeCalendarType { get; set; } Property Value CalendarType DisplayFormat Gets or sets the type of date and time format that is used in the field. Declaration public DateTimeFieldFormatType DisplayFormat { get; set; } Property Value DateTimeFieldFormatType FriendlyDisplayFormat Gets or sets the type of friendly display format that is used in the field. Declaration public DateTimeFieldFriendlyFormatType FriendlyDisplayFormat { get; set; } Property Value DateTimeFieldFriendlyFormatType Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FieldLookupOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldLookupOptions.html",
    "title": "Class FieldLookupOptions | PnP Core SDK",
    "keywords": "Class FieldLookupOptions Available options for SharePoint lookup fields Inheritance Object FieldOptions FieldLookupOptions Inherited Members FieldOptions.Required Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldLookupOptions : FieldOptions Properties LookupFieldName Gets or sets a value that specifies the internal field name of the field used as the lookup values. Declaration public string LookupFieldName { get; set; } Property Value String LookupListId Gets or sets a value that specifies the list identifier of the list that contains the field to use as the lookup values. Declaration public Guid LookupListId { get; set; } Property Value Guid LookupWebId Gets or sets a value that specifies the GUID that identifies the site containing the list which contains the field used as the lookup values. Declaration public Guid LookupWebId { get; set; } Property Value Guid Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FieldMultiChoiceOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldMultiChoiceOptions.html",
    "title": "Class FieldMultiChoiceOptions | PnP Core SDK",
    "keywords": "Class FieldMultiChoiceOptions Available options for SharePoint Multi Choice fields Inheritance Object FieldOptions CommonFieldOptions FieldMultiChoiceOptions FieldChoiceOptions Inherited Members CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage FieldOptions.Required Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldMultiChoiceOptions : CommonFieldOptions Properties Choices Gets or sets a value that specifies values that are available for selection in the field. Declaration public string[] Choices { get; set; } Property Value String [] FillInChoice Gets or sets a value that specifies whether the field can accept values other than those specified in Choices. Declaration public bool? FillInChoice { get; set; } Property Value Nullable < Boolean > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FieldMultilineTextOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldMultilineTextOptions.html",
    "title": "Class FieldMultilineTextOptions | PnP Core SDK",
    "keywords": "Class FieldMultilineTextOptions Available options for SharePoint Multiline Text fields Inheritance Object FieldOptions CommonFieldOptions FieldMultilineTextOptions Inherited Members CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage FieldOptions.Required Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldMultilineTextOptions : CommonFieldOptions Properties AllowHyperlink Gets or sets a value that specifies whether a hyperlink is allowed as a value of the field. Declaration public bool? AllowHyperlink { get; set; } Property Value Nullable < Boolean > AppendOnly Gets or sets a value that specifies whether all changes to the value of the field are displayed in list forms. Declaration public bool? AppendOnly { get; set; } Property Value Nullable < Boolean > NumberOfLines Gets or sets a value that specifies the number of lines of text to display for the field. Declaration public int? NumberOfLines { get; set; } Property Value Nullable < Int32 > RestrictedMode Gets or sets a value that specifies whether the field supports a subset of rich formatting. Declaration public bool? RestrictedMode { get; set; } Property Value Nullable < Boolean > RichText Gets or sets a value that specifies whether the field supports rich formatting. Declaration public bool? RichText { get; set; } Property Value Nullable < Boolean > UnlimitedLengthInDocumentLibrary Gets or sets a value that specifies whether the field supports unlimited length in document libraries. Declaration public bool? UnlimitedLengthInDocumentLibrary { get; set; } Property Value Nullable < Boolean > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FieldNumberOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldNumberOptions.html",
    "title": "Class FieldNumberOptions | PnP Core SDK",
    "keywords": "Class FieldNumberOptions Available options for SharePoint Number fields Inheritance Object FieldOptions CommonFieldOptions FieldNumberOptions Inherited Members CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage FieldOptions.Required Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldNumberOptions : CommonFieldOptions Properties MaximumValue Gets or sets a value that specifies the maximum allowed value for the field. Declaration public double? MaximumValue { get; set; } Property Value Nullable < Double > MinimumValue Gets or sets a value that specifies the minimum allowed value for the field. Declaration public double? MinimumValue { get; set; } Property Value Nullable < Double > ShowAsPercentage Gets or sets whether the field must be shown as percentage. Declaration public bool? ShowAsPercentage { get; set; } Property Value Nullable < Boolean > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FieldOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldOptions.html",
    "title": "Class FieldOptions | PnP Core SDK",
    "keywords": "Class FieldOptions Available options for all SharePoint fields Inheritance Object FieldOptions CommonFieldOptions FieldLookupOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public abstract class FieldOptions : object Properties Required Sets whether the field is required Declaration public bool? Required { get; set; } Property Value Nullable < Boolean > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FieldTextOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldTextOptions.html",
    "title": "Class FieldTextOptions | PnP Core SDK",
    "keywords": "Class FieldTextOptions Available options for SharePoint Text fields Inheritance Object FieldOptions CommonFieldOptions FieldTextOptions Inherited Members CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage FieldOptions.Required Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldTextOptions : CommonFieldOptions Properties MaxLength Gets or sets the maximum length of the text field. Declaration public int? MaxLength { get; set; } Property Value Nullable < Int32 > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FieldType.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldType.html",
    "title": "Enum FieldType | PnP Core SDK",
    "keywords": "Enum FieldType Specifies the type of the field. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee540543(v=office.15) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum FieldType : int AllDayEvent Specifies that the field indicates whether a meeting in a calendar list is an all-day event. The value = 29. Attachments Specifies that the field indicates whether the list item has attachments. The value = 19. Boolean Specifies that the field contains a Boolean value. The value = 8. Calculated Specifies that the field is a calculated field. The value = 17. Choice Specifies that the field contains a single value from a set of specified values. The value = 6. Computed Specifies that the field is a computed field. The value = 12. ContentTypeId Specifies that the field contains a content type identifier as a value. The value = 25. Counter Specifies that the field contains a monotonically increasing integer. The value = 5. CrossProjectLink Specifies that the field contains a link between projects in a Meeting Workspace site. The value = 22. Currency Specifies that the field contains a currency value. The value = 10. DateTime Specifies that the field contains a date and time value or a date-only value. The value = 4. Error Specifies that the type of the field was set to an invalid value. The value = 24. File Specifies that the field contains the leaf name of a document as a value. The value = 18. GridChoice Specifies that the field contains rating scale values for a survey list. The value = 16. Guid Specifies that the field contains a GUID value. The value = 14. Integer Specifies that the field contains an integer value. The value = 1. Invalid Must not be used. The value = 0. Lookup Specifies that the field is a lookup field. The value = 7. MaxItems Must not be used. The value = 31. ModStat Specifies that the field indicates moderation status. The value = 23. MultiChoice Specifies that the field contains one or more values from a set of specified values. The value = 15. Note Specifies that the field contains multiple lines of text. The value = 3. Number Specifies that the field contains a floating-point number value. The value = 9. PageSeparator Specifies that the field separates questions in a survey list onto multiple pages. The value = 26. Recurrence Specifies that the field indicates whether a meeting in a calendar list recurs. The value = 21. Text Specifies that the field contains a single line of text. The value = 2. ThreadIndex Specifies that the field indicates the position of a discussion item in a threaded view of a discussion board. The value = 27. Threading Specifies that the field indicates the thread for a discussion item in a threaded view of a discussion board. The value = 13. URL Specifies that the field contains a URI and an optional description of the URI. The value = 11. User Specifies that the field contains one or more users and groups as values. The value = 20. WorkflowEventType Specifies that the field contains the most recent event in a workflow instance. The value = 30. WorkflowStatus Specifies that the field indicates the status of a workflow instance on a list item. The value = 28. Extension Methods DataModelExtensions.IsPropertyAvailable<FieldType>(Expression<Func<FieldType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FieldUrlOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldUrlOptions.html",
    "title": "Class FieldUrlOptions | PnP Core SDK",
    "keywords": "Class FieldUrlOptions Available options for SharePoint URL fields Inheritance Object FieldOptions CommonFieldOptions FieldUrlOptions Inherited Members CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage FieldOptions.Required Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldUrlOptions : CommonFieldOptions Properties DisplayFormat Gets or sets a value that specifies the display format for the value in the field. Declaration public UrlFieldFormatType DisplayFormat { get; set; } Property Value UrlFieldFormatType Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FieldUserOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldUserOptions.html",
    "title": "Class FieldUserOptions | PnP Core SDK",
    "keywords": "Class FieldUserOptions Available options for SharePoint user fields Inheritance Object FieldOptions CommonFieldOptions FieldUserOptions Inherited Members CommonFieldOptions.Description CommonFieldOptions.DefaultFormula CommonFieldOptions.EnforceUniqueValues CommonFieldOptions.Group CommonFieldOptions.Hidden CommonFieldOptions.Indexed CommonFieldOptions.ValidationFormula CommonFieldOptions.ValidationMessage FieldOptions.Required Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class FieldUserOptions : CommonFieldOptions Properties AllowDisplay Gets or sets a value that specifies whether to display the name of the user in a survey list. Declaration public bool? AllowDisplay { get; set; } Property Value Nullable < Boolean > AllowMultipleValues Gets or sets a value that specifies whether to allow multiple values. Declaration public bool? AllowMultipleValues { get; set; } Property Value Nullable < Boolean > Presence Gets or sets a value that specifies whether presence is enabled on the field. Declaration public bool? Presence { get; set; } Property Value Nullable < Boolean > SelectionGroup Gets or sets a value that specifies the identifier of the SharePoint group whose members can be selected as values of the field. Declaration public int? SelectionGroup { get; set; } Property Value Nullable < Int32 > SelectionMode Gets or sets a value that specifies whether users and groups or only users can be selected. Declaration public FieldUserSelectionMode SelectionMode { get; set; } Property Value FieldUserSelectionMode Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FieldUserSelectionMode.html": {
    "href": "api/PnP.Core.Model.SharePoint.FieldUserSelectionMode.html",
    "title": "Enum FieldUserSelectionMode | PnP Core SDK",
    "keywords": "Enum FieldUserSelectionMode Specifies whether users and groups or only users can be selected. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee545809%28v%3doffice.15%29 Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum FieldUserSelectionMode : int PeopleAndGroups Enumeration whose value specifies that users and groups can be selected. The value = 1. PeopleOnly Enumeration whose value specifies that only users can be selected. The value = 0. Extension Methods DataModelExtensions.IsPropertyAvailable<FieldUserSelectionMode>(Expression<Func<FieldUserSelectionMode, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FooterLayoutType.html": {
    "href": "api/PnP.Core.Model.SharePoint.FooterLayoutType.html",
    "title": "Enum FooterLayoutType | PnP Core SDK",
    "keywords": "Enum FooterLayoutType Available footer layouts for modern sites Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum FooterLayoutType : int Extended Extended footer. This layout type supports columns of links with multiple links in each column. ( Value = 1 ) Simple Simple footer. This is the default layout type with one single row of links. ( Value = 0 ) Stacked Stacked footer. This layout type is a combination of simple and extended, with the extended stacked above the simple. ( Value = 2 ) Extension Methods DataModelExtensions.IsPropertyAvailable<FooterLayoutType>(Expression<Func<FooterLayoutType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.FooterVariantThemeType.html": {
    "href": "api/PnP.Core.Model.SharePoint.FooterVariantThemeType.html",
    "title": "Enum FooterVariantThemeType | PnP Core SDK",
    "keywords": "Enum FooterVariantThemeType Variants documentation: https://github.com/OfficeDev/office-ui-fabric-react/tree/master/packages/variants Note that this definition is similar to SPVariantThemeType, but with the strong and none variants switched. This is because we want strong to be the default for footer. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum FooterVariantThemeType : int Neutral neutral variant - light shade of original background as background ( Value = 1 ) None no emphasis - appears as normal ( Value = 3 ) Soft soft variant - light tint of the primary color as background ( Value = 2 ) Strong strong variant - primary color as background, text uses original background color; white on brand blue by default ( Value = 0 ) Extension Methods DataModelExtensions.IsPropertyAvailable<FooterVariantThemeType>(Expression<Func<FooterVariantThemeType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.HeaderLayoutType.html": {
    "href": "api/PnP.Core.Model.SharePoint.HeaderLayoutType.html",
    "title": "Enum HeaderLayoutType | PnP Core SDK",
    "keywords": "Enum HeaderLayoutType Available header layouts for modern sites Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum HeaderLayoutType : int Compact medium/compact header ( Value = 2 ) Extended extended header ( Value = 4 ) Minimal small/minimal header [not currently used] ( Value = 3 ) None use the original header [deprecated, now reverts to large/standard] ( Value = 0 ) Standard large/standard header ( Value = 1 ) Extension Methods DataModelExtensions.IsPropertyAvailable<HeaderLayoutType>(Expression<Func<HeaderLayoutType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.html": {
    "href": "api/PnP.Core.Model.SharePoint.html",
    "title": "Namespace PnP.Core.Model.SharePoint | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Model.SharePoint Classes CamlQueryOptions Options for making a CAML query to SharePoint Online CommonFieldOptions Available options for adding most of SharePoint fields (Excepted Lookup fields) FieldCalculatedOptions Available options for SharePoint Calculated fields FieldChoiceOptions Available options for SharePoint Choice fields FieldCurrencyOptions Available options for SharePoint Currency fields FieldDateTimeOptions Available options for SharePoint DateTime fields FieldLookupOptions Available options for SharePoint lookup fields FieldMultiChoiceOptions Available options for SharePoint Multi Choice fields FieldMultilineTextOptions Available options for SharePoint Multiline Text fields FieldNumberOptions Available options for SharePoint Number fields FieldOptions Available options for all SharePoint fields FieldTextOptions Available options for SharePoint Text fields FieldUrlOptions Available options for SharePoint URL fields FieldUserOptions Available options for SharePoint user fields ListExtensions List extension methods ListItemExtensions ListItem extension methods MoveCopyOptions Options for move and copy operations RecycleBinItemExtensions RecycleBinItem extension methods RenderListDataOptions Options to configure the rendering of list data via the RenderListDataAsStream method of IList See https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/working-with-lists-and-list-items-with-rest#renderlistdataasstream-body-parameter-properties TermGroupExtensions TermGroup extension methods TermSetExtensions TermSet extension methods Interfaces IContentType Public interface to define a Content Type object of SharePoint Online IContentTypeCollection Public interface to define a collection of ContentType objects of SharePoint Online IEffectiveInformationRightsManagementSettings Public interface to define a EffectiveInformationRightsManagementSettings object IFeature Represents a Feature in SharePoint Online IFeatureCollection Collection of site or web scoped features IField Public interface to define a Field object of SharePoint Online IFieldCollection Public interface to define a collection of Field objects of SharePoint Online IFieldLink Public interface to define a FieldLink object IFieldLinkCollection Public interface to define a collection of FieldLink objects of SharePoint Online IFile Public interface to define a File object IFileCollection Public interface to define a collection of File objects IFileVersion Public interface to define a FileVersion object IFileVersionEvent Public interface to define a FileVersionEvent object IFolder Public interface to define a Folder object IFolderCollection Public interface to define a collection of Folder objects IInformationRightsManagementFileSettings Public interface to define a InformationRightsManagementFileSettings object IInformationRightsManagementSettings Public interface to define a InformationRightsManagementSettings object IList Public interface to define a List object of SharePoint Online IListCollection Public interface to define a collection of List objects of SharePoint Online IListItem Public interface to define a SharePoint Online list item IListItemCollection Public interface to define a collection of ListItem objects of SharePoint Online IPropertyValues Public interface to define a PropertyValues object IRecycleBinItem Public interface to define a RecycleBinItem object IRecycleBinItemCollection Public interface to define a collection of RecycleBinItem objects ISite Public interface to define a Site object of SharePoint Online IStorageMetrics Public interface to define a StorageMetrics object ITerm Represents a term used in a term store. A term can be used to represent an object which can then be used as a metadata to tag conent. Multiple terms can be organized in a hierarchical manner within a set. ITermCollection Collection of terms ITermGroup Microsoft 365 Term group ITermGroupCollection Collection of term groups ITermLocalizedDescription Represents the localized name used in the term store, which identifies the name in the localized language. ITermLocalizedLabel Represents the localized label used in the term store, which identifies the name in the localized language. ITermProperty Key/Value term property ITermRelation Represents the relationship between terms in a term store.Currently two types of relationships are supported: pin and reuse. In a pin relationship, a term can be pinned under a different term in a different term set.In a pinned relationship, new children to the term can only be added in the term set in which the term was created.Any change in the hierarchy under the term is reflected across the sets in which the term was pinned. The reuse relationship is similar to the pinned relationship except that changes to the reused term can be made from any hierarchy in which the term is reused.Also, a change in hierarchy made to the reused term does not get reflected in the other term sets in which the term is reused. ITermRelationCollection Collection of terms ITermSet Represents the set used in a term store. The set represents a unit which contains a collection of hierarchical terms. A group can contain multiple sets. ITermSetCollection Collection of term sets ITermSetLocalizedName Represents the localized name used in the term store, which identifies the name in the localized language. ITermSetProperty Key/Value term set property ITermStore Microsoft 365 Term store IWeb Public interface to define a Web object of SharePoint Online IWebCollection Public interface to define a collection of Web objects of SharePoint Online Enums AddFieldOptionsFlags Specifies the control settings while adding a field. This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values. CalendarType A calendar type is a 2-byte integer value that specifies the type of calendar to use in a particular context. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee543260%28v%3doffice.15%29 CheckinType Specifies the type of check-in for a file. (see https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee542953(v=office.15) ) CheckOutType Enumeration that describes the different checkout states of a file, independent of the lock state of the file. (e.g. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee538918(v=office.15) ) ChoiceFormatType Enumeration that specifies how options are displayed for the selections in a choice field. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee536424%28v%3doffice.15%29 CustomizedPageStatus Specifies the cache and customization status for a page. DateTimeFieldFormatType Specifies the display format for date and time fields. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee537367%28v%3doffice.15%29 DateTimeFieldFriendlyFormatType Specifies a friendly format to use in displaying date and time fields. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/jj168261%28v%3doffice.15%29 FieldType Specifies the type of the field. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee540543(v=office.15) FieldUserSelectionMode Specifies whether users and groups or only users can be selected. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee545809%28v%3doffice.15%29 FooterLayoutType Available footer layouts for modern sites FooterVariantThemeType Variants documentation: https://github.com/OfficeDev/office-ui-fabric-react/tree/master/packages/variants Note that this definition is similar to SPVariantThemeType, but with the strong and none variants switched. This is because we want strong to be the default for footer. HeaderLayoutType Available header layouts for modern sites ListExperience List experience, determines how a list is presented (modern or classic) ListPageRenderType List Page Render Type (e.g. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/mt796270(v=office.15) ) ListReadingDirection Reading direction of the list ListTemplateType Enumeration to define the list template types for SharePoint LogoAlignment Logo alignment in extended header layout MoveOperations Specifies criteria for how to move files. This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values. (see https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee542328(v=office.15) ) RecycleBinItemState Specifies the Recycle Bin stage of the Recycle Bin item. RecycleBinItemType Specifies the type of the Recycle Bin item. RelationshipDeleteBehaviorType Specifies the optional relationship behavior of a relationship lookup field. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee537368%28v%3doffice.15%29 RenderListDataOptionsFlags Options to setup on the RenderListDataOptions RenderOptions property See https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/working-with-lists-and-list-items-with-rest#sprenderlistdataoptions-options SearchBoxInNavBar Searchbox in navigation options SearchScope Search scopes of the site SPEffectiveInformationRightsManagementSettingsSource The source of settings for the effective IRM of a file. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/mt684131(v=office.15) TermGroupScope Returns type of group. Possible values are 'global', 'system' and 'siteCollection'. TermRelationType Type of relationship between two terms UrlFieldFormatType Format of the Url field VariantThemeType Footer Variant theme type (see https://github.com/microsoft/fluentui/tree/master/packages/variants )"
  },
  "api/PnP.Core.Model.SharePoint.IContentType.html": {
    "href": "api/PnP.Core.Model.SharePoint.IContentType.html",
    "title": "Interface IContentType | PnP Core SDK",
    "keywords": "Interface IContentType Public interface to define a Content Type object of SharePoint Online Inherited Members IDataModel<IContentType>.HasValue(String) IDataModel<IContentType>.HasChanged(String) IDataModel<IContentType>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IContentType>.GetBatchAsync(Batch, Expression<Func<IContentType, Object>>[]) IDataModelGet<IContentType>.GetBatchAsync(Expression<Func<IContentType, Object>>[]) IDataModelGet<IContentType>.GetBatch(Batch, Expression<Func<IContentType, Object>>[]) IDataModelGet<IContentType>.GetBatch(Expression<Func<IContentType, Object>>[]) IDataModelGet<IContentType>.GetAsync(Expression<Func<IContentType, Object>>[]) IDataModelGet<IContentType>.GetAsync(ApiResponse, Expression<Func<IContentType, Object>>[]) IDataModelGet<IContentType>.Get(Expression<Func<IContentType, Object>>[]) IDataModelGet<IContentType>.Get(ApiResponse, Expression<Func<IContentType, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IContentType : IDataModel<IContentType>, IDataModelParent, IDataModelWithContext, IDataModelGet<IContentType>, IDataModelGet, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties ClientFormCustomFormatter Gets or Sets the Client Form Custom Formatter of the Content Type Declaration string ClientFormCustomFormatter { get; set; } Property Value String Description Gets or Sets the description of the Content Type Declaration string Description { get; set; } Property Value String DisplayFormTemplateName Gets or Sets the Display Form template name of the Content Type Declaration string DisplayFormTemplateName { get; set; } Property Value String DisplayFormUrl Gets or Sets the Display Form URL of the Content Type Declaration string DisplayFormUrl { get; set; } Property Value String DocumentTemplate Gets or Sets the Document Template of the Content Type Declaration string DocumentTemplate { get; set; } Property Value String DocumentTemplateUrl Gets or Sets the DocumentTemplate URL of the Content Type Declaration string DocumentTemplateUrl { get; set; } Property Value String EditFormTemplateName Gets or Sets the Edit Form template name of the Content Type Declaration string EditFormTemplateName { get; set; } Property Value String EditFormUrl Gets or Sets the Edit Form URL of the Content Type Declaration string EditFormUrl { get; set; } Property Value String FieldLinks Gets the collection of field links of the Content Type. Declaration IFieldLinkCollection FieldLinks { get; } Property Value IFieldLinkCollection Group Gets or Sets the group of the Content Type Declaration string Group { get; set; } Property Value String Hidden Gets or Sets that specifies whether the Content Type is hidden Declaration bool Hidden { get; set; } Property Value Boolean Id The unique ID of the Content Type as object Declaration string Id { get; } Property Value String JSLink Gets or Sets the JS Link of the Content Type Declaration string JSLink { get; set; } Property Value String MobileDisplayFormUrl Gets or Sets the Mobile Display Form URL of the Content Type Declaration string MobileDisplayFormUrl { get; set; } Property Value String MobileEditFormUrl Gets or Sets the Mobile Edit Form URL of the Content Type Declaration string MobileEditFormUrl { get; set; } Property Value String MobileNewFormUrl Gets or Sets the Mobile New Form URL of the Content Type Declaration string MobileNewFormUrl { get; set; } Property Value String Name Gets or Sets the name of the Content Type Declaration string Name { get; set; } Property Value String NewFormTemplateName Gets or Sets the New Form template's name of the Content Type Declaration string NewFormTemplateName { get; set; } Property Value String NewFormUrl Gets or Sets the New Form URL of the Content Type Declaration string NewFormUrl { get; set; } Property Value String ReadOnly Gets or Sets whether the Content Type is read only Declaration bool ReadOnly { get; set; } Property Value Boolean SchemaXml Gets or Sets the Schema XML of the Content Type Declaration string SchemaXml { get; set; } Property Value String SchemaXmlWithResourceTokens Gets or Sets the Schema XML with resource tokens of the Content Type Declaration string SchemaXmlWithResourceTokens { get; set; } Property Value String Scope Gets or Sets the scope of the Content Type Declaration string Scope { get; set; } Property Value String Sealed Gets or Sets whether the Content Type is sealed Declaration bool Sealed { get; set; } Property Value Boolean StringId The unique ID of the Content Type as string Declaration string StringId { get; } Property Value String Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IContentTypeCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IContentTypeCollection.html",
    "title": "Interface IContentTypeCollection | PnP Core SDK",
    "keywords": "Interface IContentTypeCollection Public interface to define a collection of ContentType objects of SharePoint Online Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IContentTypeCollection : IQueryable<IContentType>, IDataModelCollection<IContentType>, IEnumerable<IContentType>, IDataModelParent, IDataModelWithContext, IRequestableCollection Methods Add(String, String, String, String) Add a content type Check the documentation for a well formed Content Type Id: https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14) Declaration IContentType Add(string id, string name, string description = null, string group = null) Parameters String id Id of the content type String name Name of the content type String description Description of the content type String group Group of the content type Returns IContentType The newly added content type AddAsync(String, String, String, String) Add a content type Check the documentation for a well formed Content Type Id: https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14) Declaration Task<IContentType> AddAsync(string id, string name, string description = null, string group = null) Parameters String id Id of the content type String name Name of the content type String description Description of the content type String group Group of the content type Returns Task < IContentType > The newly added content type AddAvailableContentType(String) Add an existing content type Declaration IContentType AddAvailableContentType(string id) Parameters String id Id of the content type Returns IContentType The newly added content type AddAvailableContentTypeAsync(String) Add an existing content type Declaration Task<IContentType> AddAvailableContentTypeAsync(string id) Parameters String id Id of the content type Returns Task < IContentType > The newly added content type AddAvailableContentTypeBatch(Batch, String) Add an existing content type Declaration IContentType AddAvailableContentTypeBatch(Batch batch, string id) Parameters Batch batch Batch to use String id Id of the content type Returns IContentType The newly added content type AddAvailableContentTypeBatch(String) Add an existing content type Declaration IContentType AddAvailableContentTypeBatch(string id) Parameters String id Id of the content type Returns IContentType The newly added content type AddAvailableContentTypeBatchAsync(Batch, String) Add an existing content type Declaration Task<IContentType> AddAvailableContentTypeBatchAsync(Batch batch, string id) Parameters Batch batch Batch to use String id Id of the content type Returns Task < IContentType > The newly added content type AddAvailableContentTypeBatchAsync(String) Add an existing content type Declaration Task<IContentType> AddAvailableContentTypeBatchAsync(string id) Parameters String id Id of the content type Returns Task < IContentType > The newly added content type AddBatch(Batch, String, String, String, String) Add a content type Check the documentation for a well formed Content Type Id: https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14) Declaration IContentType AddBatch(Batch batch, string id, string name, string description = null, string group = null) Parameters Batch batch Batch to use String id Id of the content type String name Name of the content type String description Description of the content type String group Group of the content type Returns IContentType The newly added content type AddBatch(String, String, String, String) Add a content type Check the documentation for a well formed Content Type Id: https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14) Declaration IContentType AddBatch(string id, string name, string description = null, string group = null) Parameters String id Id of the content type String name Name of the content type String description Description of the content type String group Group of the content type Returns IContentType The newly added content type AddBatchAsync(Batch, String, String, String, String) Add a content type Check the documentation for a well formed Content Type Id: https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14) Declaration Task<IContentType> AddBatchAsync(Batch batch, string id, string name, string description = null, string group = null) Parameters Batch batch Batch to use String id Id of the content type String name Name of the content type String description Description of the content type String group Group of the content type Returns Task < IContentType > The newly added content type AddBatchAsync(String, String, String, String) Add a content type Check the documentation for a well formed Content Type Id: https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/aa543822(v=office.14) Declaration Task<IContentType> AddBatchAsync(string id, string name, string description = null, string group = null) Parameters String id Id of the content type String name Name of the content type String description Description of the content type String group Group of the content type Returns Task < IContentType > The newly added content type Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.IEffectiveInformationRightsManagementSettings.html": {
    "href": "api/PnP.Core.Model.SharePoint.IEffectiveInformationRightsManagementSettings.html",
    "title": "Interface IEffectiveInformationRightsManagementSettings | PnP Core SDK",
    "keywords": "Interface IEffectiveInformationRightsManagementSettings Public interface to define a EffectiveInformationRightsManagementSettings object Inherited Members IDataModel<IEffectiveInformationRightsManagementSettings>.HasValue(String) IDataModel<IEffectiveInformationRightsManagementSettings>.HasChanged(String) IDataModel<IEffectiveInformationRightsManagementSettings>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IEffectiveInformationRightsManagementSettings>.GetBatchAsync(Batch, Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) IDataModelGet<IEffectiveInformationRightsManagementSettings>.GetBatchAsync(Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) IDataModelGet<IEffectiveInformationRightsManagementSettings>.GetBatch(Batch, Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) IDataModelGet<IEffectiveInformationRightsManagementSettings>.GetBatch(Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) IDataModelGet<IEffectiveInformationRightsManagementSettings>.GetAsync(Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) IDataModelGet<IEffectiveInformationRightsManagementSettings>.GetAsync(ApiResponse, Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) IDataModelGet<IEffectiveInformationRightsManagementSettings>.Get(Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) IDataModelGet<IEffectiveInformationRightsManagementSettings>.Get(ApiResponse, Expression<Func<IEffectiveInformationRightsManagementSettings, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IEffectiveInformationRightsManagementSettings : IDataModel<IEffectiveInformationRightsManagementSettings>, IDataModelParent, IDataModelWithContext, IDataModelGet<IEffectiveInformationRightsManagementSettings>, IDataModelGet Properties AllowPrint Gets whether print is allowed for this file. Declaration bool AllowPrint { get; } Property Value Boolean AllowScript Gets whether script is alloed for this file. Declaration bool AllowScript { get; } Property Value Boolean AllowWriteCopy Gets whether writing copy is allowed for this file. Declaration bool AllowWriteCopy { get; } Property Value Boolean DisableDocumentBrowserView Gets whether document browser view is disabled for this file. Declaration bool DisableDocumentBrowserView { get; } Property Value Boolean DocumentAccessExpireDays Gets the access expiry in days for this file. Declaration int DocumentAccessExpireDays { get; } Property Value Int32 DocumentLibraryProtectionExpireDate Gets the document library protection expiry date. Declaration DateTime DocumentLibraryProtectionExpireDate { get; } Property Value DateTime EnableDocumentAccessExpire Gets access expiry for this file. Declaration bool EnableDocumentAccessExpire { get; } Property Value Boolean EnableDocumentBrowserPublishingView Gets whether document browser publishing view is enabled for this file. Declaration bool EnableDocumentBrowserPublishingView { get; } Property Value Boolean EnableGroupProtection Gets whether group protection is enabled on this file. Declaration bool EnableGroupProtection { get; } Property Value Boolean EnableLicenseCacheExpire Gets whether license cache expiry is enabled on this file. Declaration bool EnableLicenseCacheExpire { get; } Property Value Boolean GroupName Gets the IRM group name of the file. Declaration string GroupName { get; } Property Value String IrmEnabled Gets whether IRM is enabled on this file. Declaration bool IrmEnabled { get; } Property Value Boolean LicenseCacheExpireDays Gets the license cache expiry in days for this file. Declaration int LicenseCacheExpireDays { get; } Property Value Int32 PolicyDescription Gets the policy description for this file. Declaration string PolicyDescription { get; } Property Value String PolicyTitle Gets the policy title for this file. Declaration string PolicyTitle { get; } Property Value String SettingSource Gets the source of this setting. Declaration SPEffectiveInformationRightsManagementSettingsSource SettingSource { get; } Property Value SPEffectiveInformationRightsManagementSettingsSource TemplateId Gets the IRM template id for this file. Declaration string TemplateId { get; } Property Value String Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFeature.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFeature.html",
    "title": "Interface IFeature | PnP Core SDK",
    "keywords": "Interface IFeature Represents a Feature in SharePoint Online Inherited Members IDataModel<IFeature>.HasValue(String) IDataModel<IFeature>.HasChanged(String) IDataModel<IFeature>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IFeature>.GetBatchAsync(Batch, Expression<Func<IFeature, Object>>[]) IDataModelGet<IFeature>.GetBatchAsync(Expression<Func<IFeature, Object>>[]) IDataModelGet<IFeature>.GetBatch(Batch, Expression<Func<IFeature, Object>>[]) IDataModelGet<IFeature>.GetBatch(Expression<Func<IFeature, Object>>[]) IDataModelGet<IFeature>.GetAsync(Expression<Func<IFeature, Object>>[]) IDataModelGet<IFeature>.GetAsync(ApiResponse, Expression<Func<IFeature, Object>>[]) IDataModelGet<IFeature>.Get(Expression<Func<IFeature, Object>>[]) IDataModelGet<IFeature>.Get(ApiResponse, Expression<Func<IFeature, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFeature : IDataModel<IFeature>, IDataModelParent, IDataModelWithContext, IDataModelGet<IFeature>, IDataModelGet Properties DefinitionId The ID of the Feature Declaration Guid DefinitionId { get; } Property Value Guid DisplayName The name of the feature Declaration string DisplayName { get; } Property Value String Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFeatureCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFeatureCollection.html",
    "title": "Interface IFeatureCollection | PnP Core SDK",
    "keywords": "Interface IFeatureCollection Collection of site or web scoped features Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFeatureCollection : IQueryable<IFeature>, IDataModelCollection<IFeature>, IEnumerable<IFeature>, IDataModelParent, IDataModelWithContext, IRequestableCollection Methods Disable(Guid) Disable a feature Declaration void Disable(Guid id) Parameters Guid id Id of the feature to disable DisableAsync(Guid) Disable a feature Declaration Task DisableAsync(Guid id) Parameters Guid id Id of the feature to disable Returns Task DisableBatch(Guid) Disable a feature in batch Declaration void DisableBatch(Guid id) Parameters Guid id Id of the feature to disable DisableBatch(Batch, Guid) Disable a feature in batch Declaration void DisableBatch(Batch batch, Guid id) Parameters Batch batch Batch to add this feature disable request to Guid id Id of the feature to disable DisableBatchAsync(Guid) Disable a feature in batch Declaration Task DisableBatchAsync(Guid id) Parameters Guid id Id of the feature to disable Returns Task DisableBatchAsync(Batch, Guid) Disable a feature in batch Declaration Task DisableBatchAsync(Batch batch, Guid id) Parameters Batch batch Batch to add this feature disable request to Guid id Id of the feature to disable Returns Task Enable(Guid) Enable a feature Declaration IFeature Enable(Guid id) Parameters Guid id Id of the feature to enable Returns IFeature Enabled feature EnableAsync(Guid) Enable a feature Declaration Task<IFeature> EnableAsync(Guid id) Parameters Guid id Id of the feature to enable Returns Task < IFeature > Enabled feature EnableBatch(Guid) Enable a feature in batch Declaration IFeature EnableBatch(Guid id) Parameters Guid id Id of the feature to enable Returns IFeature Enabled feature EnableBatch(Batch, Guid) Enable a feature in batch Declaration IFeature EnableBatch(Batch batch, Guid id) Parameters Batch batch Batch to add this feature enable request to Guid id Id of the feature to enable Returns IFeature Enabled feature EnableBatchAsync(Guid) Enable a feature in batch Declaration Task<IFeature> EnableBatchAsync(Guid id) Parameters Guid id Id of the feature to enable Returns Task < IFeature > Enabled feature EnableBatchAsync(Batch, Guid) Enable a feature in batch Declaration Task<IFeature> EnableBatchAsync(Batch batch, Guid id) Parameters Batch batch Batch to add this feature enable request to Guid id Id of the feature to enable Returns Task < IFeature > Enabled feature Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.IField.html": {
    "href": "api/PnP.Core.Model.SharePoint.IField.html",
    "title": "Interface IField | PnP Core SDK",
    "keywords": "Interface IField Public interface to define a Field object of SharePoint Online Inherited Members IDataModel<IField>.HasValue(String) IDataModel<IField>.HasChanged(String) IDataModel<IField>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IField>.GetBatchAsync(Batch, Expression<Func<IField, Object>>[]) IDataModelGet<IField>.GetBatchAsync(Expression<Func<IField, Object>>[]) IDataModelGet<IField>.GetBatch(Batch, Expression<Func<IField, Object>>[]) IDataModelGet<IField>.GetBatch(Expression<Func<IField, Object>>[]) IDataModelGet<IField>.GetAsync(Expression<Func<IField, Object>>[]) IDataModelGet<IField>.GetAsync(ApiResponse, Expression<Func<IField, Object>>[]) IDataModelGet<IField>.Get(Expression<Func<IField, Object>>[]) IDataModelGet<IField>.Get(ApiResponse, Expression<Func<IField, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IField : IDataModel<IField>, IDataModelParent, IDataModelWithContext, IDataModelGet<IField>, IDataModelGet, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties AllowDisplay Gets or sets whether to allow display if the user name Declaration bool AllowDisplay { get; set; } Property Value Boolean AllowHyperlink Gets or sets a value that specifies whether a hyperlink is allowed as a value of the field. Declaration bool AllowHyperlink { get; set; } Property Value Boolean AllowMultipleValues Gets or sets whether the lookup fields allows multiple values Declaration bool AllowMultipleValues { get; set; } Property Value Boolean AppendOnly Gets or sets a value that specifies whether all changes to the value of the field are displayed in list forms. Declaration bool AppendOnly { get; set; } Property Value Boolean AutoIndexed Gets or Sets whether the field is auto indexed Declaration bool AutoIndexed { get; set; } Property Value Boolean CanBeDeleted Gets or Sets whether the field can be deleted Declaration bool CanBeDeleted { get; set; } Property Value Boolean Choices Gets or sets the choices of choice field Declaration string[] Choices { get; set; } Property Value String [] ClientSideComponentId Gets or Sets the client side component Id associated with the field Declaration Guid ClientSideComponentId { get; set; } Property Value Guid ClientSideComponentProperties Gets or Sets the properties of the client side component associated with the field Declaration string ClientSideComponentProperties { get; set; } Property Value String ClientValidationFormula Gets or Sets the client validation formula of the field Declaration string ClientValidationFormula { get; set; } Property Value String ClientValidationMessage Gets or Sets the client validation message of the field Declaration string ClientValidationMessage { get; set; } Property Value String CurrencyLocaleId Gets or Sets the Locale Id of the currency Declaration int CurrencyLocaleId { get; set; } Property Value Int32 CustomFormatter Gets or Sets custom formatter of the field Declaration string CustomFormatter { get; set; } Property Value String DateFormat Gets or Sets the Date Format Valid for DateTime field, Calculated field Declaration DateTimeFieldFormatType DateFormat { get; set; } Property Value DateTimeFieldFormatType DateTimeCalendarType Gets or sets the type of calendar to use of a DateTime field Declaration CalendarType DateTimeCalendarType { get; set; } Property Value CalendarType DefaultFormula Gets or Sets the default formula of the field Declaration string DefaultFormula { get; set; } Property Value String DefaultValue Gets or Sets the default value of the field Declaration object DefaultValue { get; set; } Property Value Object DependentLookupInternalNames Gets or sets the dependent lookup internal names of a lookup field Declaration string[] DependentLookupInternalNames { get; set; } Property Value String [] Description Gets or Sets the description of the field Declaration string Description { get; set; } Property Value String Direction Gets or Sets the direction of the field TODO use enum for this field Declaration string Direction { get; set; } Property Value String DisplayFormat Gets or Sets the display format of the field CAUTION: Is an integer value since according to field type, the display format enum may change Declaration int DisplayFormat { get; set; } Property Value Int32 EditFormat Gets or Sets the edit format of the field Declaration int EditFormat { get; set; } Property Value Int32 EnableLookup Gets or sets whether the lookup should be enabled for computed field Declaration bool EnableLookup { get; set; } Property Value Boolean EnforceUniqueValues Gets or Sets whether the field enforces unique values Declaration bool EnforceUniqueValues { get; set; } Property Value Boolean EntityPropertyName Gets or Sets the entity property name of the field Declaration string EntityPropertyName { get; set; } Property Value String FieldTypeKind Gets or Sets the field type kind of the field https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee540543%28v%3doffice.15%29 Declaration FieldType FieldTypeKind { get; } Property Value FieldType FillInChoice Gets or sets whether choice field can be filled in by user Declaration bool FillInChoice { get; set; } Property Value Boolean Filterable Gets or Sets whether the field can be used as filter Declaration bool Filterable { get; set; } Property Value Boolean Formula Gets or sets the formula of a calculated field Declaration string Formula { get; set; } Property Value String FriendlyDisplayFormat Gets or sets the friendly format type of a DateTime field Declaration DateTimeFieldFriendlyFormatType FriendlyDisplayFormat { get; set; } Property Value DateTimeFieldFriendlyFormatType FromBaseType Gets or Sets whether the field is from base type TODO : Review comment Declaration bool FromBaseType { get; set; } Property Value Boolean Group Gets or Sets the group of the field Declaration string Group { get; set; } Property Value String Hidden Gets or Sets whether the field is hidden Declaration bool Hidden { get; set; } Property Value Boolean Id Gets or Sets the id of the field Declaration Guid Id { get; } Property Value Guid Indexed Gets or Sets whether the field is indexed Declaration bool Indexed { get; set; } Property Value Boolean IndexStatus Gets or Sets the index status of the field TODO: What should be done for read-only fields ? Declaration int IndexStatus { get; set; } Property Value Int32 InternalName Gets or Sets the internal name of the field Declaration string InternalName { get; } Property Value String IsDependentLookup Gets or sets whether a lookup field is dependent lookup Declaration bool IsDependentLookup { get; set; } Property Value Boolean IsRelationship Gets or sets whether a lookup field is a relationship Declaration bool IsRelationship { get; set; } Property Value Boolean JSLink Gets or Sets the JS link of the field Declaration string JSLink { get; set; } Property Value String LookupField Gets or sets the internal name of the related field Declaration string LookupField { get; set; } Property Value String LookupList Gets or sets the Id of the related list Declaration string LookupList { get; set; } Property Value String LookupWebId Gets or sets the lookup web Id Declaration Guid LookupWebId { get; set; } Property Value Guid Mappings Gets the mappings of a choice field Declaration string Mappings { get; } Property Value String MaximumValue Gets or sets the maximum value of a number field Declaration double MaximumValue { get; set; } Property Value Double MaxLength Gets or Sets the maximum length of the field Declaration int MaxLength { get; set; } Property Value Int32 MinimumValue Gets or sets the minimum value of a number field Declaration double MinimumValue { get; set; } Property Value Double NumberOfLines Gets or sets a value that specifies the number of lines of text to display for the field. Declaration int NumberOfLines { get; set; } Property Value Int32 OutputType Gets or sets the type of a calculated field output Declaration FieldType OutputType { get; set; } Property Value FieldType PinnedToFiltersPane Gets or Sets whether the field is pinned to filters pane Declaration bool PinnedToFiltersPane { get; set; } Property Value Boolean Presence Gets or sets whether to display the presence indicator of the user Declaration bool Presence { get; set; } Property Value Boolean PrimaryFieldId Gets or sets the primary field Id of the lookup field Declaration string PrimaryFieldId { get; set; } Property Value String ReadOnlyField Gets or Sets whether the field is read only Declaration bool ReadOnlyField { get; set; } Property Value Boolean RelationshipDeleteBehavior Gets or sets the deletion behavior with the relationship of the lookup field Declaration RelationshipDeleteBehaviorType RelationshipDeleteBehavior { get; set; } Property Value RelationshipDeleteBehaviorType Required Gets or Sets whether the field is required Declaration bool Required { get; set; } Property Value Boolean RestrictedMode Gets or sets a value that specifies whether the field supports a subset of rich formatting. Declaration bool RestrictedMode { get; set; } Property Value Boolean RichText Gets or sets a value that specifies whether the field supports rich formatting. Declaration bool RichText { get; set; } Property Value Boolean SchemaXml Gets or Sets the schema XML of the field Declaration string SchemaXml { get; set; } Property Value String Scope Gets or Sets the scope of the field Declaration string Scope { get; set; } Property Value String Sealed Gets or Sets whether the field is sealed Declaration bool Sealed { get; set; } Property Value Boolean SelectionGroup Gets or sets the Id of the group to which the users to select belong to Declaration int SelectionGroup { get; set; } Property Value Int32 SelectionMode Gets or sets the selection mode of the user field Declaration FieldUserSelectionMode SelectionMode { get; set; } Property Value FieldUserSelectionMode ShowAsPercentage Gets or Sets whether the field should be shown as percentage Valid for Number field, Calculated field Declaration bool ShowAsPercentage { get; set; } Property Value Boolean ShowInFiltersPane Gets or Sets whether the field is shown in filters pane Declaration int ShowInFiltersPane { get; set; } Property Value Int32 Sortable Gets or Sets whether the field can be sorted Declaration bool Sortable { get; set; } Property Value Boolean StaticName Gets or Sets the static name of the field Declaration string StaticName { get; } Property Value String Title Gets or Sets the title of the field Declaration string Title { get; set; } Property Value String TypeAsString Gets or Sets the type of the field as string value Declaration string TypeAsString { get; set; } Property Value String TypeDisplayName Gets or Sets the display name of the type of the field Declaration string TypeDisplayName { get; set; } Property Value String TypeShortDescription Gets or Sets a short description of the type of the field Declaration string TypeShortDescription { get; set; } Property Value String UnlimitedLengthInDocumentLibrary Gets or sets a value that specifies whether the field supports unlimited length in document libraries. Declaration bool UnlimitedLengthInDocumentLibrary { get; set; } Property Value Boolean ValidationFormula Gets or Sets the validation formula of the field Declaration string ValidationFormula { get; set; } Property Value String ValidationMessage Gets or Sets the validation message of the field Declaration string ValidationMessage { get; set; } Property Value String Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFieldCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFieldCollection.html",
    "title": "Interface IFieldCollection | PnP Core SDK",
    "keywords": "Interface IFieldCollection Public interface to define a collection of Field objects of SharePoint Online Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFieldCollection : IQueryable<IField>, IDataModelCollection<IField>, IEnumerable<IField>, IDataModelParent, IDataModelWithContext, IRequestableCollection Methods Add(String, FieldType, FieldOptions) Adds a new field to the collection Declaration IField Add(string title, FieldType fieldType, FieldOptions options = null) Parameters String title The title of the field FieldType fieldType The type of the field to add FieldOptions options The specific options for field creation Returns IField The added field AddAsync(String, FieldType, FieldOptions) Adds a new field to the collection Declaration Task<IField> AddAsync(string title, FieldType fieldType, FieldOptions options = null) Parameters String title The title of the field FieldType fieldType The type of the field to add FieldOptions options The specific options for field creation Returns Task < IField > The added field AddBatch(Batch, String, FieldType, FieldOptions) Adds a new field to the collection Declaration IField AddBatch(Batch batch, string title, FieldType fieldType, FieldOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldType fieldType The type of the field to add FieldOptions options The specific options for field creation Returns IField The added field AddBatch(String, FieldType, FieldOptions) Adds a new field to the collection Declaration IField AddBatch(string title, FieldType fieldType, FieldOptions options = null) Parameters String title The title of the field FieldType fieldType The type of the field to add FieldOptions options The specific options for field creation Returns IField The added field AddBatchAsync(Batch, String, FieldType, FieldOptions) Adds a new field to the collection Declaration Task<IField> AddBatchAsync(Batch batch, string title, FieldType fieldType, FieldOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldType fieldType The type of the field to add FieldOptions options The specific options for field creation Returns Task < IField > The added field AddBatchAsync(String, FieldType, FieldOptions) Adds a new field to the collection Declaration Task<IField> AddBatchAsync(string title, FieldType fieldType, FieldOptions options = null) Parameters String title The title of the field FieldType fieldType The type of the field to add FieldOptions options The specific options for field creation Returns Task < IField > The added field AddCalculated(String, FieldCalculatedOptions) Adds a new Calculated field to the collection Declaration IField AddCalculated(string title, FieldCalculatedOptions options = null) Parameters String title The title of the field FieldCalculatedOptions options The specific options for field creation Returns IField The added field AddCalculatedAsync(String, FieldCalculatedOptions) Adds a new Calculated field to the collection Declaration Task<IField> AddCalculatedAsync(string title, FieldCalculatedOptions options = null) Parameters String title The title of the field FieldCalculatedOptions options The specific options for field creation Returns Task < IField > The added field AddCalculatedBatch(Batch, String, FieldCalculatedOptions) Adds a new Calculated field to the collection Declaration IField AddCalculatedBatch(Batch batch, string title, FieldCalculatedOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldCalculatedOptions options The specific options for field creation Returns IField The added field AddCalculatedBatch(String, FieldCalculatedOptions) Adds a new Calculated field to the collection Declaration IField AddCalculatedBatch(string title, FieldCalculatedOptions options = null) Parameters String title The title of the field FieldCalculatedOptions options The specific options for field creation Returns IField The added field AddCalculatedBatchAsync(Batch, String, FieldCalculatedOptions) Adds a new Calculated field to the collection Declaration Task<IField> AddCalculatedBatchAsync(Batch batch, string title, FieldCalculatedOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldCalculatedOptions options The specific options for field creation Returns Task < IField > The added field AddCalculatedBatchAsync(String, FieldCalculatedOptions) Adds a new Calculated field to the collection Declaration Task<IField> AddCalculatedBatchAsync(string title, FieldCalculatedOptions options = null) Parameters String title The title of the field FieldCalculatedOptions options The specific options for field creation Returns Task < IField > The added field AddChoice(String, FieldChoiceOptions) Adds a new Choice field to the collection Declaration IField AddChoice(string title, FieldChoiceOptions options = null) Parameters String title The title of the field FieldChoiceOptions options The specific options for field creation Returns IField The added field AddChoiceAsync(String, FieldChoiceOptions) Adds a new Choice field to the collection Declaration Task<IField> AddChoiceAsync(string title, FieldChoiceOptions options = null) Parameters String title The title of the field FieldChoiceOptions options The specific options for field creation Returns Task < IField > The added field AddChoiceBatch(Batch, String, FieldChoiceOptions) Adds a new Choice field to the collection Declaration IField AddChoiceBatch(Batch batch, string title, FieldChoiceOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldChoiceOptions options The specific options for field creation Returns IField The added field AddChoiceBatch(String, FieldChoiceOptions) Adds a new Choice field to the collection Declaration IField AddChoiceBatch(string title, FieldChoiceOptions options = null) Parameters String title The title of the field FieldChoiceOptions options The specific options for field creation Returns IField The added field AddChoiceBatchAsync(Batch, String, FieldChoiceOptions) Adds a new Choice field to the collection Declaration Task<IField> AddChoiceBatchAsync(Batch batch, string title, FieldChoiceOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldChoiceOptions options The specific options for field creation Returns Task < IField > The added field AddChoiceBatchAsync(String, FieldChoiceOptions) Adds a new Choice field to the collection Declaration Task<IField> AddChoiceBatchAsync(string title, FieldChoiceOptions options = null) Parameters String title The title of the field FieldChoiceOptions options The specific options for field creation Returns Task < IField > The added field AddCurrency(String, FieldCurrencyOptions) Adds a new Currency field to the collection Declaration IField AddCurrency(string title, FieldCurrencyOptions options = null) Parameters String title The title of the field FieldCurrencyOptions options The specific options for field creation Returns IField The added field AddCurrencyAsync(String, FieldCurrencyOptions) Adds a new Currency field to the collection Declaration Task<IField> AddCurrencyAsync(string title, FieldCurrencyOptions options = null) Parameters String title The title of the field FieldCurrencyOptions options The specific options for field creation Returns Task < IField > The added field AddCurrencyBatch(Batch, String, FieldCurrencyOptions) Adds a new Currency field to the collection Declaration IField AddCurrencyBatch(Batch batch, string title, FieldCurrencyOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldCurrencyOptions options The specific options for field creation Returns IField The added field AddCurrencyBatch(String, FieldCurrencyOptions) Adds a new Currency field to the collection Declaration IField AddCurrencyBatch(string title, FieldCurrencyOptions options = null) Parameters String title The title of the field FieldCurrencyOptions options The specific options for field creation Returns IField The added field AddCurrencyBatchAsync(Batch, String, FieldCurrencyOptions) Adds a new Currency field to the collection Declaration Task<IField> AddCurrencyBatchAsync(Batch batch, string title, FieldCurrencyOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldCurrencyOptions options The specific options for field creation Returns Task < IField > The added field AddCurrencyBatchAsync(String, FieldCurrencyOptions) Adds a new Currency field to the collection Declaration Task<IField> AddCurrencyBatchAsync(string title, FieldCurrencyOptions options = null) Parameters String title The title of the field FieldCurrencyOptions options The specific options for field creation Returns Task < IField > The added field AddDateTime(String, FieldDateTimeOptions) Adds a new DateTime field to the collection Declaration IField AddDateTime(string title, FieldDateTimeOptions options = null) Parameters String title The title of the field FieldDateTimeOptions options The specific options for field creation Returns IField The added field AddDateTimeAsync(String, FieldDateTimeOptions) Adds a new DateTime field to the collection Declaration Task<IField> AddDateTimeAsync(string title, FieldDateTimeOptions options = null) Parameters String title The title of the field FieldDateTimeOptions options The specific options for field creation Returns Task < IField > The added field AddDateTimeBatch(Batch, String, FieldDateTimeOptions) Adds a new DateTime field to the collection Declaration IField AddDateTimeBatch(Batch batch, string title, FieldDateTimeOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldDateTimeOptions options The specific options for field creation Returns IField The added field AddDateTimeBatch(String, FieldDateTimeOptions) Adds a new DateTime field to the collection Declaration IField AddDateTimeBatch(string title, FieldDateTimeOptions options = null) Parameters String title The title of the field FieldDateTimeOptions options The specific options for field creation Returns IField The added field AddDateTimeBatchAsync(Batch, String, FieldDateTimeOptions) Adds a new DateTime field to the collection Declaration Task<IField> AddDateTimeBatchAsync(Batch batch, string title, FieldDateTimeOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldDateTimeOptions options The specific options for field creation Returns Task < IField > The added field AddDateTimeBatchAsync(String, FieldDateTimeOptions) Adds a new DateTime field to the collection Declaration Task<IField> AddDateTimeBatchAsync(string title, FieldDateTimeOptions options = null) Parameters String title The title of the field FieldDateTimeOptions options The specific options for field creation Returns Task < IField > The added field AddFieldAsXml(String, Boolean, AddFieldOptionsFlags) Adds a new field from its XML schema Declaration IField AddFieldAsXml(string schemaXml, bool addToDefaultView = false, AddFieldOptionsFlags options = default(AddFieldOptionsFlags)) Parameters String schemaXml A Collaborative Application Markup Language (CAML) string that contains the schema. It must not be a null reference(Nothing in Visual Basic). It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1. Boolean addToDefaultView Specifies to add the field to the default list view. true if the field is added to the default list view; otherwise, false . AddFieldOptionsFlags options An AddFieldOptionsFlags value that specifies the field options. Returns IField The added field AddFieldAsXmlAsync(String, Boolean, AddFieldOptionsFlags) Adds a new field from its XML schema Declaration Task<IField> AddFieldAsXmlAsync(string schemaXml, bool addToDefaultView = false, AddFieldOptionsFlags options = default(AddFieldOptionsFlags)) Parameters String schemaXml A Collaborative Application Markup Language (CAML) string that contains the schema. It must not be a null reference(Nothing in Visual Basic). It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1. Boolean addToDefaultView Specifies to add the field to the default list view. true if the field is added to the default list view; otherwise, false . AddFieldOptionsFlags options An AddFieldOptionsFlags value that specifies the field options. Returns Task < IField > The added field AddFieldAsXmlBatch(Batch, String, Boolean, AddFieldOptionsFlags) Adds a new field from its XML schema Declaration IField AddFieldAsXmlBatch(Batch batch, string schemaXml, bool addToDefaultView = false, AddFieldOptionsFlags options = default(AddFieldOptionsFlags)) Parameters Batch batch Batch to use String schemaXml A Collaborative Application Markup Language (CAML) string that contains the schema. It must not be a null reference(Nothing in Visual Basic). It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1. Boolean addToDefaultView Specifies to add the field to the default list view. true if the field is added to the default list view; otherwise, false . AddFieldOptionsFlags options An AddFieldOptionsFlags value that specifies the field options. Returns IField The added field AddFieldAsXmlBatch(String, Boolean, AddFieldOptionsFlags) Adds a new field from its XML schema Declaration IField AddFieldAsXmlBatch(string schemaXml, bool addToDefaultView = false, AddFieldOptionsFlags options = default(AddFieldOptionsFlags)) Parameters String schemaXml A Collaborative Application Markup Language (CAML) string that contains the schema. It must not be a null reference(Nothing in Visual Basic). It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1. Boolean addToDefaultView Specifies to add the field to the default list view. true if the field is added to the default list view; otherwise, false . AddFieldOptionsFlags options An AddFieldOptionsFlags value that specifies the field options. Returns IField The added field AddFieldAsXmlBatchAsync(Batch, String, Boolean, AddFieldOptionsFlags) Adds a new field from its XML schema Declaration Task<IField> AddFieldAsXmlBatchAsync(Batch batch, string schemaXml, bool addToDefaultView = false, AddFieldOptionsFlags options = default(AddFieldOptionsFlags)) Parameters Batch batch Batch to use String schemaXml A Collaborative Application Markup Language (CAML) string that contains the schema. It must not be a null reference(Nothing in Visual Basic). It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1. Boolean addToDefaultView Specifies to add the field to the default list view. true if the field is added to the default list view; otherwise, false . AddFieldOptionsFlags options An AddFieldOptionsFlags value that specifies the field options. Returns Task < IField > The added field AddFieldAsXmlBatchAsync(String, Boolean, AddFieldOptionsFlags) Adds a new field from its XML schema Declaration Task<IField> AddFieldAsXmlBatchAsync(string schemaXml, bool addToDefaultView = false, AddFieldOptionsFlags options = default(AddFieldOptionsFlags)) Parameters String schemaXml A Collaborative Application Markup Language (CAML) string that contains the schema. It must not be a null reference(Nothing in Visual Basic). It must not be empty.It must be a valid Collaborative Application Markup Language(CAML) string according to the schema specified in [MS-WSSFO2], section 2.2.9.3.3.1. Boolean addToDefaultView Specifies to add the field to the default list view. true if the field is added to the default list view; otherwise, false . AddFieldOptionsFlags options An AddFieldOptionsFlags value that specifies the field options. Returns Task < IField > The added field AddLookup(String, FieldLookupOptions) Adds a new Lookup field to the collection Declaration IField AddLookup(string title, FieldLookupOptions options = null) Parameters String title The title of the field FieldLookupOptions options The specific options for field creation Returns IField The added field AddLookupAsync(String, FieldLookupOptions) Adds a new Lookup field to the collection Declaration Task<IField> AddLookupAsync(string title, FieldLookupOptions options = null) Parameters String title The title of the field FieldLookupOptions options The specific options for field creation Returns Task < IField > The added field AddLookupBatch(Batch, String, FieldLookupOptions) Adds a new Lookup field to the collection Declaration IField AddLookupBatch(Batch batch, string title, FieldLookupOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldLookupOptions options The specific options for field creation Returns IField The added field AddLookupBatch(String, FieldLookupOptions) Adds a new Lookup field to the collection Declaration IField AddLookupBatch(string title, FieldLookupOptions options = null) Parameters String title The title of the field FieldLookupOptions options The specific options for field creation Returns IField The added field AddLookupBatchAsync(Batch, String, FieldLookupOptions) Adds a new Lookup field to the collection Declaration Task<IField> AddLookupBatchAsync(Batch batch, string title, FieldLookupOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldLookupOptions options The specific options for field creation Returns Task < IField > The added field AddLookupBatchAsync(String, FieldLookupOptions) Adds a new Lookup field to the collection Declaration Task<IField> AddLookupBatchAsync(string title, FieldLookupOptions options = null) Parameters String title The title of the field FieldLookupOptions options The specific options for field creation Returns Task < IField > The added field AddMultiChoice(String, FieldMultiChoiceOptions) Adds a new MultiChoice field to the collection Declaration IField AddMultiChoice(string title, FieldMultiChoiceOptions options = null) Parameters String title The title of the field FieldMultiChoiceOptions options The specific options for field creation Returns IField The added field AddMultiChoiceAsync(String, FieldMultiChoiceOptions) Adds a new MultiChoice field to the collection Declaration Task<IField> AddMultiChoiceAsync(string title, FieldMultiChoiceOptions options = null) Parameters String title The title of the field FieldMultiChoiceOptions options The specific options for field creation Returns Task < IField > The added field AddMultiChoiceBatch(Batch, String, FieldMultiChoiceOptions) Adds a new MultiChoice field to the collection Declaration IField AddMultiChoiceBatch(Batch batch, string title, FieldMultiChoiceOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldMultiChoiceOptions options The specific options for field creation Returns IField The added field AddMultiChoiceBatch(String, FieldMultiChoiceOptions) Adds a new MultiChoice field to the collection Declaration IField AddMultiChoiceBatch(string title, FieldMultiChoiceOptions options = null) Parameters String title The title of the field FieldMultiChoiceOptions options The specific options for field creation Returns IField The added field AddMultiChoiceBatchAsync(Batch, String, FieldMultiChoiceOptions) Adds a new MultiChoice field to the collection Declaration Task<IField> AddMultiChoiceBatchAsync(Batch batch, string title, FieldMultiChoiceOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldMultiChoiceOptions options The specific options for field creation Returns Task < IField > The added field AddMultiChoiceBatchAsync(String, FieldMultiChoiceOptions) Adds a new MultiChoice field to the collection Declaration Task<IField> AddMultiChoiceBatchAsync(string title, FieldMultiChoiceOptions options = null) Parameters String title The title of the field FieldMultiChoiceOptions options The specific options for field creation Returns Task < IField > The added field AddMultilineText(String, FieldMultilineTextOptions) Adds a new multiline Text field to the collection Declaration IField AddMultilineText(string title, FieldMultilineTextOptions options = null) Parameters String title The title of the field FieldMultilineTextOptions options The specific options for field creation Returns IField The added field AddMultilineTextAsync(String, FieldMultilineTextOptions) Adds a new multiline Text field to the collection Declaration Task<IField> AddMultilineTextAsync(string title, FieldMultilineTextOptions options = null) Parameters String title The title of the field FieldMultilineTextOptions options The specific options for field creation Returns Task < IField > The added field AddMultilineTextBatch(Batch, String, FieldMultilineTextOptions) Adds a new multiline Text field to the collection Declaration IField AddMultilineTextBatch(Batch batch, string title, FieldMultilineTextOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldMultilineTextOptions options The specific options for field creation Returns IField The added field AddMultilineTextBatch(String, FieldMultilineTextOptions) Adds a new multiline Text field to the collection Declaration IField AddMultilineTextBatch(string title, FieldMultilineTextOptions options = null) Parameters String title The title of the field FieldMultilineTextOptions options The specific options for field creation Returns IField The added field AddMultilineTextBatchAsync(Batch, String, FieldMultilineTextOptions) Adds a new multiline Text field to the collection Declaration Task<IField> AddMultilineTextBatchAsync(Batch batch, string title, FieldMultilineTextOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldMultilineTextOptions options The specific options for field creation Returns Task < IField > The added field AddMultilineTextBatchAsync(String, FieldMultilineTextOptions) Adds a new multiline Text field to the collection Declaration Task<IField> AddMultilineTextBatchAsync(string title, FieldMultilineTextOptions options = null) Parameters String title The title of the field FieldMultilineTextOptions options The specific options for field creation Returns Task < IField > The added field AddNumber(String, FieldNumberOptions) Adds a new Number field to the collection Declaration IField AddNumber(string title, FieldNumberOptions options = null) Parameters String title The title of the field FieldNumberOptions options The specific options for field creation Returns IField The added field AddNumberAsync(String, FieldNumberOptions) Adds a new Number field to the collection Declaration Task<IField> AddNumberAsync(string title, FieldNumberOptions options = null) Parameters String title The title of the field FieldNumberOptions options The specific options for field creation Returns Task < IField > The added field AddNumberBatch(Batch, String, FieldNumberOptions) Adds a new Number field to the collection Declaration IField AddNumberBatch(Batch batch, string title, FieldNumberOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldNumberOptions options The specific options for field creation Returns IField The added field AddNumberBatch(String, FieldNumberOptions) Adds a new Number field to the collection Declaration IField AddNumberBatch(string title, FieldNumberOptions options = null) Parameters String title The title of the field FieldNumberOptions options The specific options for field creation Returns IField The added field AddNumberBatchAsync(Batch, String, FieldNumberOptions) Adds a new Number field to the collection Declaration Task<IField> AddNumberBatchAsync(Batch batch, string title, FieldNumberOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldNumberOptions options The specific options for field creation Returns Task < IField > The added field AddNumberBatchAsync(String, FieldNumberOptions) Adds a new Number field to the collection Declaration Task<IField> AddNumberBatchAsync(string title, FieldNumberOptions options = null) Parameters String title The title of the field FieldNumberOptions options The specific options for field creation Returns Task < IField > The added field AddText(String, FieldTextOptions) Adds a new Text field to the collection Declaration IField AddText(string title, FieldTextOptions options = null) Parameters String title The title of the field FieldTextOptions options The specific options for field creation Returns IField The added field AddTextAsync(String, FieldTextOptions) Adds a new Text field to the collection Declaration Task<IField> AddTextAsync(string title, FieldTextOptions options = null) Parameters String title The title of the field FieldTextOptions options The specific options for field creation Returns Task < IField > The added field AddTextBatch(Batch, String, FieldTextOptions) Adds a new Text field to the collection Declaration IField AddTextBatch(Batch batch, string title, FieldTextOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldTextOptions options The specific options for field creation Returns IField The added field AddTextBatch(String, FieldTextOptions) Adds a new Text field to the collection Declaration IField AddTextBatch(string title, FieldTextOptions options = null) Parameters String title The title of the field FieldTextOptions options The specific options for field creation Returns IField The added field AddTextBatchAsync(Batch, String, FieldTextOptions) Adds a new Text field to the collection Declaration Task<IField> AddTextBatchAsync(Batch batch, string title, FieldTextOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldTextOptions options The specific options for field creation Returns Task < IField > The added field AddTextBatchAsync(String, FieldTextOptions) Adds a new Text field to the collection Declaration Task<IField> AddTextBatchAsync(string title, FieldTextOptions options = null) Parameters String title The title of the field FieldTextOptions options The specific options for field creation Returns Task < IField > The added field AddUrl(String, FieldUrlOptions) Adds a new URL field to the collection Declaration IField AddUrl(string title, FieldUrlOptions options = null) Parameters String title The title of the field FieldUrlOptions options The specific options for field creation Returns IField The added field AddUrlAsync(String, FieldUrlOptions) Adds a new URL field to the collection Declaration Task<IField> AddUrlAsync(string title, FieldUrlOptions options = null) Parameters String title The title of the field FieldUrlOptions options The specific options for field creation Returns Task < IField > The added field AddUrlBatch(Batch, String, FieldUrlOptions) Adds a new URL field to the collection Declaration IField AddUrlBatch(Batch batch, string title, FieldUrlOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldUrlOptions options The specific options for field creation Returns IField The added field AddUrlBatch(String, FieldUrlOptions) Adds a new URL field to the collection Declaration IField AddUrlBatch(string title, FieldUrlOptions options = null) Parameters String title The title of the field FieldUrlOptions options The specific options for field creation Returns IField The added field AddUrlBatchAsync(Batch, String, FieldUrlOptions) Adds a new URL field to the collection Declaration Task<IField> AddUrlBatchAsync(Batch batch, string title, FieldUrlOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldUrlOptions options The specific options for field creation Returns Task < IField > The added field AddUrlBatchAsync(String, FieldUrlOptions) Adds a new URL field to the collection Declaration Task<IField> AddUrlBatchAsync(string title, FieldUrlOptions options = null) Parameters String title The title of the field FieldUrlOptions options The specific options for field creation Returns Task < IField > The added field AddUser(String, FieldUserOptions) Adds a new User field to the collection Declaration IField AddUser(string title, FieldUserOptions options = null) Parameters String title The title of the field FieldUserOptions options The specific options for field creation Returns IField The added field AddUserAsync(String, FieldUserOptions) Adds a new User field to the collection Declaration Task<IField> AddUserAsync(string title, FieldUserOptions options = null) Parameters String title The title of the field FieldUserOptions options The specific options for field creation Returns Task < IField > The added field AddUserBatch(Batch, String, FieldUserOptions) Adds a new User field to the collection Declaration IField AddUserBatch(Batch batch, string title, FieldUserOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldUserOptions options The specific options for field creation Returns IField The added field AddUserBatch(String, FieldUserOptions) Adds a new User field to the collection Declaration IField AddUserBatch(string title, FieldUserOptions options = null) Parameters String title The title of the field FieldUserOptions options The specific options for field creation Returns IField The added field AddUserBatchAsync(Batch, String, FieldUserOptions) Adds a new User field to the collection Declaration Task<IField> AddUserBatchAsync(Batch batch, string title, FieldUserOptions options = null) Parameters Batch batch Batch to use String title The title of the field FieldUserOptions options The specific options for field creation Returns Task < IField > The added field AddUserBatchAsync(String, FieldUserOptions) Adds a new User field to the collection Declaration Task<IField> AddUserBatchAsync(string title, FieldUserOptions options = null) Parameters String title The title of the field FieldUserOptions options The specific options for field creation Returns Task < IField > The added field Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.IFieldLink.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFieldLink.html",
    "title": "Interface IFieldLink | PnP Core SDK",
    "keywords": "Interface IFieldLink Public interface to define a FieldLink object Inherited Members IDataModel<IFieldLink>.HasValue(String) IDataModel<IFieldLink>.HasChanged(String) IDataModel<IFieldLink>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IFieldLink>.GetBatchAsync(Batch, Expression<Func<IFieldLink, Object>>[]) IDataModelGet<IFieldLink>.GetBatchAsync(Expression<Func<IFieldLink, Object>>[]) IDataModelGet<IFieldLink>.GetBatch(Batch, Expression<Func<IFieldLink, Object>>[]) IDataModelGet<IFieldLink>.GetBatch(Expression<Func<IFieldLink, Object>>[]) IDataModelGet<IFieldLink>.GetAsync(Expression<Func<IFieldLink, Object>>[]) IDataModelGet<IFieldLink>.GetAsync(ApiResponse, Expression<Func<IFieldLink, Object>>[]) IDataModelGet<IFieldLink>.Get(Expression<Func<IFieldLink, Object>>[]) IDataModelGet<IFieldLink>.Get(ApiResponse, Expression<Func<IFieldLink, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFieldLink : IDataModel<IFieldLink>, IDataModelParent, IDataModelWithContext, IDataModelGet<IFieldLink>, IDataModelGet, IDataModelUpdate, IDataModelDelete Properties DisplayName Gets or sets the display name of the field in the field link. Declaration string DisplayName { get; set; } Property Value String FieldInternalName Gets or sets the field internal name specified in the field link. Declaration string FieldInternalName { get; set; } Property Value String Hidden Gets or sets a Boolean value that specifies whether the field is displayed in forms that can be edited. Declaration bool Hidden { get; set; } Property Value Boolean Id Gets a value that specifies the GUID of the FieldLink. Declaration Guid Id { get; } Property Value Guid Name Gets a value that specifies the name of the FieldLink. Declaration string Name { get; } Property Value String ReadOnly Gets or sets whether the field is read-only. Declaration bool ReadOnly { get; set; } Property Value Boolean Required Gets or sets whether the field is required. Declaration bool Required { get; set; } Property Value Boolean ShowInDisplayForm Gets or sets whether the field should be shown in display form. Declaration bool ShowInDisplayForm { get; set; } Property Value Boolean Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFieldLinkCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFieldLinkCollection.html",
    "title": "Interface IFieldLinkCollection | PnP Core SDK",
    "keywords": "Interface IFieldLinkCollection Public interface to define a collection of FieldLink objects of SharePoint Online Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFieldLinkCollection : IQueryable<IFieldLink>, IDataModelCollection<IFieldLink>, IEnumerable<IFieldLink>, IDataModelParent, IDataModelWithContext, IRequestableCollection Methods Add(String, String, Boolean, Boolean, Boolean, Boolean) Adds a field link Declaration IFieldLink Add(string fieldInternalName, string displayName = null, bool hidden = false, bool required = false, bool readOnly = false, bool showInDisplayForm = true) Parameters String fieldInternalName Internal name of the field String displayName Display name of the field Boolean hidden Field is hidden Boolean required Field is required Boolean readOnly Field is read only Boolean showInDisplayForm Show the field in the display form Returns IFieldLink Added field link AddAsync(String, String, Boolean, Boolean, Boolean, Boolean) Adds a field link Declaration Task<IFieldLink> AddAsync(string fieldInternalName, string displayName = null, bool hidden = false, bool required = false, bool readOnly = false, bool showInDisplayForm = true) Parameters String fieldInternalName Internal name of the field String displayName Display name of the field Boolean hidden Field is hidden Boolean required Field is required Boolean readOnly Field is read only Boolean showInDisplayForm Show the field in the display form Returns Task < IFieldLink > Added field link AddBatch(Batch, String, String, Boolean, Boolean, Boolean, Boolean) Adds a field link via a batch Declaration IFieldLink AddBatch(Batch batch, string fieldInternalName, string displayName = null, bool hidden = false, bool required = false, bool readOnly = false, bool showInDisplayForm = true) Parameters Batch batch Batcht to add this request to String fieldInternalName Internal name of the field String displayName Display name of the field Boolean hidden Field is hidden Boolean required Field is required Boolean readOnly Field is read only Boolean showInDisplayForm Show the field in the display form Returns IFieldLink Added field link AddBatch(String, String, Boolean, Boolean, Boolean, Boolean) Adds a field link via a batch Declaration IFieldLink AddBatch(string fieldInternalName, string displayName = null, bool hidden = false, bool required = false, bool readOnly = false, bool showInDisplayForm = true) Parameters String fieldInternalName Internal name of the field String displayName Display name of the field Boolean hidden Field is hidden Boolean required Field is required Boolean readOnly Field is read only Boolean showInDisplayForm Show the field in the display form Returns IFieldLink Added field link AddBatchAsync(Batch, String, String, Boolean, Boolean, Boolean, Boolean) Adds a field link via a batch Declaration Task<IFieldLink> AddBatchAsync(Batch batch, string fieldInternalName, string displayName = null, bool hidden = false, bool required = false, bool readOnly = false, bool showInDisplayForm = true) Parameters Batch batch Batcht to add this request to String fieldInternalName Internal name of the field String displayName Display name of the field Boolean hidden Field is hidden Boolean required Field is required Boolean readOnly Field is read only Boolean showInDisplayForm Show the field in the display form Returns Task < IFieldLink > Added field link AddBatchAsync(String, String, Boolean, Boolean, Boolean, Boolean) Adds a field link via a batch Declaration Task<IFieldLink> AddBatchAsync(string fieldInternalName, string displayName = null, bool hidden = false, bool required = false, bool readOnly = false, bool showInDisplayForm = true) Parameters String fieldInternalName Internal name of the field String displayName Display name of the field Boolean hidden Field is hidden Boolean required Field is required Boolean readOnly Field is read only Boolean showInDisplayForm Show the field in the display form Returns Task < IFieldLink > Added field link Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.IFile.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFile.html",
    "title": "Interface IFile | PnP Core SDK",
    "keywords": "Interface IFile Public interface to define a File object Inherited Members IDataModel<IFile>.HasValue(String) IDataModel<IFile>.HasChanged(String) IDataModel<IFile>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IFile>.GetBatchAsync(Batch, Expression<Func<IFile, Object>>[]) IDataModelGet<IFile>.GetBatchAsync(Expression<Func<IFile, Object>>[]) IDataModelGet<IFile>.GetBatch(Batch, Expression<Func<IFile, Object>>[]) IDataModelGet<IFile>.GetBatch(Expression<Func<IFile, Object>>[]) IDataModelGet<IFile>.GetAsync(Expression<Func<IFile, Object>>[]) IDataModelGet<IFile>.GetAsync(ApiResponse, Expression<Func<IFile, Object>>[]) IDataModelGet<IFile>.Get(Expression<Func<IFile, Object>>[]) IDataModelGet<IFile>.Get(ApiResponse, Expression<Func<IFile, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFile : IDataModel<IFile>, IDataModelParent, IDataModelWithContext, IDataModelGet<IFile>, IDataModelGet, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties Author Gets a value that specifies the user who added the file. Declaration ISharePointUser Author { get; } Property Value ISharePointUser CheckedOutByUser Gets a value that returns the user who has checked out the file. Declaration ISharePointUser CheckedOutByUser { get; } Property Value ISharePointUser CheckInComment Gets a value that returns the comment used when a document is checked into a document library. Declaration string CheckInComment { get; } Property Value String CheckOutType Gets a value that specifies the type of check out associated with the file. Declaration CheckOutType CheckOutType { get; } Property Value CheckOutType ContentTag Returns internal version of content, used to validate document equality for read purposes. Declaration string ContentTag { get; } Property Value String CustomizedPageStatus Gets a value that specifies the customization status of the file. Declaration CustomizedPageStatus CustomizedPageStatus { get; } Property Value CustomizedPageStatus EffectiveInformationRightsManagementSettings Gets the Information Rights Management settings of the file. Declaration IEffectiveInformationRightsManagementSettings EffectiveInformationRightsManagementSettings { get; } Property Value IEffectiveInformationRightsManagementSettings ETag Gets a value that specifies the ETag value. Declaration string ETag { get; } Property Value String Exists Gets a value that specifies whether the file exists. Declaration bool Exists { get; } Property Value Boolean InformationRightsManagementSettings Gets the Information Rights Management settings of the file. Declaration IInformationRightsManagementFileSettings InformationRightsManagementSettings { get; } Property Value IInformationRightsManagementFileSettings IrmEnabled Gets or sets whether Irm is enabled on the file. Declaration bool IrmEnabled { get; set; } Property Value Boolean LinkingUri Gets the linking URI of the file. Declaration string LinkingUri { get; } Property Value String LinkingUrl Gets the linking URL of the file. Declaration string LinkingUrl { get; } Property Value String ListId Gets the id of the list containing the file. Declaration Guid ListId { get; } Property Value Guid ListItemAllFields Gets a value that specifies the list item field values for the list item corresponding to the file. Declaration IListItem ListItemAllFields { get; } Property Value IListItem LockedByUser Gets a value that returns the user who has locked the file. Declaration ISharePointUser LockedByUser { get; } Property Value ISharePointUser MajorVersion Gets a value that specifies the major version of the file. Declaration int MajorVersion { get; } Property Value Int32 MinorVersion Gets a value that specifies the minor version of the file. Declaration int MinorVersion { get; } Property Value Int32 ModifiedBy Gets a value that returns the last user who has modified the file. Declaration ISharePointUser ModifiedBy { get; } Property Value ISharePointUser Name Gets the name of the file including the extension. Declaration string Name { get; } Property Value String PageRenderType Gets the list page render type of the file. Declaration ListPageRenderType PageRenderType { get; } Property Value ListPageRenderType Properties Gets the properties of the file. Declaration IPropertyValues Properties { get; } Property Value IPropertyValues ServerRelativeUrl Gets the relative URL of the file based on the URL for the server. Declaration string ServerRelativeUrl { get; } Property Value String SiteId Gets the Id of the Site collection in which the file is stored. Declaration Guid SiteId { get; } Property Value Guid TimeCreated Gets a value that specifies when the file was created. Declaration DateTime TimeCreated { get; } Property Value DateTime TimeLastModified Gets a value that specifies when the file was last modified. Declaration DateTime TimeLastModified { get; } Property Value DateTime Title Gets a value that specifies the display name of the file. Declaration string Title { get; } Property Value String UIVersion Gets a value that specifies the implementation-specific version identifier of the file. Declaration int UIVersion { get; } Property Value Int32 UIVersionLabel Gets a value that specifies the implementation-specific version identifier of the file. Declaration string UIVersionLabel { get; } Property Value String UniqueId Gets the unique Id of the file. Declaration Guid UniqueId { get; } Property Value Guid VersionEvents Gets a value that returns a collection of file version event objects that represent the version events of the file. Declaration List<IFileVersionEvent> VersionEvents { get; } Property Value PnP.Core.Model.SharePoint.List < IFileVersionEvent > Versions Gets a value that returns a collection of file version objects that represent the versions of the file. Declaration List<IFileVersion> Versions { get; } Property Value PnP.Core.Model.SharePoint.List < IFileVersion > WebId Gets the Id of the site in which the file is stored. Declaration Guid WebId { get; } Property Value Guid Methods Checkin(String, CheckinType) Checks in the file. The check in comment. The type of check in to use. Declaration void Checkin(string comment = null, CheckinType checkinType = default(CheckinType)) Parameters String comment CheckinType checkinType CheckinAsync(String, CheckinType) Checks in the file. The check in comment. The type of check in to use. Declaration Task CheckinAsync(string comment = null, CheckinType checkinType = default(CheckinType)) Parameters String comment CheckinType checkinType Returns Task CheckinBatch(Batch, String, CheckinType) Checks in the file. The check in comment. The type of check in to use. The batch instance to use. Declaration void CheckinBatch(Batch batch, string comment = null, CheckinType checkinType = default(CheckinType)) Parameters Batch batch String comment CheckinType checkinType CheckinBatch(String, CheckinType) Checks in the file. The check in comment. The type of check in to use. Declaration void CheckinBatch(string comment = null, CheckinType checkinType = default(CheckinType)) Parameters String comment CheckinType checkinType CheckinBatchAsync(Batch, String, CheckinType) Checks in the file. The check in comment. The type of check in to use. The batch instance to use. Declaration Task CheckinBatchAsync(Batch batch, string comment = null, CheckinType checkinType = default(CheckinType)) Parameters Batch batch String comment CheckinType checkinType Returns Task CheckinBatchAsync(String, CheckinType) Checks in the file. The check in comment. The type of check in to use. Declaration Task CheckinBatchAsync(string comment = null, CheckinType checkinType = default(CheckinType)) Parameters String comment CheckinType checkinType Returns Task Checkout() Checks out the file. Declaration void Checkout() CheckoutAsync() Checks out the file. Declaration Task CheckoutAsync() Returns Task CheckoutBatch() Checks out the file. Declaration void CheckoutBatch() CheckoutBatch(Batch) Checks out the file. The batch instance to use. Declaration void CheckoutBatch(Batch batch) Parameters Batch batch CheckoutBatchAsync() Checks out the file. Declaration Task CheckoutBatchAsync() Returns Task CheckoutBatchAsync(Batch) Checks out the file. The batch instance to use. Declaration Task CheckoutBatchAsync(Batch batch) Parameters Batch batch Returns Task CopyTo(String, Boolean, MoveCopyOptions) Copies a file to the destination URL. Declaration void CopyTo(string destinationUrl, bool overwrite = false, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. Boolean overwrite Indicates whether the file should be overwritten if already existing. MoveCopyOptions options Options of the copy operation. CopyToAsync(String, Boolean, MoveCopyOptions) Copies a file to the destination URL. Declaration Task CopyToAsync(string destinationUrl, bool overwrite = false, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. Boolean overwrite Indicates whether the file should be overwritten if already existing. MoveCopyOptions options Options of the copy operation. Returns Task CopyToBatch(Batch, String, Boolean, MoveCopyOptions) Copies a file to the destination URL. Declaration void CopyToBatch(Batch batch, string destinationUrl, bool overwrite = false, MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL including file name. Boolean overwrite Indicates whether the file should be overwritten if already existing. MoveCopyOptions options Options of the copy operation. CopyToBatch(String, Boolean, MoveCopyOptions) Copies a file to the destination URL. Declaration void CopyToBatch(string destinationUrl, bool overwrite = false, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. Boolean overwrite Indicates whether the file should be overwritten if already existing. MoveCopyOptions options Options of the copy operation. CopyToBatchAsync(Batch, String, Boolean, MoveCopyOptions) Copies a file to the destination URL. Declaration Task CopyToBatchAsync(Batch batch, string destinationUrl, bool overwrite = false, MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL including file name. Boolean overwrite Indicates whether the file should be overwritten if already existing. MoveCopyOptions options Options of the copy operation. Returns Task CopyToBatchAsync(String, Boolean, MoveCopyOptions) Copies a file to the destination URL. Declaration Task CopyToBatchAsync(string destinationUrl, bool overwrite = false, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. Boolean overwrite Indicates whether the file should be overwritten if already existing. MoveCopyOptions options Options of the copy operation. Returns Task GetContent() Get the content of the file. Declaration Stream GetContent() Returns Stream Stream containing the binary content of the file GetContentAsync() Get the content of the file. Declaration Task<Stream> GetContentAsync() Returns Task < Stream > Stream containing the binary content of the file GetContentBytes() Get the content of the file. Declaration byte[] GetContentBytes() Returns Byte [] The binary content of the file GetContentBytesAsync() Get the content of the file. Declaration Task<byte[]> GetContentBytesAsync() Returns Task < Byte []> The binary content of the file MoveTo(String, MoveOperations, MoveCopyOptions) Move a file to the destination URL. Declaration void MoveTo(string destinationUrl, MoveOperations moveOperations = default(MoveOperations), MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. MoveOperations moveOperations combinable flags to indicate the type of move operations. MoveCopyOptions options Options of the move operation. MoveToAsync(String, MoveOperations, MoveCopyOptions) Move a file to the destination URL. Declaration Task MoveToAsync(string destinationUrl, MoveOperations moveOperations = default(MoveOperations), MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. MoveOperations moveOperations combinable flags to indicate the type of move operations. MoveCopyOptions options Options of the move operation. Returns Task MoveToBatch(Batch, String, MoveOperations, MoveCopyOptions) Move a file to the destination URL. Declaration void MoveToBatch(Batch batch, string destinationUrl, MoveOperations moveOperations = default(MoveOperations), MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL including file name. MoveOperations moveOperations combinable flags to indicate the type of move operations. MoveCopyOptions options Options of the move operation. MoveToBatch(String, MoveOperations, MoveCopyOptions) Move a file to the destination URL. Declaration void MoveToBatch(string destinationUrl, MoveOperations moveOperations = default(MoveOperations), MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. MoveOperations moveOperations combinable flags to indicate the type of move operations. MoveCopyOptions options Options of the move operation. MoveToBatchAsync(Batch, String, MoveOperations, MoveCopyOptions) Move a file to the destination URL. Declaration Task MoveToBatchAsync(Batch batch, string destinationUrl, MoveOperations moveOperations = default(MoveOperations), MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL including file name. MoveOperations moveOperations combinable flags to indicate the type of move operations. MoveCopyOptions options Options of the move operation. Returns Task MoveToBatchAsync(String, MoveOperations, MoveCopyOptions) Move a file to the destination URL. Declaration Task MoveToBatchAsync(string destinationUrl, MoveOperations moveOperations = default(MoveOperations), MoveCopyOptions options = null) Parameters String destinationUrl The destination URL including file name. MoveOperations moveOperations combinable flags to indicate the type of move operations. MoveCopyOptions options Options of the move operation. Returns Task Publish(String) Publish a major version of the current file. The comments to add on file publishing. Declaration void Publish(string comment = null) Parameters String comment PublishAsync(String) Publish a major version of the current file. The comments to add on file publishing. Declaration Task PublishAsync(string comment = null) Parameters String comment Returns Task PublishBatch(Batch, String) Publish a major version of the current file. The batch instance to use. The comments to add on file publishing. Declaration void PublishBatch(Batch batch, string comment = null) Parameters Batch batch String comment PublishBatch(String) Publish a major version of the current file. The comments to add on file publishing. Declaration void PublishBatch(string comment = null) Parameters String comment PublishBatchAsync(Batch, String) Publish a major version of the current file. The batch instance to use. The comments to add on file publishing. Declaration Task PublishBatchAsync(Batch batch, string comment = null) Parameters Batch batch String comment Returns Task PublishBatchAsync(String) Publish a major version of the current file. The comments to add on file publishing. Declaration Task PublishBatchAsync(string comment = null) Parameters String comment Returns Task Recycle() Send the file to recycle bin. Declaration Guid Recycle() Returns Guid The Id of the created recycle bin item RecycleAsync() Send the file to recycle bin. Declaration Task<Guid> RecycleAsync() Returns Task < Guid > The Id of the created recycle bin item RecycleBatch() Send the file to recycle bin. Declaration void RecycleBatch() RecycleBatch(Batch) Send the file to recycle bin Declaration void RecycleBatch(Batch batch) Parameters Batch batch The batch instance to use. RecycleBatchAsync() Send the file to recycle bin. Declaration Task RecycleBatchAsync() Returns Task RecycleBatchAsync(Batch) Send the file to recycle bin. Declaration Task RecycleBatchAsync(Batch batch) Parameters Batch batch The batch instance to use. Returns Task UndoCheckout() Release the checked out file without saving the changes. Declaration void UndoCheckout() UndoCheckoutAsync() Release the checked out file without saving the changes. Declaration Task UndoCheckoutAsync() Returns Task UndoCheckoutBatch() Release the checked out file without saving the changes. Declaration void UndoCheckoutBatch() UndoCheckoutBatch(Batch) Release the checked out file without saving the changes. The batch instance to use. Declaration void UndoCheckoutBatch(Batch batch) Parameters Batch batch UndoCheckoutBatchAsync() Release the checked out file without saving the changes. Declaration Task UndoCheckoutBatchAsync() Returns Task UndoCheckoutBatchAsync(Batch) Release the checked out file without saving the changes. The batch instance to use. Declaration Task UndoCheckoutBatchAsync(Batch batch) Parameters Batch batch Returns Task Unpublish(String) Unpublish the latest major version of the current file. The comments to add on file unpublishing. Declaration void Unpublish(string comment = null) Parameters String comment UnpublishAsync(String) Unpublish the latest major version of the current file. The comments to add on file unpublishing. Declaration Task UnpublishAsync(string comment = null) Parameters String comment Returns Task UnpublishBatch(Batch, String) Unpublish the latest major version of the current file. The batch instance to use. The comments to add on file unpublishing. Declaration void UnpublishBatch(Batch batch, string comment = null) Parameters Batch batch String comment UnpublishBatch(String) Unpublish the latest major version of the current file. The comments to add on file unpublishing. Declaration void UnpublishBatch(string comments = null) Parameters String comments UnpublishBatchAsync(Batch, String) Unpublish the latest major version of the current file. The batch instance to use. The comments to add on file unpublishing. Declaration Task UnpublishBatchAsync(Batch batch, string comment = null) Parameters Batch batch String comment Returns Task UnpublishBatchAsync(String) Unpublish the latest major version of the current file. The comments to add on file unpublishing. Declaration Task UnpublishBatchAsync(string comment = null) Parameters String comment Returns Task Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFileCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFileCollection.html",
    "title": "Interface IFileCollection | PnP Core SDK",
    "keywords": "Interface IFileCollection Public interface to define a collection of File objects Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFileCollection : IQueryable<IFile>, IDataModelCollection<IFile>, IEnumerable<IFile>, IDataModelParent, IDataModelWithContext, IRequestableCollection Methods Add(String, Stream, Boolean) Add a file to the file collection using batching (sync) Declaration IFile Add(string name, Stream content, bool overwrite = false) Parameters String name The name of the file. Stream content The content of the file. Boolean overwrite Indicates whether the file should be overwritten if already existing. Returns IFile The added file object. AddAsync(String, Stream, Boolean) Add a file to the file collection using batching (async) Declaration Task<IFile> AddAsync(string name, Stream content, bool overwrite = false) Parameters String name The name of the file. Stream content The content of the file. Boolean overwrite Indicates whether the file should be overwritten if already existing. Returns Task < IFile > The added file object. Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.IFileVersion.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFileVersion.html",
    "title": "Interface IFileVersion | PnP Core SDK",
    "keywords": "Interface IFileVersion Public interface to define a FileVersion object Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFileVersion : IComplexType Properties CheckInComment Gets a value that specifies the check-in comment. Declaration string CheckInComment { get; } Property Value String Created Gets a value that specifies the creation date and time for the file version. Declaration DateTime Created { get; } Property Value DateTime ID Gets the internal identifier for the file version. Declaration int ID { get; } Property Value Int32 IsCurrentVersion Gets a value that specifies whether the file version is the current version. Declaration bool IsCurrentVersion { get; } Property Value Boolean Size Gets the size of this version of the file. Declaration int Size { get; } Property Value Int32 Url Gets a value that specifies the relative URL of the file version based on the URL for the site or subsite. Declaration string Url { get; } Property Value String VersionLabel Gets a value that specifies the implementation specific identifier of the file. Declaration string VersionLabel { get; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFileVersionEvent.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFileVersionEvent.html",
    "title": "Interface IFileVersionEvent | PnP Core SDK",
    "keywords": "Interface IFileVersionEvent Public interface to define a FileVersionEvent object Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFileVersionEvent : IComplexType Properties Editor Gets the editor of this version of the file. Declaration string Editor { get; } Property Value String EditorEmail Gets the e-mail address of the editor of this version of the file. Declaration string EditorEmail { get; set; } Property Value String Time Gets the time of this version of the file. Declaration DateTime Time { get; set; } Property Value DateTime Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFolder.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFolder.html",
    "title": "Interface IFolder | PnP Core SDK",
    "keywords": "Interface IFolder Public interface to define a Folder object Inherited Members IDataModel<IFolder>.HasValue(String) IDataModel<IFolder>.HasChanged(String) IDataModel<IFolder>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IFolder>.GetBatchAsync(Batch, Expression<Func<IFolder, Object>>[]) IDataModelGet<IFolder>.GetBatchAsync(Expression<Func<IFolder, Object>>[]) IDataModelGet<IFolder>.GetBatch(Batch, Expression<Func<IFolder, Object>>[]) IDataModelGet<IFolder>.GetBatch(Expression<Func<IFolder, Object>>[]) IDataModelGet<IFolder>.GetAsync(Expression<Func<IFolder, Object>>[]) IDataModelGet<IFolder>.GetAsync(ApiResponse, Expression<Func<IFolder, Object>>[]) IDataModelGet<IFolder>.Get(Expression<Func<IFolder, Object>>[]) IDataModelGet<IFolder>.Get(ApiResponse, Expression<Func<IFolder, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFolder : IDataModel<IFolder>, IDataModelParent, IDataModelWithContext, IDataModelGet<IFolder>, IDataModelGet, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties Exists Gets whether the folder exists, Declaration bool Exists { get; } Property Value Boolean Files Gets the collection of files contained in the folder Declaration IFileCollection Files { get; } Property Value IFileCollection Folders Gets the collection of list folders contained in the list folder. Declaration IFolderCollection Folders { get; } Property Value IFolderCollection IsWOPIEnabled Gets whether is WOPI enabled. Declaration bool IsWOPIEnabled { get; } Property Value Boolean ItemCount Gets a value that specifies the count of items in the list folder. Declaration int ItemCount { get; } Property Value Int32 ListItemAllFields Gets the list item field values for the list item corresponding to the file. Declaration IListItem ListItemAllFields { get; } Property Value IListItem Name Gets the name of the folder. Declaration string Name { get; } Property Value String ParentFolder Gets the parent list folder of the folder. Declaration IFolder ParentFolder { get; } Property Value IFolder ProgID Gets the ProdId of the folder. Declaration string ProgID { get; } Property Value String Properties Gets the collection of all files contained in the folder. Declaration IPropertyValues Properties { get; } Property Value IPropertyValues ServerRelativeUrl Gets the server-relative URL of the list folder. Declaration string ServerRelativeUrl { get; } Property Value String StorageMetrics Get the storage metrics of the folder. Declaration IStorageMetrics StorageMetrics { get; } Property Value IStorageMetrics TimeCreated Gets the creation time of the folder. Declaration DateTime TimeCreated { get; } Property Value DateTime TimeLastModified Gets the last modification time of the folder. Declaration DateTime TimeLastModified { get; } Property Value DateTime UniqueId Gets the Unique Id of the folder. Declaration Guid UniqueId { get; } Property Value Guid WelcomePage Gets or sets a value that specifies folder-relative URL for the list folder welcome page. Declaration string WelcomePage { get; set; } Property Value String Methods AddFolder(String) Add a folder to the current folder. Declaration IFolder AddFolder(string name) Parameters String name The name of the folder to add. Returns IFolder The added folder. AddFolderAsync(String) Add a folder to the current folder. Declaration Task<IFolder> AddFolderAsync(string name) Parameters String name The name of the folder to add. Returns Task < IFolder > The added folder. AddFolderBatch(Batch, String) Add a folder to the current folder via batch. Declaration IFolder AddFolderBatch(Batch batch, string name) Parameters Batch batch Batch to add the reques to String name The name of the folder to add. Returns IFolder The added folder. AddFolderBatch(String) Add a folder to the current folder via batch. Declaration IFolder AddFolderBatch(string name) Parameters String name The name of the folder to add. Returns IFolder The added folder. AddFolderBatchAsync(Batch, String) Add a folder to the current folder via batch. Declaration Task<IFolder> AddFolderBatchAsync(Batch batch, string name) Parameters Batch batch Batch to add the reques to String name The name of the folder to add. Returns Task < IFolder > The added folder. AddFolderBatchAsync(String) Add a folder to the current folder via batch. Declaration Task<IFolder> AddFolderBatchAsync(string name) Parameters String name The name of the folder to add. Returns Task < IFolder > The added folder. CopyTo(String, MoveCopyOptions) Copies a folder to the destination URL. Declaration void CopyTo(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the copy operation. CopyToAsync(String, MoveCopyOptions) Copies a folder to the destination URL. Declaration Task CopyToAsync(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the copy operation. Returns Task CopyToBatch(Batch, String, MoveCopyOptions) Copies a folder to the destination URL. Declaration void CopyToBatch(Batch batch, string destinationUrl, MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL. MoveCopyOptions options options of the copy operation. CopyToBatch(String, MoveCopyOptions) Copies a folder to the destination URL. Declaration void CopyToBatch(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the copy operation. CopyToBatchAsync(Batch, String, MoveCopyOptions) Copies a folder to the destination URL. Declaration Task CopyToBatchAsync(Batch batch, string destinationUrl, MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL. MoveCopyOptions options options of the copy operation. Returns Task CopyToBatchAsync(String, MoveCopyOptions) Copies a folder to the destination URL. Declaration Task CopyToBatchAsync(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the copy operation. Returns Task MoveTo(String, MoveCopyOptions) Moves a folder to the destination URL. Declaration void MoveTo(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the move operation. MoveToAsync(String, MoveCopyOptions) Moves a folder to the destination URL. Declaration Task MoveToAsync(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the move operation. Returns Task MoveToBatch(Batch, String, MoveCopyOptions) Moves a folder to the destination URL. Declaration void MoveToBatch(Batch batch, string destinationUrl, MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL. MoveCopyOptions options options of the move operation. MoveToBatch(String, MoveCopyOptions) Moves a folder to the destination URL. Declaration void MoveToBatch(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the move operation. MoveToBatchAsync(Batch, String, MoveCopyOptions) Moves a folder to the destination URL. Declaration Task MoveToBatchAsync(Batch batch, string destinationUrl, MoveCopyOptions options = null) Parameters Batch batch The batch instance to use. String destinationUrl The destination URL. MoveCopyOptions options options of the move operation. Returns Task MoveToBatchAsync(String, MoveCopyOptions) Moves a folder to the destination URL. Declaration Task MoveToBatchAsync(string destinationUrl, MoveCopyOptions options = null) Parameters String destinationUrl The destination URL. MoveCopyOptions options options of the move operation. Returns Task Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IFolderCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IFolderCollection.html",
    "title": "Interface IFolderCollection | PnP Core SDK",
    "keywords": "Interface IFolderCollection Public interface to define a collection of Folder objects Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IFolderCollection : IQueryable<IFolder>, IDataModelCollection<IFolder>, IEnumerable<IFolder>, IDataModelParent, IDataModelWithContext, IRequestableCollection Methods Add(String) Add a folder Declaration IFolder Add(string name) Parameters String name The name of the folder to add Returns IFolder The newly added folder AddAsync(String) Add a folder Declaration Task<IFolder> AddAsync(string name) Parameters String name The name of the folder to add Returns Task < IFolder > The newly added folder AddBatch(Batch, String) Add a folder using a specific batch instance Declaration IFolder AddBatch(Batch batch, string name) Parameters Batch batch The batch instance to use String name The name of the folder to add Returns IFolder The newly added folder AddBatch(String) Add a folder Declaration IFolder AddBatch(string name) Parameters String name The name of the folder to add Returns IFolder The newly added folder AddBatchAsync(Batch, String) Add a folder using a specific batch instance Declaration Task<IFolder> AddBatchAsync(Batch batch, string name) Parameters Batch batch The batch instance to use String name The name of the folder to add Returns Task < IFolder > The newly added folder AddBatchAsync(String) Add a folder Declaration Task<IFolder> AddBatchAsync(string name) Parameters String name The name of the folder to add Returns Task < IFolder > The newly added folder Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.IInformationRightsManagementFileSettings.html": {
    "href": "api/PnP.Core.Model.SharePoint.IInformationRightsManagementFileSettings.html",
    "title": "Interface IInformationRightsManagementFileSettings | PnP Core SDK",
    "keywords": "Interface IInformationRightsManagementFileSettings Public interface to define a InformationRightsManagementFileSettings object Inherited Members IDataModel<IInformationRightsManagementFileSettings>.HasValue(String) IDataModel<IInformationRightsManagementFileSettings>.HasChanged(String) IDataModel<IInformationRightsManagementFileSettings>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IInformationRightsManagementFileSettings>.GetBatchAsync(Batch, Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) IDataModelGet<IInformationRightsManagementFileSettings>.GetBatchAsync(Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) IDataModelGet<IInformationRightsManagementFileSettings>.GetBatch(Batch, Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) IDataModelGet<IInformationRightsManagementFileSettings>.GetBatch(Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) IDataModelGet<IInformationRightsManagementFileSettings>.GetAsync(Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) IDataModelGet<IInformationRightsManagementFileSettings>.GetAsync(ApiResponse, Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) IDataModelGet<IInformationRightsManagementFileSettings>.Get(Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) IDataModelGet<IInformationRightsManagementFileSettings>.Get(ApiResponse, Expression<Func<IInformationRightsManagementFileSettings, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IInformationRightsManagementFileSettings : IDataModel<IInformationRightsManagementFileSettings>, IDataModelParent, IDataModelWithContext, IDataModelGet<IInformationRightsManagementFileSettings>, IDataModelGet Properties AllowPrint Gets or sets whether print is allowed for this file. Declaration bool AllowPrint { get; set; } Property Value Boolean AllowScript Gets or sets whether script is alloed for this file. Declaration bool AllowScript { get; set; } Property Value Boolean AllowWriteCopy Gets or sets whether writing copy is allowed for this file. Declaration bool AllowWriteCopy { get; set; } Property Value Boolean DisableDocumentBrowserView Gets or sets whether document browser view is disabled for this file. Declaration bool DisableDocumentBrowserView { get; set; } Property Value Boolean DocumentAccessExpireDays Gets or sets the access expiry in days for this file. Declaration int DocumentAccessExpireDays { get; set; } Property Value Int32 EnableDocumentAccessExpire Gets or sets access expiry for this file. Declaration bool EnableDocumentAccessExpire { get; set; } Property Value Boolean EnableDocumentBrowserPublishingView Gets or sets whether document browser publishing view is enabled for this file. Declaration bool EnableDocumentBrowserPublishingView { get; set; } Property Value Boolean EnableGroupProtection Gets or sets whether group protection is enabled on this file. Declaration bool EnableGroupProtection { get; set; } Property Value Boolean EnableLicenseCacheExpire Gets or sets whether license cache expiry is enabled on this file. Declaration bool EnableLicenseCacheExpire { get; set; } Property Value Boolean GroupName Gets or sets the IRM group name of the file. Declaration string GroupName { get; set; } Property Value String IrmEnabled Gets or sets whether IRM is enabled on this file. Declaration bool IrmEnabled { get; set; } Property Value Boolean LicenseCacheExpireDays Gets or sets the license cache expiry in days for this file. Declaration int LicenseCacheExpireDays { get; set; } Property Value Int32 PolicyDescription Gets or sets the policy description for this file. Declaration string PolicyDescription { get; set; } Property Value String PolicyTitle Gets or sets the policy title for this file. Declaration string PolicyTitle { get; set; } Property Value String TemplateId Gets or sets the IRM template id for this file. Declaration string TemplateId { get; set; } Property Value String Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IInformationRightsManagementSettings.html": {
    "href": "api/PnP.Core.Model.SharePoint.IInformationRightsManagementSettings.html",
    "title": "Interface IInformationRightsManagementSettings | PnP Core SDK",
    "keywords": "Interface IInformationRightsManagementSettings Public interface to define a InformationRightsManagementSettings object Inherited Members IDataModel<IInformationRightsManagementSettings>.HasValue(String) IDataModel<IInformationRightsManagementSettings>.HasChanged(String) IDataModel<IInformationRightsManagementSettings>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IInformationRightsManagementSettings>.GetBatchAsync(Batch, Expression<Func<IInformationRightsManagementSettings, Object>>[]) IDataModelGet<IInformationRightsManagementSettings>.GetBatchAsync(Expression<Func<IInformationRightsManagementSettings, Object>>[]) IDataModelGet<IInformationRightsManagementSettings>.GetBatch(Batch, Expression<Func<IInformationRightsManagementSettings, Object>>[]) IDataModelGet<IInformationRightsManagementSettings>.GetBatch(Expression<Func<IInformationRightsManagementSettings, Object>>[]) IDataModelGet<IInformationRightsManagementSettings>.GetAsync(Expression<Func<IInformationRightsManagementSettings, Object>>[]) IDataModelGet<IInformationRightsManagementSettings>.GetAsync(ApiResponse, Expression<Func<IInformationRightsManagementSettings, Object>>[]) IDataModelGet<IInformationRightsManagementSettings>.Get(Expression<Func<IInformationRightsManagementSettings, Object>>[]) IDataModelGet<IInformationRightsManagementSettings>.Get(ApiResponse, Expression<Func<IInformationRightsManagementSettings, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IInformationRightsManagementSettings : IDataModel<IInformationRightsManagementSettings>, IDataModelParent, IDataModelWithContext, IDataModelGet<IInformationRightsManagementSettings>, IDataModelGet Properties AllowPrint Allow viewers to print the IRM protected Office document Declaration bool AllowPrint { get; set; } Property Value Boolean AllowScript Allow viewers to run script and screen reader to function on the IRM protected Office document Declaration bool AllowScript { get; set; } Property Value Boolean AllowWriteCopy Allow viewers to write on a copy of the downloaded document Declaration bool AllowWriteCopy { get; set; } Property Value Boolean DisableDocumentBrowserView Prevent opening documents in the browser for this Document Library Declaration bool DisableDocumentBrowserView { get; set; } Property Value Boolean DocumentAccessExpireDays After download, document access rights will expire after these number of days (1-365) Declaration int DocumentAccessExpireDays { get; set; } Property Value Int32 DocumentLibraryProtectionExpireDate Stop restricting access to the library at Declaration DateTime DocumentLibraryProtectionExpireDate { get; set; } Property Value DateTime EnableDocumentAccessExpire Enable restricting access to the library at a given date ( DocumentLibraryProtectionExpireDate ) Declaration bool EnableDocumentAccessExpire { get; set; } Property Value Boolean EnableDocumentBrowserPublishingView Prevent opening documents in the browser for this Document Library Declaration bool EnableDocumentBrowserPublishingView { get; set; } Property Value Boolean EnableGroupProtection Allow group protection Declaration bool EnableGroupProtection { get; set; } Property Value Boolean EnableLicenseCacheExpire Enable document access rights expiration. Set the number of days via DocumentAccessExpireDays Declaration bool EnableLicenseCacheExpire { get; set; } Property Value Boolean GroupName Group name used for group protection Declaration string GroupName { get; set; } Property Value String LicenseCacheExpireDays Users must verify their credentials using this interval (days) Declaration int LicenseCacheExpireDays { get; set; } Property Value Int32 PolicyDescription Permission policy description: Declaration string PolicyDescription { get; set; } Property Value String PolicyTitle Permission policy title Declaration string PolicyTitle { get; set; } Property Value String TemplateId IRM template ID (not used?) Declaration string TemplateId { get; set; } Property Value String Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IList.html": {
    "href": "api/PnP.Core.Model.SharePoint.IList.html",
    "title": "Interface IList | PnP Core SDK",
    "keywords": "Interface IList Public interface to define a List object of SharePoint Online Inherited Members IDataModel<IList>.HasValue(String) IDataModel<IList>.HasChanged(String) IDataModel<IList>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IList>.GetBatchAsync(Batch, Expression<Func<IList, Object>>[]) IDataModelGet<IList>.GetBatchAsync(Expression<Func<IList, Object>>[]) IDataModelGet<IList>.GetBatch(Batch, Expression<Func<IList, Object>>[]) IDataModelGet<IList>.GetBatch(Expression<Func<IList, Object>>[]) IDataModelGet<IList>.GetAsync(Expression<Func<IList, Object>>[]) IDataModelGet<IList>.GetAsync(ApiResponse, Expression<Func<IList, Object>>[]) IDataModelGet<IList>.Get(Expression<Func<IList, Object>>[]) IDataModelGet<IList>.Get(ApiResponse, Expression<Func<IList, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IList : IDataModel<IList>, IDataModelParent, IDataModelWithContext, IDataModelGet<IList>, IDataModelGet, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties ContentTypes Collection of content types for this list Declaration IContentTypeCollection ContentTypes { get; } Property Value IContentTypeCollection ContentTypesEnabled Gets or sets whether content types are enabled Declaration bool ContentTypesEnabled { get; set; } Property Value Boolean DefaultDisplayFormUrl Defines a value that specifies the location of the default display form for the list. Declaration string DefaultDisplayFormUrl { get; set; } Property Value String DefaultEditFormUrl Defines a value that specifies the URL of the edit form to use for list items in the list. Declaration string DefaultEditFormUrl { get; set; } Property Value String DefaultNewFormUrl Defines a value that specifies the location of the default new form for the list. Declaration string DefaultNewFormUrl { get; set; } Property Value String Description Gets or sets the description of the list Declaration string Description { get; set; } Property Value String Direction Defines a value that specifies the reading order of the list. Declaration ListReadingDirection Direction { get; set; } Property Value ListReadingDirection DocumentTemplate Gets or sets a value that specifies the identifier of the document template for the new list. Declaration string DocumentTemplate { get; set; } Property Value String DraftVersionVisibility Gets or sets the DraftVersionVisibility for the list Declaration int DraftVersionVisibility { get; set; } Property Value Int32 EnableAttachments Gets or sets whether attachments are enabled. Defaults to true. Declaration bool EnableAttachments { get; set; } Property Value Boolean EnableFolderCreation Gets or sets whether folder is enabled. Defaults to true. Declaration bool EnableFolderCreation { get; set; } Property Value Boolean EnableMinorVersions Gets or sets whether minor verisioning is enabled on the list Declaration bool EnableMinorVersions { get; set; } Property Value Boolean EnableModeration Gets or sets whether moderation/content approval is enabled on the list Declaration bool EnableModeration { get; set; } Property Value Boolean EnableVersioning Gets or sets whether verisioning is enabled on the list Declaration bool EnableVersioning { get; set; } Property Value Boolean FieldDefaults Defines a list of default values for the Fields of the List Instance Declaration Dictionary<string, string> FieldDefaults { get; } Property Value Dictionary < String , String > Fields Collection of fields for this list Declaration IFieldCollection Fields { get; } Property Value IFieldCollection ForceCheckout Gets or sets whether to force checkout of documents in the library Declaration bool ForceCheckout { get; set; } Property Value Boolean Hidden Gets or sets whether to hide the list Declaration bool Hidden { get; set; } Property Value Boolean Id The Unique ID of the List object Declaration Guid Id { get; } Property Value Guid ImageUrl Defines a value that specifies the URI for the icon of the list, optional attribute. Declaration string ImageUrl { get; set; } Property Value String InformationRightsManagementSettings Load the IRM settings of this list Declaration IInformationRightsManagementSettings InformationRightsManagementSettings { get; } Property Value IInformationRightsManagementSettings IrmEnabled Defines if IRM is enabled for this list. Declaration bool IrmEnabled { get; set; } Property Value Boolean IrmExpire Defines if IRM Expire property, optional attribute. Declaration bool IrmExpire { get; set; } Property Value Boolean IrmReject Defines the IRM Reject property, optional attribute. Declaration bool IrmReject { get; set; } Property Value Boolean IsApplicationList Defines a value that specifies a flag that a client application can use to determine whether to display the list, optional attribute. Declaration bool IsApplicationList { get; set; } Property Value Boolean Items Collection of list items in the current List object Declaration IListItemCollection Items { get; } Property Value IListItemCollection ListExperience Defines the current list UI/UX experience (valid for SPO only). Declaration ListExperience ListExperience { get; set; } Property Value ListExperience MaxVersionLimit Gets or sets the MinorVersionLimit for verisioning, just in case it is enabled on the list Declaration int MaxVersionLimit { get; set; } Property Value Int32 MinorVersionLimit Gets or sets the MinorVersionLimit for versioning, just in case it is enabled on the list Declaration int MinorVersionLimit { get; set; } Property Value Int32 NoCrawl Defines if the current list or library has to be included in crawling, optional attribute. Declaration bool NoCrawl { get; set; } Property Value Boolean OnQuickLaunch Gets or sets a value that specifies whether the new list is displayed on the Quick Launch of the site. Declaration bool OnQuickLaunch { get; set; } Property Value Boolean ReadSecurity Defines the Read Security property, optional attribute. Declaration int ReadSecurity { get; set; } Property Value Int32 RootFolder Gets the root folder of the list. Declaration IFolder RootFolder { get; set; } Property Value IFolder TemplateFeatureId Gets or sets the Guid for TemplateFeature Declaration Guid TemplateFeatureId { get; } Property Value Guid TemplateType Gets or sets a value that specifies the list server template of the new list. https://msdn.microsoft.com/en-us/library/office/microsoft.sharepoint.client.listtemplatetype.aspx Declaration ListTemplateType TemplateType { get; } Property Value ListTemplateType Title Gets or sets the list title Declaration string Title { get; set; } Property Value String Url Gets or sets a value that specifies whether the new list is displayed on the Quick Launch of the site. Declaration string Url { get; } Property Value String ValidationFormula Defines a value that specifies the data validation criteria for a list item, optional attribute. Declaration string ValidationFormula { get; set; } Property Value String ValidationMessage Defines a value that specifies the error message returned when data validation fails for a list item, optional attribute. Declaration string ValidationMessage { get; set; } Property Value String WriteSecurity Defines the Write Security property, optional attribute. Declaration int WriteSecurity { get; set; } Property Value Int32 Methods GetItemsByCamlQuery(CamlQueryOptions) Loads list items based up on a CAML query Declaration void GetItemsByCamlQuery(CamlQueryOptions queryOptions) Parameters CamlQueryOptions queryOptions CamlQueryOptions defining the query to execute GetItemsByCamlQuery(String) Loads list items based up on a CAML query Declaration void GetItemsByCamlQuery(string query) Parameters String query query to execute GetItemsByCamlQueryAsync(CamlQueryOptions) Loads list items based up on a CAML query Declaration Task GetItemsByCamlQueryAsync(CamlQueryOptions queryOptions) Parameters CamlQueryOptions queryOptions CamlQueryOptions defining the query to execute Returns Task GetItemsByCamlQueryAsync(String) Loads list items based up on a CAML query Declaration Task GetItemsByCamlQueryAsync(string query) Parameters String query query to execute Returns Task GetItemsByCamlQueryBatch(CamlQueryOptions) Loads list items based up on a CAML query Declaration void GetItemsByCamlQueryBatch(CamlQueryOptions queryOptions) Parameters CamlQueryOptions queryOptions CamlQueryOptions defining the query to execute GetItemsByCamlQueryBatch(Batch, CamlQueryOptions) Loads list items based up on a CAML query Declaration void GetItemsByCamlQueryBatch(Batch batch, CamlQueryOptions queryOptions) Parameters Batch batch Batch to add this request to CamlQueryOptions queryOptions CamlQueryOptions defining the query to execute GetItemsByCamlQueryBatch(Batch, String) Loads list items based up on a CAML query Declaration void GetItemsByCamlQueryBatch(Batch batch, string query) Parameters Batch batch Batch to add this request to String query query to execute GetItemsByCamlQueryBatch(String) Loads list items based up on a CAML query Declaration void GetItemsByCamlQueryBatch(string query) Parameters String query query to execute GetItemsByCamlQueryBatchAsync(CamlQueryOptions) Loads list items based up on a CAML query Declaration Task GetItemsByCamlQueryBatchAsync(CamlQueryOptions queryOptions) Parameters CamlQueryOptions queryOptions CamlQueryOptions defining the query to execute Returns Task GetItemsByCamlQueryBatchAsync(Batch, CamlQueryOptions) Loads list items based up on a CAML query Declaration Task GetItemsByCamlQueryBatchAsync(Batch batch, CamlQueryOptions queryOptions) Parameters Batch batch Batch to add this request to CamlQueryOptions queryOptions CamlQueryOptions defining the query to execute Returns Task GetItemsByCamlQueryBatchAsync(Batch, String) Loads list items based up on a CAML query Declaration Task GetItemsByCamlQueryBatchAsync(Batch batch, string query) Parameters Batch batch Batch to add this request to String query query to execute Returns Task GetItemsByCamlQueryBatchAsync(String) Loads list items based up on a CAML query Declaration Task GetItemsByCamlQueryBatchAsync(string query) Parameters String query query to execute Returns Task GetListDataAsStream(RenderListDataOptions) Loads list items based up on a CAML query and the RenderListDataAsStream API Declaration Dictionary<string, object> GetListDataAsStream(RenderListDataOptions renderOptions) Parameters RenderListDataOptions renderOptions RenderListDataOptions defining the query to execute Returns Dictionary < String , Object > GetListDataAsStreamAsync(RenderListDataOptions) Loads list items based up on a CAML query and the RenderListDataAsStream API Declaration Task<Dictionary<string, object>> GetListDataAsStreamAsync(RenderListDataOptions renderOptions) Parameters RenderListDataOptions renderOptions RenderListDataOptions defining the query to execute Returns Task < Dictionary < String , Object >> RecycleAsync() Moves this list into the site collection recycle bin, returns the recyle bin item id Declaration Task<Guid> RecycleAsync() Returns Task < Guid > Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IListCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IListCollection.html",
    "title": "Interface IListCollection | PnP Core SDK",
    "keywords": "Interface IListCollection Public interface to define a collection of List objects of SharePoint Online Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging<IList>.CanPage ISupportPaging<IList>.GetPagedAsync(Int32, Expression<Func<IList, Object>>[]) ISupportPaging<IList>.GetNextPageAsync() ISupportPaging<IList>.GetAllPagesAsync() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IListCollection : IQueryable<IList>, IDataModelCollection<IList>, IEnumerable<IList>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging<IList> Methods Add(String, ListTemplateType) Adds a new list Declaration IList Add(string title, ListTemplateType templateType) Parameters String title Title of the list ListTemplateType templateType Template type Returns IList Newly added list AddAsync(String, ListTemplateType) Adds a new list Declaration Task<IList> AddAsync(string title, ListTemplateType templateType) Parameters String title Title of the list ListTemplateType templateType Template type Returns Task < IList > Newly added list AddBatch(Batch, String, ListTemplateType) Adds a new list Declaration IList AddBatch(Batch batch, string title, ListTemplateType templateType) Parameters Batch batch Batch to use String title Title of the list ListTemplateType templateType Template type Returns IList Newly added list AddBatch(String, ListTemplateType) Adds a new list Declaration IList AddBatch(string title, ListTemplateType templateType) Parameters String title Title of the list ListTemplateType templateType Template type Returns IList Newly added list AddBatchAsync(Batch, String, ListTemplateType) Adds a new list Declaration Task<IList> AddBatchAsync(Batch batch, string title, ListTemplateType templateType) Parameters Batch batch Batch to use String title Title of the list ListTemplateType templateType Template type Returns Task < IList > Newly added list AddBatchAsync(String, ListTemplateType) Adds a new list Declaration Task<IList> AddBatchAsync(string title, ListTemplateType templateType) Parameters String title Title of the list ListTemplateType templateType Template type Returns Task < IList > Newly added list Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.IListItem.html": {
    "href": "api/PnP.Core.Model.SharePoint.IListItem.html",
    "title": "Interface IListItem | PnP Core SDK",
    "keywords": "Interface IListItem Public interface to define a SharePoint Online list item Inherited Members IDataModel<IListItem>.HasValue(String) IDataModel<IListItem>.HasChanged(String) IDataModel<IListItem>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IListItem>.GetBatchAsync(Batch, Expression<Func<IListItem, Object>>[]) IDataModelGet<IListItem>.GetBatchAsync(Expression<Func<IListItem, Object>>[]) IDataModelGet<IListItem>.GetBatch(Batch, Expression<Func<IListItem, Object>>[]) IDataModelGet<IListItem>.GetBatch(Expression<Func<IListItem, Object>>[]) IDataModelGet<IListItem>.GetAsync(Expression<Func<IListItem, Object>>[]) IDataModelGet<IListItem>.GetAsync(ApiResponse, Expression<Func<IListItem, Object>>[]) IDataModelGet<IListItem>.Get(Expression<Func<IListItem, Object>>[]) IDataModelGet<IListItem>.Get(ApiResponse, Expression<Func<IListItem, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() IExpandoDataModel.Values IExpandoDataModel.AsDynamic() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IListItem : IDataModel<IListItem>, IDataModelParent, IDataModelWithContext, IDataModelGet<IListItem>, IDataModelGet, IDataModelUpdate, IDataModelDelete, IExpandoDataModel, IQueryableDataModel Properties CommentsDisabled Can comments be added to this list item Declaration bool CommentsDisabled { get; set; } Property Value Boolean Id Id of the list item Declaration int Id { get; } Property Value Int32 Title Title value of the list item Declaration string Title { get; set; } Property Value String Methods SystemUpdate() Performs a system update of the list item Declaration void SystemUpdate() SystemUpdateAsync() Performs a system update of the list item Declaration Task SystemUpdateAsync() Returns Task SystemUpdateBatch() Performs a system update of the list item Declaration void SystemUpdateBatch() SystemUpdateBatch(Batch) Performs a system update of the list item Declaration void SystemUpdateBatch(Batch batch) Parameters Batch batch Batch to add the systemupdate request to SystemUpdateBatchAsync() Performs a system update of the list item Declaration Task SystemUpdateBatchAsync() Returns Task SystemUpdateBatchAsync(Batch) Performs a system update of the list item Declaration Task SystemUpdateBatchAsync(Batch batch) Parameters Batch batch Batch to add the systemupdate request to Returns Task UpdateOverwriteVersion() Performs a UpdateOverwriteVersion of the list item Declaration void UpdateOverwriteVersion() UpdateOverwriteVersionAsync() Performs a UpdateOverwriteVersion of the list item Declaration Task UpdateOverwriteVersionAsync() Returns Task UpdateOverwriteVersionBatch() Performs a UpdateOverwriteVersion of the list item Declaration void UpdateOverwriteVersionBatch() UpdateOverwriteVersionBatch(Batch) Performs a UpdateOverwriteVersion of the list item Declaration void UpdateOverwriteVersionBatch(Batch batch) Parameters Batch batch Batch to add the UpdateOverwriteVersion request to UpdateOverwriteVersionBatchAsync() Performs a UpdateOverwriteVersion of the list item Declaration Task UpdateOverwriteVersionBatchAsync() Returns Task UpdateOverwriteVersionBatchAsync(Batch) Performs a UpdateOverwriteVersion of the list item Declaration Task UpdateOverwriteVersionBatchAsync(Batch batch) Parameters Batch batch Batch to add the UpdateOverwriteVersion request to Returns Task Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IListItemCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IListItemCollection.html",
    "title": "Interface IListItemCollection | PnP Core SDK",
    "keywords": "Interface IListItemCollection Public interface to define a collection of ListItem objects of SharePoint Online Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging<IListItem>.CanPage ISupportPaging<IListItem>.GetPagedAsync(Int32, Expression<Func<IListItem, Object>>[]) ISupportPaging<IListItem>.GetNextPageAsync() ISupportPaging<IListItem>.GetAllPagesAsync() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IListItemCollection : IQueryable<IListItem>, IDataModelCollection<IListItem>, IEnumerable<IListItem>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging<IListItem> Methods Add(Dictionary<String, Object>) Adds a new list item Declaration IListItem Add(Dictionary<string, object> values) Parameters Dictionary < String , Object > values Values to add to list item Returns IListItem Newly added list item AddAsync(Dictionary<String, Object>) Adds a new list item Declaration Task<IListItem> AddAsync(Dictionary<string, object> values) Parameters Dictionary < String , Object > values Values to add to list item Returns Task < IListItem > Newly added list item AddBatch(Dictionary<String, Object>) Adds a new list item Declaration IListItem AddBatch(Dictionary<string, object> values) Parameters Dictionary < String , Object > values Values to add to list item Returns IListItem Newly added list item AddBatch(Batch, Dictionary<String, Object>) Adds a new list item Declaration IListItem AddBatch(Batch batch, Dictionary<string, object> values) Parameters Batch batch Batch to use Dictionary < String , Object > values Values to add to list item Returns IListItem Newly added list item AddBatchAsync(Dictionary<String, Object>) Adds a new list item Declaration Task<IListItem> AddBatchAsync(Dictionary<string, object> values) Parameters Dictionary < String , Object > values Values to add to list item Returns Task < IListItem > Newly added list item AddBatchAsync(Batch, Dictionary<String, Object>) Adds a new list item Declaration Task<IListItem> AddBatchAsync(Batch batch, Dictionary<string, object> values) Parameters Batch batch Batch to use Dictionary < String , Object > values Values to add to list item Returns Task < IListItem > Newly added list item Contains(Int32) Checks if the collection contains a listitem with a given id Declaration bool Contains(int id) Parameters Int32 id Id to check for Returns Boolean True if found, false otherwise Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.IPropertyValues.html": {
    "href": "api/PnP.Core.Model.SharePoint.IPropertyValues.html",
    "title": "Interface IPropertyValues | PnP Core SDK",
    "keywords": "Interface IPropertyValues Public interface to define a PropertyValues object Inherited Members IExpandoComplexType.Item[String] IExpandoComplexType.Count IExpandoComplexType.AsDynamic() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IPropertyValues : IExpandoComplexType, IComplexType Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IRecycleBinItem.html": {
    "href": "api/PnP.Core.Model.SharePoint.IRecycleBinItem.html",
    "title": "Interface IRecycleBinItem | PnP Core SDK",
    "keywords": "Interface IRecycleBinItem Public interface to define a RecycleBinItem object Inherited Members IDataModel<IRecycleBinItem>.HasValue(String) IDataModel<IRecycleBinItem>.HasChanged(String) IDataModel<IRecycleBinItem>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IRecycleBinItem>.GetBatchAsync(Batch, Expression<Func<IRecycleBinItem, Object>>[]) IDataModelGet<IRecycleBinItem>.GetBatchAsync(Expression<Func<IRecycleBinItem, Object>>[]) IDataModelGet<IRecycleBinItem>.GetBatch(Batch, Expression<Func<IRecycleBinItem, Object>>[]) IDataModelGet<IRecycleBinItem>.GetBatch(Expression<Func<IRecycleBinItem, Object>>[]) IDataModelGet<IRecycleBinItem>.GetAsync(Expression<Func<IRecycleBinItem, Object>>[]) IDataModelGet<IRecycleBinItem>.GetAsync(ApiResponse, Expression<Func<IRecycleBinItem, Object>>[]) IDataModelGet<IRecycleBinItem>.Get(Expression<Func<IRecycleBinItem, Object>>[]) IDataModelGet<IRecycleBinItem>.Get(ApiResponse, Expression<Func<IRecycleBinItem, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IRecycleBinItem : IDataModel<IRecycleBinItem>, IDataModelParent, IDataModelWithContext, IDataModelGet<IRecycleBinItem>, IDataModelGet, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties Author Gets a value that specifies the user who created the Recycle Bin item. Declaration ISharePointUser Author { get; } Property Value ISharePointUser AuthorEmail Gets the e-mail address of the user who created the recycle bin item. Declaration string AuthorEmail { get; } Property Value String AuthorName Gets the name of the user who created the recycle bin item. Declaration string AuthorName { get; } Property Value String DeletedBy Gets a value that specifies the user who deleted the Recycle Bin item. Declaration ISharePointUser DeletedBy { get; } Property Value ISharePointUser DeletedByEmail Gets the e-mail address of the user who deleted the recycle bin item. Declaration string DeletedByEmail { get; } Property Value String DeletedByName Gets the name of the user who deleted the recycle bin item. Declaration string DeletedByName { get; } Property Value String DeletedDate Gets a value that specifies when the Recycle Bin item was moved to the Recycle Bin. Declaration DateTime DeletedDate { get; } Property Value DateTime DeletedDateLocalFormatted Gets a value that specifies when the Recycle Bin item was moved to the Recycle Bin formatted in the local date. Declaration string DeletedDateLocalFormatted { get; } Property Value String DirName Gets a value that specifies the site relative URL of the list or folder that originally contained the Recycle Bin item. Declaration string DirName { get; } Property Value String Id Gets a value that specifies the identifier of the Recycle Bin item. Declaration Guid Id { get; } Property Value Guid ItemState Gets a value that specifies the Recycle Bin stage of the Recycle Bin item. Declaration RecycleBinItemState ItemState { get; } Property Value RecycleBinItemState ItemType Gets a value that specifies the type of the Recycle Bin item. Declaration RecycleBinItemType ItemType { get; } Property Value RecycleBinItemType LeafName Gets a value that specifies the leaf name of the Recycle Bin item. Declaration string LeafName { get; } Property Value String Size Gets a value that specifies the size of the Recycle Bin item in bytes. Declaration long Size { get; } Property Value Int64 Title Gets a value that specifies the title of the Recycle Bin item. Declaration string Title { get; } Property Value String Methods MoveToSecondStage() Move the recycle bin item to the second stage recycle bin Declaration void MoveToSecondStage() MoveToSecondStageAsync() Move the recycle bin item to the second stage recycle bin Declaration Task MoveToSecondStageAsync() Returns Task MoveToSecondStageBatch() Move the recycle bin item to the second stage recycle bin using the current context batch instance Declaration void MoveToSecondStageBatch() MoveToSecondStageBatch(Batch) Move the recycle bin item to the second stage recycle bin using a specific batch instance The batch instance to use. Declaration void MoveToSecondStageBatch(Batch batch) Parameters Batch batch MoveToSecondStageBatchAsync() Move the recycle bin item to the second stage recycle bin using the current context batch instance Declaration Task MoveToSecondStageBatchAsync() Returns Task MoveToSecondStageBatchAsync(Batch) Move the recycle bin item to the second stage recycle bin using a specific batch instance The batch instance to use. Declaration Task MoveToSecondStageBatchAsync(Batch batch) Parameters Batch batch Returns Task Restore() Restores the recycle bin item to its original location. Declaration void Restore() RestoreAsync() Restores the recycle bin item to its original location. Declaration Task RestoreAsync() Returns Task RestoreBatch() Restores the recycle bin item to its original location using the current context batch instance Declaration void RestoreBatch() RestoreBatch(Batch) Restores the recycle bin item to its original location using a specific batch instance The batch instance to use. Declaration void RestoreBatch(Batch batch) Parameters Batch batch RestoreBatchAsync() Restores the recycle bin item to its original location using the current context batch instance Declaration Task RestoreBatchAsync() Returns Task RestoreBatchAsync(Batch) Restores the recycle bin item to its original location using a specific batch instance The batch instance to use. Declaration Task RestoreBatchAsync(Batch batch) Parameters Batch batch Returns Task Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IRecycleBinItemCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IRecycleBinItemCollection.html",
    "title": "Interface IRecycleBinItemCollection | PnP Core SDK",
    "keywords": "Interface IRecycleBinItemCollection Public interface to define a collection of RecycleBinItem objects Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IRecycleBinItemCollection : IQueryable<IRecycleBinItem>, IDataModelCollection<IRecycleBinItem>, IEnumerable<IRecycleBinItem>, IDataModelParent, IDataModelWithContext, IRequestableCollection Methods DeleteAll() Permanently deletes all Recycle Bin items. Declaration void DeleteAll() DeleteAllAsync() Permanently deletes all Recycle Bin items. Declaration Task DeleteAllAsync() Returns Task DeleteAllBatch() Permanently deletes all Recycle Bin items using the current context batch instance. Declaration void DeleteAllBatch() DeleteAllBatch(Batch) Permanently deletes all Recycle Bin items using a specific batch instance. Declaration void DeleteAllBatch(Batch batch) Parameters Batch batch DeleteAllBatchAsync() Permanently deletes all Recycle Bin items using the current context batch instance. Declaration Task DeleteAllBatchAsync() Returns Task DeleteAllBatchAsync(Batch) Permanently deletes all Recycle Bin items using a specific batch instance. Declaration Task DeleteAllBatchAsync(Batch batch) Parameters Batch batch Returns Task DeleteAllSecondStageItems() Permanently deletes second stage Recycle Bin items. Declaration void DeleteAllSecondStageItems() DeleteAllSecondStageItemsAsync() Permanently deletes second stage Recycle Bin items. Declaration Task DeleteAllSecondStageItemsAsync() Returns Task DeleteAllSecondStageItemsBatch() Permanently deletes all Recycle Bin items using the current context batch instance. Declaration void DeleteAllSecondStageItemsBatch() DeleteAllSecondStageItemsBatch(Batch) Permanently deletes second stage Recycle Bin items using a specific batch instance. Declaration void DeleteAllSecondStageItemsBatch(Batch batch) Parameters Batch batch DeleteAllSecondStageItemsBatchAsync() Permanently deletes second stage Recycle Bin items using the current context batch instance. Declaration Task DeleteAllSecondStageItemsBatchAsync() Returns Task DeleteAllSecondStageItemsBatchAsync(Batch) Permanently deletes second stage Recycle Bin items using a specific batch instance. Declaration Task DeleteAllSecondStageItemsBatchAsync(Batch batch) Parameters Batch batch Returns Task MoveAllToSecondStage() Move all Recycle Bin items to second stage. Declaration void MoveAllToSecondStage() MoveAllToSecondStageAsync() Move all Recycle Bin items to second stage. Declaration Task MoveAllToSecondStageAsync() Returns Task MoveAllToSecondStageBatch() Move all Recycle Bin items to second stage using the current context batch instance. Declaration void MoveAllToSecondStageBatch() MoveAllToSecondStageBatch(Batch) Move all Recycle Bin items to second stage using a specific batch instance. Declaration void MoveAllToSecondStageBatch(Batch batch) Parameters Batch batch MoveAllToSecondStageBatchAsync() Move all Recycle Bin items to second stage using the current context batch instance. Declaration Task MoveAllToSecondStageBatchAsync() Returns Task MoveAllToSecondStageBatchAsync(Batch) Move all Recycle Bin items to second stage using a specific batch instance. Declaration Task MoveAllToSecondStageBatchAsync(Batch batch) Parameters Batch batch Returns Task RestoreAll() Restores all Recycle Bin items to their original locations. Declaration void RestoreAll() RestoreAllAsync() Restores all Recycle Bin items to their original locations. Declaration Task RestoreAllAsync() Returns Task RestoreAllBatch() Restores all Recycle Bin items to their original locations using the current context batch instance. Declaration void RestoreAllBatch() RestoreAllBatch(Batch) Restores all Recycle Bin items to their original locations using a specific batch instance. Declaration void RestoreAllBatch(Batch batch) Parameters Batch batch RestoreAllBatchAsync() Restores all Recycle Bin items to their original locations using the current context batch instance. Declaration Task RestoreAllBatchAsync() Returns Task RestoreAllBatchAsync(Batch) Restores all Recycle Bin items to their original locations using a specific batch instance. Declaration Task RestoreAllBatchAsync(Batch batch) Parameters Batch batch Returns Task Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.ISite.html": {
    "href": "api/PnP.Core.Model.SharePoint.ISite.html",
    "title": "Interface ISite | PnP Core SDK",
    "keywords": "Interface ISite Public interface to define a Site object of SharePoint Online Inherited Members IDataModel<ISite>.HasValue(String) IDataModel<ISite>.HasChanged(String) IDataModel<ISite>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ISite>.GetBatchAsync(Batch, Expression<Func<ISite, Object>>[]) IDataModelGet<ISite>.GetBatchAsync(Expression<Func<ISite, Object>>[]) IDataModelGet<ISite>.GetBatch(Batch, Expression<Func<ISite, Object>>[]) IDataModelGet<ISite>.GetBatch(Expression<Func<ISite, Object>>[]) IDataModelGet<ISite>.GetAsync(Expression<Func<ISite, Object>>[]) IDataModelGet<ISite>.GetAsync(ApiResponse, Expression<Func<ISite, Object>>[]) IDataModelGet<ISite>.Get(Expression<Func<ISite, Object>>[]) IDataModelGet<ISite>.Get(ApiResponse, Expression<Func<ISite, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ISite : IDataModel<ISite>, IDataModelParent, IDataModelWithContext, IDataModelGet<ISite>, IDataModelGet, IDataModelUpdate Properties AllowCreateDeclarativeWorkflow Gets or sets a value that specifies whether the creation of declarative workflows is allowed on this site collection. Declaration bool AllowCreateDeclarativeWorkflow { get; set; } Property Value Boolean AllowDesigner Gets or sets a value that specifies whether a designer can be used on this site collection. Declaration bool AllowDesigner { get; set; } Property Value Boolean AllowExternalEmbeddingWrapper Gets or sets a value that specifies whether external embedding wrapper is allowed on this site collection. Declaration int AllowExternalEmbeddingWrapper { get; set; } Property Value Int32 AllowMasterPageEditing Gets or sets a value that specifies whether master page editing is allowed on this site collection. Declaration bool AllowMasterPageEditing { get; set; } Property Value Boolean AllowRevertFromTemplate Gets or sets a value that specifies whether this site collection can be reverted to its base template. Declaration bool AllowRevertFromTemplate { get; set; } Property Value Boolean AllowSaveDeclarativeWorkflowAsTemplate Gets or sets a value that specifies whether it is allowed to save declarative workflows as template on this site collection. Declaration bool AllowSaveDeclarativeWorkflowAsTemplate { get; set; } Property Value Boolean AllowSavePublishDeclarativeWorkflow Gets or sets a value that specifies whether it is allowed to save and publish declarative workflows on this site collection. Declaration bool AllowSavePublishDeclarativeWorkflow { get; set; } Property Value Boolean AllowSelfServiceUpgrade Gets or sets a value that specifies whether version to version upgrade is allowed on this site collection. Declaration bool AllowSelfServiceUpgrade { get; set; } Property Value Boolean AllowSelfServiceUpgradeEvaluation Gets or sets a value that specifies whether upgrade evaluation site collection is allowed on this site collection. Declaration bool AllowSelfServiceUpgradeEvaluation { get; set; } Property Value Boolean AllWebs Collection of sub-webs in the current Site object Declaration IWebCollection AllWebs { get; } Property Value IWebCollection AuditLogTrimmingRetention Gets or sets a value that specifies whether the audit log trimming retention on this site. Declaration int AuditLogTrimmingRetention { get; set; } Property Value Int32 CanSyncHubSitePermissions Gets a value that specifies whether the site collections has permissions to sync to hub site. Declaration bool CanSyncHubSitePermissions { get; } Property Value Boolean CanUpgrade Property indicating whether or not this object can be upgraded. Declaration bool CanUpgrade { get; } Property Value Boolean ChannelGroupId Gets the Id of the channel group. Declaration Guid ChannelGroupId { get; } Property Value Guid Classification The Classification of the Site object Declaration string Classification { get; set; } Property Value String CommentsOnSitePagesDisabled Gets or sets a value that specifies whether the comments on site pages are disabled on this site collection. Declaration bool CommentsOnSitePagesDisabled { get; set; } Property Value Boolean CompatibilityLevel Gets the major version of this site collection for purposes of major version-level compatibility checks. Declaration int CompatibilityLevel { get; } Property Value Int32 ComplianceAttribute Gets or sets the compliance attribute of this site collection. Declaration string ComplianceAttribute { get; set; } Property Value String DisableAppViews Gets or sets a value that specifies whether the app views are disabled on this site collection. Declaration bool DisableAppViews { get; set; } Property Value Boolean DisableCompanyWideSharingLinks Gets or sets a value that specifies whether the company-wide sharing links are disabled on this site collection. Declaration bool DisableCompanyWideSharingLinks { get; set; } Property Value Boolean DisableFlows Gets or sets a value that specifies whether Flows are disabled on this site collection. Declaration bool DisableFlows { get; set; } Property Value Boolean ExternalSharingTipsEnabled Gets a value that indicates whether external sharing tips are enabled. Declaration bool ExternalSharingTipsEnabled { get; } Property Value Boolean ExternalUserExpirationInDays Gets or sets the expiration in days for external users on this site collection. Declaration int ExternalUserExpirationInDays { get; set; } Property Value Int32 Features Collection of features enabled for the site Declaration IFeatureCollection Features { get; } Property Value IFeatureCollection GeoLocation Gets the geolocation of this site collection. Declaration string GeoLocation { get; } Property Value String GroupId The unique ID of the connected Microsoft 365 Group (if any) Declaration Guid GroupId { get; } Property Value Guid HubSiteId Gets the Id of the Hub Site this site collection is connected to. Declaration Guid HubSiteId { get; } Property Value Guid Id The Unique ID of the Site object Declaration Guid Id { get; } Property Value Guid IsHubSite Gets a value that indicates whether this site collection is a Hub Site. Declaration bool IsHubSite { get; } Property Value Boolean LockIssue Gets or sets the comment that is used in locking a site collection. Declaration string LockIssue { get; set; } Property Value String MaxItemsPerThrottledOperation Gets a value that specifies the maximum number of list items allowed per operation before throttling will occur. Declaration int MaxItemsPerThrottledOperation { get; } Property Value Int32 NeedsB2BUpgrade Gets or sets a value that specifies whether this site collection needs a B2B upgrade. Declaration bool NeedsB2BUpgrade { get; set; } Property Value Boolean PrimaryUri Specifies the primary URI of this site collection, including the host name, port number, and path. Declaration Uri PrimaryUri { get; } Property Value Uri ReadOnly Gets or sets a Boolean value that specifies whether the site collection is read-only, locked, and unavailable for write access. Declaration bool ReadOnly { get; set; } Property Value Boolean RecycleBin Gets a value that specifies the collection of Recycle Bin items for the site collection. Declaration IRecycleBinItemCollection RecycleBin { get; } Property Value IRecycleBinItemCollection RelatedGroupId Gets the Id of the group related to this site collection. Declaration Guid RelatedGroupId { get; } Property Value Guid RequiredDesignerVersion Gets a value that indicates the required Designer version for this site collection. Declaration string RequiredDesignerVersion { get; } Property Value String RootWeb The RootWeb of the Site object Declaration IWeb RootWeb { get; } Property Value IWeb SearchBoxInNavBar Define if the suitebar search box should show or not Declaration SearchBoxInNavBar SearchBoxInNavBar { get; set; } Property Value SearchBoxInNavBar SearchBoxPlaceholderText Gets or sets a value that specifies the placeholder text of this site collection search box. Declaration string SearchBoxPlaceholderText { get; set; } Property Value String SearchCenterUrl Defines the Search Center URL Declaration string SearchCenterUrl { get; set; } Property Value String SensitivityLabel Gets or sets the Id (as Guid) of the sensitivity label of this site collection Declaration Guid SensitivityLabel { get; set; } Property Value Guid SensitivityLabelId Gets or sets the Id (as String) of the sensitivity label of this site collection. Declaration string SensitivityLabelId { get; set; } Property Value String ServerRelativeUrl Gets the server-relative URL of the root Web site in the site collection. Declaration string ServerRelativeUrl { get; } Property Value String ShareByEmailEnabled Gets or sets a value that specifies whether sharing by e-mail is enabled on this site collection. Declaration bool ShareByEmailEnabled { get; set; } Property Value Boolean ShareByLinkEnabled Property that indicates whether users will be able to share links to documents that can be accessed without logging in. Declaration bool ShareByLinkEnabled { get; } Property Value Boolean ShowPeoplePickerSuggestionsForGuestUsers Gets or sets a value that specifies whether guest users should be displayed as suggestions in people picker on this site collection. Declaration bool ShowPeoplePickerSuggestionsForGuestUsers { get; set; } Property Value Boolean ShowUrlStructure Gets or sets a value that specifies whether the URL structure of this site collection is viewable. Declaration bool ShowUrlStructure { get; set; } Property Value Boolean SocialBarOnSitePagesDisabled Defines whether social bar is disabled on Site Pages in this site collection Declaration bool SocialBarOnSitePagesDisabled { get; set; } Property Value Boolean StatusBarLink Gets or sets a value that specifies the status bar link on this site collection. Declaration string StatusBarLink { get; set; } Property Value String StatusBarText Gets or sets a value that specifies the text of the status bar on this site collection. Declaration string StatusBarText { get; set; } Property Value String ThicketSupportDisabled Gets a value that indicates whether thicket support is disabled on this site collection. Declaration bool ThicketSupportDisabled { get; } Property Value Boolean TrimAuditLog Gets or sets a value that specifies whether audit log is trimmed. Declaration bool TrimAuditLog { get; set; } Property Value Boolean UIVersionConfigurationEnabled Gets or sets a value that specifies whether the Visual Upgrade UI of this site collection is displayed. Declaration bool UIVersionConfigurationEnabled { get; set; } Property Value Boolean UpgradeReminderDate Specifies a date, after which site collection administrators will be reminded to upgrade the site collection. Declaration DateTime UpgradeReminderDate { get; set; } Property Value DateTime UpgradeScheduled Gets or sets a value that specifies if upgrade is scheduled on this site collection. Declaration bool UpgradeScheduled { get; set; } Property Value Boolean UpgradeScheduledDate Gets or sets a value that specifies the scheduled date of this site colleection upgrage. Declaration DateTime UpgradeScheduledDate { get; set; } Property Value DateTime Upgrading Gets a value that indicates whether the site is currently upgrading. Declaration bool Upgrading { get; } Property Value Boolean Url The URL of the Site object Declaration Uri Url { get; } Property Value Uri Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IStorageMetrics.html": {
    "href": "api/PnP.Core.Model.SharePoint.IStorageMetrics.html",
    "title": "Interface IStorageMetrics | PnP Core SDK",
    "keywords": "Interface IStorageMetrics Public interface to define a StorageMetrics object Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IStorageMetrics : IComplexType Properties LastModified Gets the last modified date and time of the storage resource. Declaration DateTime LastModified { get; } Property Value DateTime TotalFileCount Gets the total count of files in the storage resource. Declaration long TotalFileCount { get; } Property Value Int64 TotalFileStreamSize Gets the total stream size of the storage resource. Declaration long TotalFileStreamSize { get; } Property Value Int64 TotalSize Gets the total size of the storage resource. Declaration long TotalSize { get; } Property Value Int64 Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITerm.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITerm.html",
    "title": "Interface ITerm | PnP Core SDK",
    "keywords": "Interface ITerm Represents a term used in a term store. A term can be used to represent an object which can then be used as a metadata to tag conent. Multiple terms can be organized in a hierarchical manner within a set. Inherited Members IDataModel<ITerm>.HasValue(String) IDataModel<ITerm>.HasChanged(String) IDataModel<ITerm>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITerm>.GetBatchAsync(Batch, Expression<Func<ITerm, Object>>[]) IDataModelGet<ITerm>.GetBatchAsync(Expression<Func<ITerm, Object>>[]) IDataModelGet<ITerm>.GetBatch(Batch, Expression<Func<ITerm, Object>>[]) IDataModelGet<ITerm>.GetBatch(Expression<Func<ITerm, Object>>[]) IDataModelGet<ITerm>.GetAsync(Expression<Func<ITerm, Object>>[]) IDataModelGet<ITerm>.GetAsync(ApiResponse, Expression<Func<ITerm, Object>>[]) IDataModelGet<ITerm>.Get(Expression<Func<ITerm, Object>>[]) IDataModelGet<ITerm>.Get(ApiResponse, Expression<Func<ITerm, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITerm : IDataModel<ITerm>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITerm>, IDataModelGet, IDataModelUpdate, IDataModelDelete Properties CreatedDateTime Date and time of term set creation. Read-only. Declaration DateTimeOffset CreatedDateTime { get; } Property Value DateTimeOffset Descriptions Name of the term set for each language. Declaration List<ITermLocalizedDescription> Descriptions { get; } Property Value PnP.Core.Model.SharePoint.List < ITermLocalizedDescription > Id The Unique ID of the term. Declaration string Id { get; } Property Value String Labels Name of the term set for each language. Declaration List<ITermLocalizedLabel> Labels { get; } Property Value PnP.Core.Model.SharePoint.List < ITermLocalizedLabel > LastModifiedDateTime Last date and time of term modification. Read-only. Declaration DateTimeOffset LastModifiedDateTime { get; } Property Value DateTimeOffset Properties Properties on this term set Declaration List<ITermProperty> Properties { get; } Property Value PnP.Core.Model.SharePoint.List < ITermProperty > Relations Collection of terms relations Declaration ITermRelationCollection Relations { get; } Property Value ITermRelationCollection Set The term set of this term Declaration ITermSet Set { get; } Property Value ITermSet Terms Collection of child terms of this term Declaration ITermCollection Terms { get; } Property Value ITermCollection Methods AddLabelAndDescription(String, String, Boolean, String) Adds a term label and optional description for a given language. Call update to persist this change. Declaration void AddLabelAndDescription(string label, string languageTag, bool isDefault = false, string description = null) Parameters String label Label for the term String languageTag Language tag for the label and description Boolean isDefault Will this be the default label? String description Optional description to set AddProperty(String, String) Adds a property to the term's property collection. Call update to persist this change. Declaration void AddProperty(string key, string value) Parameters String key Property key String value Property value Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermCollection.html",
    "title": "Interface ITermCollection | PnP Core SDK",
    "keywords": "Interface ITermCollection Collection of terms Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging<ITerm>.CanPage ISupportPaging<ITerm>.GetPagedAsync(Int32, Expression<Func<ITerm, Object>>[]) ISupportPaging<ITerm>.GetNextPageAsync() ISupportPaging<ITerm>.GetAllPagesAsync() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermCollection : IDataModelCollection<ITerm>, IEnumerable<ITerm>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging<ITerm> Methods Add(String, String) Adds a new term Declaration ITerm Add(string name, string description = null) Parameters String name Name of the term String description Optional description of the term Returns ITerm Newly added term AddAsync(String, String) Adds a new term Declaration Task<ITerm> AddAsync(string name, string description = null) Parameters String name Name of the term String description Optional description of the term Returns Task < ITerm > Newly added term AddBatch(Batch, String, String) Adds a new term Declaration ITerm AddBatch(Batch batch, string name, string description = null) Parameters Batch batch Batch to use String name Name of the term String description Optional description of the term Returns ITerm Newly added term AddBatch(String, String) Adds a new term Declaration ITerm AddBatch(string name, string description = null) Parameters String name Name of the term String description Optional description of the term Returns ITerm Newly added term AddBatchAsync(Batch, String, String) Adds a new term Declaration Task<ITerm> AddBatchAsync(Batch batch, string name, string description = null) Parameters Batch batch Batch to use String name Name of the term String description Optional description of the term Returns Task < ITerm > Newly added term AddBatchAsync(String, String) Adds a new term Declaration Task<ITerm> AddBatchAsync(string name, string description = null) Parameters String name Name of the term String description Optional description of the term Returns Task < ITerm > Newly added term GetById(String) Loads a term by id Declaration ITerm GetById(string id) Parameters String id Id of the term to load Returns ITerm Found term if any, null otherwise GetByIdAsync(String) Loads a term by id Declaration Task<ITerm> GetByIdAsync(string id) Parameters String id Id of the term to load Returns Task < ITerm > Found term if any, null otherwise Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.ITermGroup.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermGroup.html",
    "title": "Interface ITermGroup | PnP Core SDK",
    "keywords": "Interface ITermGroup Microsoft 365 Term group Inherited Members IDataModel<ITermGroup>.HasValue(String) IDataModel<ITermGroup>.HasChanged(String) IDataModel<ITermGroup>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITermGroup>.GetBatchAsync(Batch, Expression<Func<ITermGroup, Object>>[]) IDataModelGet<ITermGroup>.GetBatchAsync(Expression<Func<ITermGroup, Object>>[]) IDataModelGet<ITermGroup>.GetBatch(Batch, Expression<Func<ITermGroup, Object>>[]) IDataModelGet<ITermGroup>.GetBatch(Expression<Func<ITermGroup, Object>>[]) IDataModelGet<ITermGroup>.GetAsync(Expression<Func<ITermGroup, Object>>[]) IDataModelGet<ITermGroup>.GetAsync(ApiResponse, Expression<Func<ITermGroup, Object>>[]) IDataModelGet<ITermGroup>.Get(Expression<Func<ITermGroup, Object>>[]) IDataModelGet<ITermGroup>.Get(ApiResponse, Expression<Func<ITermGroup, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermGroup : IDataModel<ITermGroup>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITermGroup>, IDataModelGet, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties CreatedDateTime Date and time of group creation. Read-only. Declaration DateTimeOffset CreatedDateTime { get; } Property Value DateTimeOffset Description Description giving details on the group. Declaration string Description { get; set; } Property Value String Id The Unique ID of the Group. Declaration string Id { get; } Property Value String Name Name of the group. Declaration string Name { get; set; } Property Value String Scope Returns type of group. Possible values are 'global', 'system' and 'siteCollection'. Declaration TermGroupScope Scope { get; set; } Property Value TermGroupScope Sets Collection of term sets in this term group Declaration ITermSetCollection Sets { get; } Property Value ITermSetCollection Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermGroupCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermGroupCollection.html",
    "title": "Interface ITermGroupCollection | PnP Core SDK",
    "keywords": "Interface ITermGroupCollection Collection of term groups Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging<ITermGroup>.CanPage ISupportPaging<ITermGroup>.GetPagedAsync(Int32, Expression<Func<ITermGroup, Object>>[]) ISupportPaging<ITermGroup>.GetNextPageAsync() ISupportPaging<ITermGroup>.GetAllPagesAsync() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermGroupCollection : IQueryable<ITermGroup>, IDataModelCollection<ITermGroup>, IEnumerable<ITermGroup>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging<ITermGroup> Methods Add(String, String, TermGroupScope) Adds a new term group Declaration ITermGroup Add(string name, string description = null, TermGroupScope scope = TermGroupScope.Global) Parameters String name Display name of the group String description Optional description of the group TermGroupScope scope Optional scope of the group Returns ITermGroup Newly added group AddAsync(String, String, TermGroupScope) Adds a new term group Declaration Task<ITermGroup> AddAsync(string name, string description = null, TermGroupScope scope = TermGroupScope.Global) Parameters String name Display name of the group String description Optional description of the group TermGroupScope scope Optional scope of the group Returns Task < ITermGroup > Newly added group AddBatch(Batch, String, String, TermGroupScope) Adds a new term group Declaration ITermGroup AddBatch(Batch batch, string name, string description = null, TermGroupScope scope = TermGroupScope.Global) Parameters Batch batch Batch to use String name Display name of the group String description Optional description of the group TermGroupScope scope Optional scope of the group Returns ITermGroup Newly added group AddBatch(String, String, TermGroupScope) Adds a new term group Declaration ITermGroup AddBatch(string name, string description = null, TermGroupScope scope = TermGroupScope.Global) Parameters String name Display name of the group String description Optional description of the group TermGroupScope scope Optional scope of the group Returns ITermGroup Newly added group AddBatchAsync(Batch, String, String, TermGroupScope) Adds a new term group Declaration Task<ITermGroup> AddBatchAsync(Batch batch, string name, string description = null, TermGroupScope scope = TermGroupScope.Global) Parameters Batch batch Batch to use String name Display name of the group String description Optional description of the group TermGroupScope scope Optional scope of the group Returns Task < ITermGroup > Newly added group AddBatchAsync(String, String, TermGroupScope) Adds a new term group Declaration Task<ITermGroup> AddBatchAsync(string name, string description = null, TermGroupScope scope = TermGroupScope.Global) Parameters String name Display name of the group String description Optional description of the group TermGroupScope scope Optional scope of the group Returns Task < ITermGroup > Newly added group Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.ITermLocalizedDescription.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermLocalizedDescription.html",
    "title": "Interface ITermLocalizedDescription | PnP Core SDK",
    "keywords": "Interface ITermLocalizedDescription Represents the localized name used in the term store, which identifies the name in the localized language. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermLocalizedDescription : IComplexType Properties Description The description in the localized language. Declaration string Description { get; set; } Property Value String LanguageTag The language for the label. Declaration string LanguageTag { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermLocalizedLabel.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermLocalizedLabel.html",
    "title": "Interface ITermLocalizedLabel | PnP Core SDK",
    "keywords": "Interface ITermLocalizedLabel Represents the localized label used in the term store, which identifies the name in the localized language. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermLocalizedLabel : IComplexType Properties IsDefault Indicates whether the label is the default label. Declaration bool IsDefault { get; set; } Property Value Boolean LanguageTag The language for the label. Declaration string LanguageTag { get; set; } Property Value String Name The name in the localized language. Declaration string Name { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermProperty.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermProperty.html",
    "title": "Interface ITermProperty | PnP Core SDK",
    "keywords": "Interface ITermProperty Key/Value term property Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermProperty : IComplexType Properties Key Property key Declaration string Key { get; set; } Property Value String Value Property value Declaration string Value { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermRelation.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermRelation.html",
    "title": "Interface ITermRelation | PnP Core SDK",
    "keywords": "Interface ITermRelation Represents the relationship between terms in a term store.Currently two types of relationships are supported: pin and reuse. In a pin relationship, a term can be pinned under a different term in a different term set.In a pinned relationship, new children to the term can only be added in the term set in which the term was created.Any change in the hierarchy under the term is reflected across the sets in which the term was pinned. The reuse relationship is similar to the pinned relationship except that changes to the reused term can be made from any hierarchy in which the term is reused.Also, a change in hierarchy made to the reused term does not get reflected in the other term sets in which the term is reused. Inherited Members IDataModel<ITermRelation>.HasValue(String) IDataModel<ITermRelation>.HasChanged(String) IDataModel<ITermRelation>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITermRelation>.GetBatchAsync(Batch, Expression<Func<ITermRelation, Object>>[]) IDataModelGet<ITermRelation>.GetBatchAsync(Expression<Func<ITermRelation, Object>>[]) IDataModelGet<ITermRelation>.GetBatch(Batch, Expression<Func<ITermRelation, Object>>[]) IDataModelGet<ITermRelation>.GetBatch(Expression<Func<ITermRelation, Object>>[]) IDataModelGet<ITermRelation>.GetAsync(Expression<Func<ITermRelation, Object>>[]) IDataModelGet<ITermRelation>.GetAsync(ApiResponse, Expression<Func<ITermRelation, Object>>[]) IDataModelGet<ITermRelation>.Get(Expression<Func<ITermRelation, Object>>[]) IDataModelGet<ITermRelation>.Get(ApiResponse, Expression<Func<ITermRelation, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermRelation : IDataModel<ITermRelation>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITermRelation>, IDataModelGet Properties FromTerm The from term of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the set. Declaration ITerm FromTerm { get; } Property Value ITerm Id The Unique ID of the term relation. Declaration string Id { get; } Property Value String Relationship The type of relation. Possible values are: pin, reuse. Declaration TermRelationType Relationship { get; set; } Property Value TermRelationType Set The set in which the relation is relevant. Declaration ITermSet Set { get; } Property Value ITermSet ToTerm The to term of the relation. The term to which the realtionship is defined. Declaration ITerm ToTerm { get; } Property Value ITerm Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermRelationCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermRelationCollection.html",
    "title": "Interface ITermRelationCollection | PnP Core SDK",
    "keywords": "Interface ITermRelationCollection Collection of terms Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging<ITermRelation>.CanPage ISupportPaging<ITermRelation>.GetPagedAsync(Int32, Expression<Func<ITermRelation, Object>>[]) ISupportPaging<ITermRelation>.GetNextPageAsync() ISupportPaging<ITermRelation>.GetAllPagesAsync() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermRelationCollection : IDataModelCollection<ITermRelation>, IEnumerable<ITermRelation>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging<ITermRelation> Methods Add(TermRelationType, ITermSet, ITerm) Adds a new term relation Declaration ITermRelation Add(TermRelationType relationship, ITermSet targetSet, ITerm fromTerm = null) Parameters TermRelationType relationship Type of relation to be created. Possible values are: pin, reuse. ITermSet targetSet The set where the relationship needs to be created. ITerm fromTerm The term with which the relationship needs to be created. Returns ITermRelation Newly added term relation ship AddAsync(TermRelationType, ITermSet, ITerm) Adds a new term relation Declaration Task<ITermRelation> AddAsync(TermRelationType relationship, ITermSet targetSet, ITerm fromTerm = null) Parameters TermRelationType relationship Type of relation to be created. Possible values are: pin, reuse. ITermSet targetSet The set where the relationship needs to be created. ITerm fromTerm The term with which the relationship needs to be created. Returns Task < ITermRelation > Newly added term relation ship AddBatch(TermRelationType, ITermSet, ITerm) Adds a new term relation via a batch request Declaration ITermRelation AddBatch(TermRelationType relationship, ITermSet targetSet, ITerm fromTerm = null) Parameters TermRelationType relationship Type of relation to be created. Possible values are: pin, reuse. ITermSet targetSet The set where the relationship needs to be created. ITerm fromTerm The term with which the relationship needs to be created. Returns ITermRelation Newly added term relation ship AddBatch(Batch, TermRelationType, ITermSet, ITerm) Adds a new term relation via a batch request Declaration ITermRelation AddBatch(Batch batch, TermRelationType relationship, ITermSet targetSet, ITerm fromTerm = null) Parameters Batch batch Batch to use TermRelationType relationship Type of relation to be created. Possible values are: pin, reuse. ITermSet targetSet The set where the relationship needs to be created. ITerm fromTerm The term with which the relationship needs to be created. Returns ITermRelation Newly added term relation ship AddBatchAsync(TermRelationType, ITermSet, ITerm) Adds a new term relation via a batch request Declaration Task<ITermRelation> AddBatchAsync(TermRelationType relationship, ITermSet targetSet, ITerm fromTerm = null) Parameters TermRelationType relationship Type of relation to be created. Possible values are: pin, reuse. ITermSet targetSet The set where the relationship needs to be created. ITerm fromTerm The term with which the relationship needs to be created. Returns Task < ITermRelation > Newly added term relation ship AddBatchAsync(Batch, TermRelationType, ITermSet, ITerm) Adds a new term relation via a batch request Declaration Task<ITermRelation> AddBatchAsync(Batch batch, TermRelationType relationship, ITermSet targetSet, ITerm fromTerm = null) Parameters Batch batch Batch to use TermRelationType relationship Type of relation to be created. Possible values are: pin, reuse. ITermSet targetSet The set where the relationship needs to be created. ITerm fromTerm The term with which the relationship needs to be created. Returns Task < ITermRelation > Newly added term relation ship Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.ITermSet.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermSet.html",
    "title": "Interface ITermSet | PnP Core SDK",
    "keywords": "Interface ITermSet Represents the set used in a term store. The set represents a unit which contains a collection of hierarchical terms. A group can contain multiple sets. Inherited Members IDataModel<ITermSet>.HasValue(String) IDataModel<ITermSet>.HasChanged(String) IDataModel<ITermSet>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITermSet>.GetBatchAsync(Batch, Expression<Func<ITermSet, Object>>[]) IDataModelGet<ITermSet>.GetBatchAsync(Expression<Func<ITermSet, Object>>[]) IDataModelGet<ITermSet>.GetBatch(Batch, Expression<Func<ITermSet, Object>>[]) IDataModelGet<ITermSet>.GetBatch(Expression<Func<ITermSet, Object>>[]) IDataModelGet<ITermSet>.GetAsync(Expression<Func<ITermSet, Object>>[]) IDataModelGet<ITermSet>.GetAsync(ApiResponse, Expression<Func<ITermSet, Object>>[]) IDataModelGet<ITermSet>.Get(Expression<Func<ITermSet, Object>>[]) IDataModelGet<ITermSet>.Get(ApiResponse, Expression<Func<ITermSet, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermSet : IDataModel<ITermSet>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITermSet>, IDataModelGet, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties CreatedDateTime Date and time of term set creation. Read-only. Declaration DateTimeOffset CreatedDateTime { get; } Property Value DateTimeOffset Description Description giving details on the term set. Declaration string Description { get; set; } Property Value String Group The parent group for this termset Declaration ITermGroup Group { get; } Property Value ITermGroup Id The Unique ID of the term set. Declaration string Id { get; } Property Value String LocalizedNames Name of the term set for each language. Declaration List<ITermSetLocalizedName> LocalizedNames { get; } Property Value PnP.Core.Model.SharePoint.List < ITermSetLocalizedName > Properties Properties on this term set Declaration List<ITermSetProperty> Properties { get; } Property Value PnP.Core.Model.SharePoint.List < ITermSetProperty > Relations Collection of terms relations Declaration ITermRelationCollection Relations { get; } Property Value ITermRelationCollection Terms Collection of term in this term set Declaration ITermCollection Terms { get; } Property Value ITermCollection Methods AddProperty(String, String) Adds a property to the term set's property collection. Call update to persist this change. Declaration void AddProperty(string key, string value) Parameters String key Property key String value Property value Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermSetCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermSetCollection.html",
    "title": "Interface ITermSetCollection | PnP Core SDK",
    "keywords": "Interface ITermSetCollection Collection of term sets Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging<ITermSet>.CanPage ISupportPaging<ITermSet>.GetPagedAsync(Int32, Expression<Func<ITermSet, Object>>[]) ISupportPaging<ITermSet>.GetNextPageAsync() ISupportPaging<ITermSet>.GetAllPagesAsync() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermSetCollection : IQueryable<ITermSet>, IDataModelCollection<ITermSet>, IEnumerable<ITermSet>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging<ITermSet> Methods Add(String, String) Adds a new term set Declaration ITermSet Add(string name, string description = null) Parameters String name Name of the term set String description Optional description of the term set Returns ITermSet Newly added term set AddAsync(String, String) Adds a new term set Declaration Task<ITermSet> AddAsync(string name, string description = null) Parameters String name Name of the term set String description Optional description of the term set Returns Task < ITermSet > Newly added term set AddBatch(Batch, String, String) Adds a new term set Declaration ITermSet AddBatch(Batch batch, string name, string description = null) Parameters Batch batch Batch to use String name Name of the term set String description Optional description of the term set Returns ITermSet Newly added term set AddBatch(String, String) Adds a new term set Declaration ITermSet AddBatch(string name, string description = null) Parameters String name Name of the term set String description Optional description of the term set Returns ITermSet Newly added term set AddBatchAsync(Batch, String, String) Adds a new term set Declaration Task<ITermSet> AddBatchAsync(Batch batch, string name, string description = null) Parameters Batch batch Batch to use String name Name of the term set String description Optional description of the term set Returns Task < ITermSet > Newly added term set AddBatchAsync(String, String) Adds a new term set Declaration Task<ITermSet> AddBatchAsync(string name, string description = null) Parameters String name Name of the term set String description Optional description of the term set Returns Task < ITermSet > Newly added term set Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.ITermSetLocalizedName.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermSetLocalizedName.html",
    "title": "Interface ITermSetLocalizedName | PnP Core SDK",
    "keywords": "Interface ITermSetLocalizedName Represents the localized name used in the term store, which identifies the name in the localized language. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermSetLocalizedName : IComplexType Properties LanguageTag The language for the label. Declaration string LanguageTag { get; set; } Property Value String Name The name in the localized language. Declaration string Name { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermSetProperty.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermSetProperty.html",
    "title": "Interface ITermSetProperty | PnP Core SDK",
    "keywords": "Interface ITermSetProperty Key/Value term set property Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermSetProperty : IComplexType Properties Key Property key Declaration string Key { get; set; } Property Value String Value Property value Declaration string Value { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ITermStore.html": {
    "href": "api/PnP.Core.Model.SharePoint.ITermStore.html",
    "title": "Interface ITermStore | PnP Core SDK",
    "keywords": "Interface ITermStore Microsoft 365 Term store Inherited Members IDataModel<ITermStore>.HasValue(String) IDataModel<ITermStore>.HasChanged(String) IDataModel<ITermStore>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITermStore>.GetBatchAsync(Batch, Expression<Func<ITermStore, Object>>[]) IDataModelGet<ITermStore>.GetBatchAsync(Expression<Func<ITermStore, Object>>[]) IDataModelGet<ITermStore>.GetBatch(Batch, Expression<Func<ITermStore, Object>>[]) IDataModelGet<ITermStore>.GetBatch(Expression<Func<ITermStore, Object>>[]) IDataModelGet<ITermStore>.GetAsync(Expression<Func<ITermStore, Object>>[]) IDataModelGet<ITermStore>.GetAsync(ApiResponse, Expression<Func<ITermStore, Object>>[]) IDataModelGet<ITermStore>.Get(Expression<Func<ITermStore, Object>>[]) IDataModelGet<ITermStore>.Get(ApiResponse, Expression<Func<ITermStore, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface ITermStore : IDataModel<ITermStore>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITermStore>, IDataModelGet, IDataModelUpdate Properties DefaultLanguage Default language of the termstore. Declaration string DefaultLanguage { get; set; } Property Value String Groups Collection of term groups in this term store Declaration ITermGroupCollection Groups { get; } Property Value ITermGroupCollection Id The Unique ID of the Term Store Declaration string Id { get; } Property Value String Languages List of languages for the term store. Declaration List<string> Languages { get; } Property Value PnP.Core.Model.SharePoint.List < String > Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IWeb.html": {
    "href": "api/PnP.Core.Model.SharePoint.IWeb.html",
    "title": "Interface IWeb | PnP Core SDK",
    "keywords": "Interface IWeb Public interface to define a Web object of SharePoint Online Inherited Members IDataModel<IWeb>.HasValue(String) IDataModel<IWeb>.HasChanged(String) IDataModel<IWeb>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<IWeb>.GetBatchAsync(Batch, Expression<Func<IWeb, Object>>[]) IDataModelGet<IWeb>.GetBatchAsync(Expression<Func<IWeb, Object>>[]) IDataModelGet<IWeb>.GetBatch(Batch, Expression<Func<IWeb, Object>>[]) IDataModelGet<IWeb>.GetBatch(Expression<Func<IWeb, Object>>[]) IDataModelGet<IWeb>.GetAsync(Expression<Func<IWeb, Object>>[]) IDataModelGet<IWeb>.GetAsync(ApiResponse, Expression<Func<IWeb, Object>>[]) IDataModelGet<IWeb>.Get(Expression<Func<IWeb, Object>>[]) IDataModelGet<IWeb>.Get(ApiResponse, Expression<Func<IWeb, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IWeb : IDataModel<IWeb>, IDataModelParent, IDataModelWithContext, IDataModelGet<IWeb>, IDataModelGet, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties AccessRequestListUrl Gets the URL of the access request list to the current site. Declaration string AccessRequestListUrl { get; } Property Value String AccessRequestSiteDescription Gets or sets the description of the access request to this site. Declaration string AccessRequestSiteDescription { get; set; } Property Value String AllowAutomaticASPXPageIndexing Gets a value that specifies whether the automatic ASPX page indexed is allowed. Declaration bool AllowAutomaticASPXPageIndexing { get; } Property Value Boolean AllowCreateDeclarativeWorkflowForCurrentUser Gets a value that specifies whether the current user is allowed to create declarative workflow on this site. Declaration bool AllowCreateDeclarativeWorkflowForCurrentUser { get; set; } Property Value Boolean AllowDesignerForCurrentUser Gets a value that specifies whether the current user is allowed to use a designer application to customize this site. Declaration bool AllowDesignerForCurrentUser { get; set; } Property Value Boolean AllowMasterPageEditingForCurrentUser Gets a value that specifies whether the current user is allowed to edit the master page. Declaration bool AllowMasterPageEditingForCurrentUser { get; } Property Value Boolean AllowRevertFromTemplateForCurrentUser Gets a value that specifies whether the current user is allowed to revert the site to a default site template. Declaration bool AllowRevertFromTemplateForCurrentUser { get; } Property Value Boolean AllowRssFeeds Gets a value that specifies whether the site allows RSS feeds. Declaration bool AllowRssFeeds { get; } Property Value Boolean AllowSaveDeclarativeWorkflowAsTemplateForCurrentUser Gets a value that specifies whether the current user is allowed to save declarative workflows as template. Declaration bool AllowSaveDeclarativeWorkflowAsTemplateForCurrentUser { get; } Property Value Boolean AllowSavePublishDeclarativeWorkflowForCurrentUser Gets a value that specifies whether the current user is allowed to publish a declarative workflow. Declaration bool AllowSavePublishDeclarativeWorkflowForCurrentUser { get; } Property Value Boolean AllProperties Gets a collection of metadata for the Web site. Declaration IPropertyValues AllProperties { get; } Property Value IPropertyValues AlternateCssUrl The AlternateCSS of the Site, optional attribute. Declaration string AlternateCssUrl { get; set; } Property Value String AppInstanceId The instance Id of the App Instance that this website represents. Declaration Guid AppInstanceId { get; } Property Value Guid AvailableContentTypes Gets the collection of all content types that apply to the current scope, including those of the current Web site, as well as any parent Web sites. Declaration IContentTypeCollection AvailableContentTypes { get; } Property Value IContentTypeCollection AvailableFields Gets a value that specifies the collection of all fields available for the current scope, including those of the current site, as well as any parent sites. Declaration IFieldCollection AvailableFields { get; } Property Value IFieldCollection ClassicWelcomePage Gets or sets the welcome page of the site in Classic UI mode. Declaration string ClassicWelcomePage { get; set; } Property Value String CommentsOnSitePagesDisabled Defines whether the comments on site pages are disabled or not Declaration bool CommentsOnSitePagesDisabled { get; set; } Property Value Boolean ContainsConfidentialInfo Gets or sets a value that specifies whether this site contains confidential information. Declaration bool ContainsConfidentialInfo { get; set; } Property Value Boolean ContentTypes Collection of content types in the current Web object Declaration IContentTypeCollection ContentTypes { get; } Property Value IContentTypeCollection Created Gets a value that specifies when the site was created. Declaration DateTime Created { get; } Property Value DateTime CurrentUser Gets the current user in the current context Declaration ISharePointUser CurrentUser { get; } Property Value ISharePointUser CustomMasterUrl The Custom MasterPage Url of the Site, optional attribute. Declaration string CustomMasterUrl { get; set; } Property Value String CustomSiteActionsDisabled Gets a value that specifies whether custom site actions are disabled on this site. Declaration bool CustomSiteActionsDisabled { get; set; } Property Value Boolean DefaultNewPageTemplateId Gets or sets the default new page template Id of the site. Declaration Guid DefaultNewPageTemplateId { get; set; } Property Value Guid Description The Description of the Site, optional attribute. Declaration string Description { get; set; } Property Value String DesignerDownloadUrlForCurrentUser Gets the designer download URL for current user. Declaration string DesignerDownloadUrlForCurrentUser { get; } Property Value String DesignPackageId Gets or sets the design package Id of this site. Declaration Guid DesignPackageId { get; set; } Property Value Guid DisableAppViews Defines whether disable PowerApps for the current web Declaration bool DisableAppViews { get; set; } Property Value Boolean DisableFlows Defines whether disable flows for the current web Declaration bool DisableFlows { get; set; } Property Value Boolean DisableRecommendedItems Gets or sets whether the recommended items are disabled on this site. Declaration bool DisableRecommendedItems { get; set; } Property Value Boolean DocumentLibraryCalloutOfficeWebAppPreviewersDisabled Determines if the Document Library Callout's WAC previewers are enabled or not. Declaration bool DocumentLibraryCalloutOfficeWebAppPreviewersDisabled { get; } Property Value Boolean EnableMinimalDownload Gets or sets a Boolean value that specifies whether the Web site should use Minimal Download Strategy. Declaration bool EnableMinimalDownload { get; set; } Property Value Boolean ExcludeFromOfflineClient Defines whether to exclude the web from offline client Declaration bool ExcludeFromOfflineClient { get; set; } Property Value Boolean Features Collection of features enabled for the web Declaration IFeatureCollection Features { get; } Property Value IFeatureCollection Fields Collection of fields in the current Web object Declaration IFieldCollection Fields { get; } Property Value IFieldCollection Folders Collection of folders in the current Web object Declaration IFolderCollection Folders { get; } Property Value IFolderCollection FooterEmphasis Gets or sets the value of the footer emphasis. Declaration FooterVariantThemeType FooterEmphasis { get; set; } Property Value FooterVariantThemeType FooterEnabled Gets or sets a value that specifies whether the footer is enabled on the site. Declaration bool FooterEnabled { get; set; } Property Value Boolean FooterLayout Gets or sets the value of the footer layout. Declaration FooterLayoutType FooterLayout { get; set; } Property Value FooterLayoutType HeaderEmphasis Gets or sets the value of the header emphasis. Declaration VariantThemeType HeaderEmphasis { get; set; } Property Value VariantThemeType HeaderLayout Gets or sets the value of the header layout. Declaration HeaderLayoutType HeaderLayout { get; set; } Property Value HeaderLayoutType HideTitleInHeader Gets or sets a value that specifies whether the title in header is hidden on the site. Declaration bool HideTitleInHeader { get; set; } Property Value Boolean HorizontalQuickLaunch Defines whether to enable the Horizontal QuickLaunch for the current web Declaration bool HorizontalQuickLaunch { get; set; } Property Value Boolean Id The Unique ID of the Web object Declaration Guid Id { get; } Property Value Guid IsHomepageModernized Gets a value that indicates whether the homepage is modernized. Declaration bool IsHomepageModernized { get; } Property Value Boolean IsMultilingual Defines whether to enable Multilingual capabilities for the current web Declaration bool IsMultilingual { get; set; } Property Value Boolean IsProvisioningComplete Gets a value that indicates whether the provisioning is complete. Declaration bool IsProvisioningComplete { get; } Property Value Boolean IsRevertHomepageLinkHidden Gets or sets a value that specifies whether the link to revert homepage is hidden. Declaration bool IsRevertHomepageLinkHidden { get; set; } Property Value Boolean Language Gets a value that specifies the LCID for the language that is used on the site. Declaration int Language { get; } Property Value Int32 LastItemModifiedDate Gets a value that specifies when an item was last modified in the site. Declaration DateTime LastItemModifiedDate { get; } Property Value DateTime LastItemUserModifiedDate Gets a value that specifies when an item was last modified by user in the site. Declaration DateTime LastItemUserModifiedDate { get; } Property Value DateTime Lists Collection of lists in the current Web object Declaration IListCollection Lists { get; } Property Value IListCollection LogoAlignment Gets or sets the logo alignment of the site. Declaration LogoAlignment LogoAlignment { get; set; } Property Value LogoAlignment MasterUrl Gets or sets the URL of the master page that is used for the website. Declaration string MasterUrl { get; set; } Property Value String MegaMenuEnabled Gets or sets a value that specifies whether the megamenu is enabled on the site. Declaration bool MegaMenuEnabled { get; set; } Property Value Boolean MembersCanShare Defines whether members can share content from the current web Declaration bool MembersCanShare { get; set; } Property Value Boolean NavAudienceTargetingEnabled Gets or sets a value that specifies whether the audience targeting is enabled on the navigation of the site. Declaration bool NavAudienceTargetingEnabled { get; set; } Property Value Boolean NextStepsFirstRunEnabled Gets or sets a value that specifies whether the next steps first run is enabled on the site. Declaration bool NextStepsFirstRunEnabled { get; set; } Property Value Boolean NoCrawl Defines whether the site has to be crawled or not Declaration bool NoCrawl { get; set; } Property Value Boolean NotificationsInOneDriveForBusinessEnabled Gets a value that indicates whether the notifications in OneDrive for Business is enabled on the site. Declaration bool NotificationsInOneDriveForBusinessEnabled { get; } Property Value Boolean NotificationsInSharePointEnabled Gets a value that indicates whether the notifications in SharePoint is enabled on the site. Declaration bool NotificationsInSharePointEnabled { get; } Property Value Boolean ObjectCacheEnabled Gets or sets a value that specifies whether the object cache is enabled on the site. Declaration bool ObjectCacheEnabled { get; set; } Property Value Boolean OverwriteTranslationsOnChange Defines whether to OverwriteTranslationsOnChange on change for the current web Declaration bool OverwriteTranslationsOnChange { get; set; } Property Value Boolean PreviewFeaturesEnabled Gets a value that indicates whether the preview features are enabled on the site. Declaration bool PreviewFeaturesEnabled { get; } Property Value Boolean PrimaryColor Gets or sets the primary color of the site. Declaration string PrimaryColor { get; set; } Property Value String QuickLaunchEnabled Enables or disables the QuickLaunch for the site Declaration bool QuickLaunchEnabled { get; set; } Property Value Boolean RecycleBin Gets the recycle bin of the website. Declaration IRecycleBinItemCollection RecycleBin { get; } Property Value IRecycleBinItemCollection RecycleBinEnabled Gets or sets a value that specifies whether the Recycle Bin is enabled. Declaration bool RecycleBinEnabled { get; set; } Property Value Boolean RequestAccessEmail The email address to which any access request will be sent Declaration string RequestAccessEmail { get; set; } Property Value String RootFolder Gets the root folder for the website. Declaration IFolder RootFolder { get; } Property Value IFolder SaveSiteAsTemplateEnabled Gets or sets a Boolean value that specifies whether the Web site can be saved as a site template. Declaration bool SaveSiteAsTemplateEnabled { get; set; } Property Value Boolean SearchBoxInNavBar Define if the suitebar search box should show or not Declaration SearchBoxInNavBar SearchBoxInNavBar { get; set; } Property Value SearchBoxInNavBar SearchBoxPlaceholderText Gets or sets the placeholder text in the search box of the current site. Declaration string SearchBoxPlaceholderText { get; set; } Property Value String SearchCenterUrl Defines the Search Center URL Declaration string SearchCenterUrl { get; set; } Property Value String SearchScope Defines the SearchScope for the site Declaration SearchScope SearchScope { get; set; } Property Value SearchScope ServerRelativeUrl Gets the server relative URL of the current site. Declaration string ServerRelativeUrl { get; } Property Value String ShowUrlStructureForCurrentUser Gets a value that specifies whether the current user is able to view the file system structure of this site. Declaration bool ShowUrlStructureForCurrentUser { get; } Property Value Boolean SiteGroups Gets the collection of all groups that belong to the site collection. Declaration ISharePointGroupCollection SiteGroups { get; } Property Value ISharePointGroupCollection SiteLogoDescription Gets or sets the description of the site logo. Declaration string SiteLogoDescription { get; set; } Property Value String SiteLogoUrl Gets or sets the URL of the site logo. Declaration string SiteLogoUrl { get; set; } Property Value String SiteUserInfoList Gets the UserInfo list of the site collection that contains the website. Declaration IList SiteUserInfoList { get; } Property Value IList SiteUsers Gets the collection of all users that belong to the site collection. Declaration ISharePointUserCollection SiteUsers { get; } Property Value ISharePointUserCollection SyndicationEnabled Gets or sets a value that specifies whether the RSS feeds are enabled on the site. Declaration bool SyndicationEnabled { get; set; } Property Value Boolean TenantAdminMembersCanShare Gets or sets a value that specifies how the tenant admin members can share. Declaration int TenantAdminMembersCanShare { get; set; } Property Value Int32 TenantTagPolicyEnabled Gets a value that indicates whether the tenant tag policy is enabled. Declaration bool TenantTagPolicyEnabled { get; } Property Value Boolean ThemeData Gets or sets the theme data of the site. Declaration string ThemeData { get; } Property Value String ThemedCssFolderUrl Gets the theme CSS folder URL. Declaration string ThemedCssFolderUrl { get; } Property Value String ThirdPartyMdmEnabled Gets a value that indicates whether third party MDM is enabled on the site. Declaration bool ThirdPartyMdmEnabled { get; } Property Value Boolean Title The Title of the Site, optional attribute. Declaration string Title { get; set; } Property Value String TreeViewEnabled Gets or sets value that specifies whether the tree view is enabled on the site. Declaration bool TreeViewEnabled { get; set; } Property Value Boolean UIVersion Gets or sets the user interface (UI) version of the Web site. A 32-bit integer between 0 and 127 that specifies the UI version. Declaration int UIVersion { get; set; } Property Value Int32 UIVersionConfigurationEnabled Gets or sets a value that specifies whether the settings UI for visual upgrade is shown or hidden. Declaration bool UIVersionConfigurationEnabled { get; set; } Property Value Boolean Url The URL of the Web object Declaration Uri Url { get; } Property Value Uri UseAccessRequestDefault Gets or sets a value that specifies whether the default access request is used on the site. Declaration bool UseAccessRequestDefault { get; set; } Property Value Boolean Webs Collection of webs in this current web Declaration IWebCollection Webs { get; } Property Value IWebCollection WebTemplate Gets the name of the site definition or site template that was used to create the site. Declaration string WebTemplate { get; } Property Value String WebTemplateConfiguration Gets the web template configuration of the site. Declaration string WebTemplateConfiguration { get; } Property Value String WebTemplatesGalleryFirstRunEnabled Gets a value that indicates whether the web templates gallery first run is enabled. Declaration bool WebTemplatesGalleryFirstRunEnabled { get; } Property Value Boolean WelcomePage Defines the Welcome Page (Home Page) of the site to which the Provisioning Template is applied. Declaration string WelcomePage { get; set; } Property Value String Methods GetFileByServerRelativeUrl(String, Expression<Func<IFile, Object>>[]) Get a file in the current web from its server relative URL. Declaration IFile GetFileByServerRelativeUrl(string serverRelativeUrl, params Expression<Func<IFile, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the file to get. Expression < Func < IFile , Object >>[] expressions Expressions needed to create the request Returns IFile The file to get GetFileByServerRelativeUrlAsync(String, Expression<Func<IFile, Object>>[]) Get a file in the current web from its server relative URL. Declaration Task<IFile> GetFileByServerRelativeUrlAsync(string serverRelativeUrl, params Expression<Func<IFile, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the file to get. Expression < Func < IFile , Object >>[] expressions Expressions needed to create the request Returns Task < IFile > The file to get GetFileByServerRelativeUrlBatch(Batch, String, Expression<Func<IFile, Object>>[]) Get a file in the current web from its server relative URL via batch. Declaration IFile GetFileByServerRelativeUrlBatch(Batch batch, string serverRelativeUrl, params Expression<Func<IFile, object>>[] expressions) Parameters Batch batch Batch to add this request to String serverRelativeUrl The server relative URL of the file to get. Expression < Func < IFile , Object >>[] expressions Expressions needed to create the request Returns IFile The file to get GetFileByServerRelativeUrlBatch(String, Expression<Func<IFile, Object>>[]) Get a file in the current web from its server relative URL via batch. Declaration IFile GetFileByServerRelativeUrlBatch(string serverRelativeUrl, params Expression<Func<IFile, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the file to get. Expression < Func < IFile , Object >>[] expressions Expressions needed to create the request Returns IFile The file to get GetFileByServerRelativeUrlBatchAsync(Batch, String, Expression<Func<IFile, Object>>[]) Get a file in the current web from its server relative URL via batch. Declaration Task<IFile> GetFileByServerRelativeUrlBatchAsync(Batch batch, string serverRelativeUrl, params Expression<Func<IFile, object>>[] expressions) Parameters Batch batch Batch to add this request to String serverRelativeUrl The server relative URL of the file to get. Expression < Func < IFile , Object >>[] expressions Expressions needed to create the request Returns Task < IFile > The file to get GetFileByServerRelativeUrlBatchAsync(String, Expression<Func<IFile, Object>>[]) Get a file in the current web from its server relative URL via batch. Declaration Task<IFile> GetFileByServerRelativeUrlBatchAsync(string serverRelativeUrl, params Expression<Func<IFile, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the file to get. Expression < Func < IFile , Object >>[] expressions Expressions needed to create the request Returns Task < IFile > The file to get GetFolderByServerRelativeUrl(String, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its server relative URL. Declaration IFolder GetFolderByServerRelativeUrl(string serverRelativeUrl, params Expression<Func<IFolder, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns IFolder The folder to get GetFolderByServerRelativeUrlAsync(String, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its server relative URL. Declaration Task<IFolder> GetFolderByServerRelativeUrlAsync(string serverRelativeUrl, params Expression<Func<IFolder, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns Task < IFolder > The folder to get GetFolderByServerRelativeUrlBatch(Batch, String, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its server relative URL via batch. Declaration IFolder GetFolderByServerRelativeUrlBatch(Batch batch, string serverRelativeUrl, params Expression<Func<IFolder, object>>[] expressions) Parameters Batch batch Batch to add this request to String serverRelativeUrl The server relative URL of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns IFolder The folder to get GetFolderByServerRelativeUrlBatch(String, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its server relative URL via batch. Declaration IFolder GetFolderByServerRelativeUrlBatch(string serverRelativeUrl, params Expression<Func<IFolder, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns IFolder The folder to get GetFolderByServerRelativeUrlBatchAsync(Batch, String, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its server relative URL via batch. Declaration Task<IFolder> GetFolderByServerRelativeUrlBatchAsync(Batch batch, string serverRelativeUrl, params Expression<Func<IFolder, object>>[] expressions) Parameters Batch batch Batch to add this request to String serverRelativeUrl The server relative URL of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns Task < IFolder > The folder to get GetFolderByServerRelativeUrlBatchAsync(String, Expression<Func<IFolder, Object>>[]) Get a folder in the current web from its server relative URL via batch. Declaration Task<IFolder> GetFolderByServerRelativeUrlBatchAsync(string serverRelativeUrl, params Expression<Func<IFolder, object>>[] expressions) Parameters String serverRelativeUrl The server relative URL of the folder to get. Expression < Func < IFolder , Object >>[] expressions Expressions needed to create the request Returns Task < IFolder > The folder to get Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.IWebCollection.html": {
    "href": "api/PnP.Core.Model.SharePoint.IWebCollection.html",
    "title": "Interface IWebCollection | PnP Core SDK",
    "keywords": "Interface IWebCollection Public interface to define a collection of Web objects of SharePoint Online Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public interface IWebCollection : IQueryable<IWeb>, IDataModelCollection<IWeb>, IEnumerable<IWeb>, IDataModelParent, IDataModelWithContext, IRequestableCollection Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.SharePoint.ListExperience.html": {
    "href": "api/PnP.Core.Model.SharePoint.ListExperience.html",
    "title": "Enum ListExperience | PnP Core SDK",
    "keywords": "Enum ListExperience List experience, determines how a list is presented (modern or classic) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ListExperience : int Auto SPO will automatically define the right experience based on the settings of the current list, it is the default value. ClassicExperience The Classic experience will be forced for the current list. NewExperience The Modern experience will be forced for the current list. Extension Methods DataModelExtensions.IsPropertyAvailable<ListExperience>(Expression<Func<ListExperience, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ListExtensions.html": {
    "href": "api/PnP.Core.Model.SharePoint.ListExtensions.html",
    "title": "Class ListExtensions | PnP Core SDK",
    "keywords": "Class ListExtensions List extension methods Inheritance Object ListExtensions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public static class ListExtensions : object Methods GetById(IQueryable<IList>, Guid) Extension method to select a list (IList) by id Declaration public static IList GetById(this IQueryable<IList> source, Guid id) Parameters IQueryable < IList > source The collection of lists to get the list by title from Guid id The id to search for Returns IList The resulting list instance, if any GetById(IQueryable<IList>, Guid, Expression<Func<IList, Object>>[]) Extension method to select a list (IList) by id Declaration public static IList GetById(this IQueryable<IList> source, Guid id, params Expression<Func<IList, object>>[] selectors) Parameters IQueryable < IList > source The collection of lists to get the list by title from Guid id The id to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The resulting list instance, if any GetByIdAsync(IQueryable<IList>, Guid) Extension method to select a list (IList) by id Declaration public static Task<IList> GetByIdAsync(this IQueryable<IList> source, Guid id) Parameters IQueryable < IList > source The collection of lists to get the list by title from Guid id The id to search for Returns Task < IList > The resulting list instance, if any GetByIdAsync(IQueryable<IList>, Guid, Expression<Func<IList, Object>>[]) Extension method to select a list (IList) by id Declaration public static Task<IList> GetByIdAsync(this IQueryable<IList> source, Guid id, params Expression<Func<IList, object>>[] selectors) Parameters IQueryable < IList > source The collection of lists to get the list by title from Guid id The id to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns Task < IList > The resulting list instance, if any GetByTitle(IQueryable<IList>, String) Extension method to select a list (IList) by title Declaration public static IList GetByTitle(this IQueryable<IList> source, string title) Parameters IQueryable < IList > source The collection of lists to get the list by title from String title The title to search for Returns IList The resulting list instance, if any GetByTitle(IQueryable<IList>, String, Expression<Func<IList, Object>>[]) Extension method to select a list (IList) by title Declaration public static IList GetByTitle(this IQueryable<IList> source, string title, params Expression<Func<IList, object>>[] selectors) Parameters IQueryable < IList > source The collection of lists to get the list by title from String title The title to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns IList The resulting list instance, if any GetByTitleAsync(IQueryable<IList>, String) Extension method to select a list (IList) by title asynchronously Declaration public static Task<IList> GetByTitleAsync(this IQueryable<IList> source, string title) Parameters IQueryable < IList > source The collection of lists to get the list by title from String title The title to search for Returns Task < IList > The resulting list instance, if any GetByTitleAsync(IQueryable<IList>, String, Expression<Func<IList, Object>>[]) Extension method to select a list (IList) by title asynchronously Declaration public static Task<IList> GetByTitleAsync(this IQueryable<IList> source, string title, params Expression<Func<IList, object>>[] selectors) Parameters IQueryable < IList > source The collection of lists to get the list by title from String title The title to search for Expression < Func < IList , Object >>[] selectors The expressions declaring the fields to select Returns Task < IList > The resulting list instance, if any"
  },
  "api/PnP.Core.Model.SharePoint.ListItemExtensions.html": {
    "href": "api/PnP.Core.Model.SharePoint.ListItemExtensions.html",
    "title": "Class ListItemExtensions | PnP Core SDK",
    "keywords": "Class ListItemExtensions ListItem extension methods Inheritance Object ListItemExtensions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public static class ListItemExtensions : object Methods GetById(IQueryable<IListItem>, Int32) Extension method to select a list item (IListItem) by Id Declaration public static IListItem GetById(this IQueryable<IListItem> source, int id) Parameters IQueryable < IListItem > source The collection of lists items to get the item by Id from Int32 id The Id to search for Returns IListItem The resulting list item instance, if any GetById(IQueryable<IListItem>, Int32, Expression<Func<IListItem, Object>>[]) Extension method to select a list item (IListItem) by Id Declaration public static IListItem GetById(this IQueryable<IListItem> source, int id, params Expression<Func<IListItem, object>>[] selectors) Parameters IQueryable < IListItem > source The collection of lists items to get the item by Id from Int32 id The Id to search for Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select Returns IListItem The resulting list item instance, if any GetByIdAsync(IQueryable<IListItem>, Int32) Extension method to select a list item (IListItem) by Id asynchronously Declaration public static Task<IListItem> GetByIdAsync(this IQueryable<IListItem> source, int id) Parameters IQueryable < IListItem > source The collection of lists items to get the item by Id from Int32 id The Id to search for Returns Task < IListItem > The resulting list item instance, if any GetByIdAsync(IQueryable<IListItem>, Int32, Expression<Func<IListItem, Object>>[]) Extension method to select a list item (IListItem) by Id asynchronously Declaration public static Task<IListItem> GetByIdAsync(this IQueryable<IListItem> source, int id, params Expression<Func<IListItem, object>>[] selectors) Parameters IQueryable < IListItem > source The collection of lists items to get the item by Id from Int32 id The Id to search for Expression < Func < IListItem , Object >>[] selectors The expressions declaring the fields to select Returns Task < IListItem > The resulting list item instance, if any"
  },
  "api/PnP.Core.Model.SharePoint.ListPageRenderType.html": {
    "href": "api/PnP.Core.Model.SharePoint.ListPageRenderType.html",
    "title": "Enum ListPageRenderType | PnP Core SDK",
    "keywords": "Enum ListPageRenderType List Page Render Type (e.g. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/mt796270(v=office.15) ) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ListPageRenderType : int AnonymousUser CustomizedForm CustomizedPage DocLibNewForm DropOffLibrary HasBusinessDataField HasCustomActionWithCode HasGeolocationField HasMetadataNavFeature HasPublishingfield HasTaskOutcomeField InvalidControModeInForm InvalidFieldTypeInForm JSLinkCustomization ListSettingOff ListTemplateNotSupported ListTypeNoSupportForModernMode Modern MultipeWePart NoSPList SiteSettingOff SpecialViewType TenantSettingOff Undefined UnsupportedFieldTypeInForm WebSettingOff WikiPage XslLinkCustomization Extension Methods DataModelExtensions.IsPropertyAvailable<ListPageRenderType>(Expression<Func<ListPageRenderType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ListReadingDirection.html": {
    "href": "api/PnP.Core.Model.SharePoint.ListReadingDirection.html",
    "title": "Enum ListReadingDirection | PnP Core SDK",
    "keywords": "Enum ListReadingDirection Reading direction of the list Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ListReadingDirection : int LTR Left to Right None None RTL Right to Left Extension Methods DataModelExtensions.IsPropertyAvailable<ListReadingDirection>(Expression<Func<ListReadingDirection, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.ListTemplateType.html": {
    "href": "api/PnP.Core.Model.SharePoint.ListTemplateType.html",
    "title": "Enum ListTemplateType | PnP Core SDK",
    "keywords": "Enum ListTemplateType Enumeration to define the list template types for SharePoint Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum ListTemplateType : int AccessApp AccessApp list type AccessRequest AccessRequest list type AdminTasks AdminTasks list type Agenda Agenda list type AlchemyApprovalWorkflow AlchemyApprovalWorkflow list type AlchemyMobileForm AlchemyMobileForm list type Announcements Announcements list type AppDataCatalog AppDataCatalog list type AppFilesCatalog AppFilesCatalog list type CallTrack CallTrack list type Categories Categories list type Circulation Circulation list type Comments Comments list type Contacts Contacts list type ContentCenterPrimeLibrary ContentCenterPrimeLibrary list type ContentCenterSampleLibrary ContentCenterSampleLibrary list type CustomGrid CustomGrid list type DataConnectionLibrary DataConnectionLibrary list type DataSources DataSources list type Decision Decision list type DesignCatalog DesignCatalog list type DeveloperSiteDraftApps DeveloperSiteDraftApps list type DiscussionBoard DiscussionBoard list type DocumentLibrary DocumentLibrary list type Events Events list type ExternalList ExternalList list type Facility Facility list type FormulasTable FormulasTable list type GanttTasks GanttTasks list type GenericList GenericList list type HashtagStore HashtagStore list type HealthReports HealthReports list type HealthRules HealthRules list type HelpLibrary HelpLibrary list type Holidays Holidays list type HomePageLibrary HomePageLibrary list type IMEDic IMEDic list type InvalidType InvalidType list type IssueTracking IssueTracking list type ItemReferenceCollection ItemReferenceCollection list type ItemReferenceReference ItemReferenceReference list type ItemReferenceReferenceCollection ItemReferenceReferenceCollection list type Links Links list type ListTemplateCatalog ListTemplateCatalog list type MaintenanceLogs MaintenanceLogs list type MasterPageCatalog MasterPageCatalog list type MeetingObjective MeetingObjective list type Meetings Meetings list type MeetingUser MeetingUser list type MySiteDocumentLibrary MySiteDocumentLibrary list type NoCodePublic NoCodePublic list type NoCodeWorkflows NoCodeWorkflows list type NoListTemplate NoListTemplate list type PictureLibrary PictureLibrary list type Posts Posts list type PromotedLinks PromotedLinks list type RecipesTable RecipesTable list type SharingLinks SharingLinks list type SolutionCatalog SolutionCatalog list type Survey Survey list type Tasks Tasks list type TasksWithTimelineAndHierarchy TasksWithTimelineAndHierarchy list type TextBox TextBox list type ThemeCatalog ThemeCatalog list type ThingsToBring ThingsToBring list type Timecard Timecard list type UserInformation UserInformation list type WebPageLibrary WebPageLibrary list type WebPartCatalog WebPartCatalog list type WebTemplateCatalog WebTemplateCatalog list type WebTemplateExtensionsList WebTemplateExtensionsList list type Whereabouts Whereabouts list type WorkflowHistory WorkflowHistory list type WorkflowProcess WorkflowProcess list type XMLForm XMLForm list type Extension Methods DataModelExtensions.IsPropertyAvailable<ListTemplateType>(Expression<Func<ListTemplateType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.LogoAlignment.html": {
    "href": "api/PnP.Core.Model.SharePoint.LogoAlignment.html",
    "title": "Enum LogoAlignment | PnP Core SDK",
    "keywords": "Enum LogoAlignment Logo alignment in extended header layout Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum LogoAlignment : int Left Left alignement ( Value = 0 ) Middle Middle alignment ( Value = 1 ) Right Right alignment ( Value = 2 ) Extension Methods DataModelExtensions.IsPropertyAvailable<LogoAlignment>(Expression<Func<LogoAlignment, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.MoveCopyOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.MoveCopyOptions.html",
    "title": "Class MoveCopyOptions | PnP Core SDK",
    "keywords": "Class MoveCopyOptions Options for move and copy operations Inheritance Object MoveCopyOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class MoveCopyOptions : object Properties KeepBoth Indicates whether both resources should be kept if a resource already exists at the specified destination. Declaration public bool KeepBoth { get; set; } Property Value Boolean ResetAuthorAndCreatedOnCopy Indicates whether to reset author and creation datetime on the copied resource. Declaration public bool ResetAuthorAndCreatedOnCopy { get; set; } Property Value Boolean ShouldBypassSharedLocks Indicates whether the shared locks on the source resource should be by passed. Declaration public bool ShouldBypassSharedLocks { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.MoveOperations.html": {
    "href": "api/PnP.Core.Model.SharePoint.MoveOperations.html",
    "title": "Enum MoveOperations | PnP Core SDK",
    "keywords": "Enum MoveOperations Specifies criteria for how to move files. This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values. (see https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/ee542328(v=office.15) ) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum MoveOperations : int AllowBrokenThickets Complete the move operation even if supporting files are separated from the file. The value = 8. BypassApprovePermission None No move operation specified. The value = 0. Overwrite Overwrite a file with the same name if it exists. The value = 1. Extension Methods DataModelExtensions.IsPropertyAvailable<MoveOperations>(Expression<Func<MoveOperations, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.RecycleBinItemExtensions.html": {
    "href": "api/PnP.Core.Model.SharePoint.RecycleBinItemExtensions.html",
    "title": "Class RecycleBinItemExtensions | PnP Core SDK",
    "keywords": "Class RecycleBinItemExtensions RecycleBinItem extension methods Inheritance Object RecycleBinItemExtensions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public static class RecycleBinItemExtensions : object Methods GetById(IQueryable<IRecycleBinItem>, Guid) Extension method to select a recycle bin item ( IRecycleBinItem ) by id Declaration public static IRecycleBinItem GetById(this IQueryable<IRecycleBinItem> source, Guid id) Parameters IQueryable < IRecycleBinItem > source The collection of recycle bin items to get the item by Id from Guid id The Id to search for Returns IRecycleBinItem The resulting recycle bin item instance, if any GetById(IQueryable<IRecycleBinItem>, Guid, Expression<Func<IRecycleBinItem, Object>>[]) Extension method to select a recycle bin item ( IRecycleBinItem ) by id Declaration public static IRecycleBinItem GetById(this IQueryable<IRecycleBinItem> source, Guid id, params Expression<Func<IRecycleBinItem, object>>[] selectors) Parameters IQueryable < IRecycleBinItem > source The collection of recycle bin items to get the item by Id from Guid id The Id to search for Expression < Func < IRecycleBinItem , Object >>[] selectors The expressions declaring the fields to select Returns IRecycleBinItem The resulting recycle bin item instance, if any GetByIdAsync(IQueryable<IRecycleBinItem>, Guid) Extension method to select a recycle bin item ( IRecycleBinItem ) by id asynchronously Declaration public static Task<IRecycleBinItem> GetByIdAsync(this IQueryable<IRecycleBinItem> source, Guid id) Parameters IQueryable < IRecycleBinItem > source The collection of recycle bin items to get the item by Id from Guid id The Id to search for Returns Task < IRecycleBinItem > The resulting recycle bin item instance, if any GetByIdAsync(IQueryable<IRecycleBinItem>, Guid, Expression<Func<IRecycleBinItem, Object>>[]) Extension method to select a recycle bin item ( IRecycleBinItem ) by id asynchronously Declaration public static Task<IRecycleBinItem> GetByIdAsync(this IQueryable<IRecycleBinItem> source, Guid id, params Expression<Func<IRecycleBinItem, object>>[] selectors) Parameters IQueryable < IRecycleBinItem > source The collection of recycle bin items to get the item by Id from Guid id The Id to search for Expression < Func < IRecycleBinItem , Object >>[] selectors The expressions declaring the fields to select Returns Task < IRecycleBinItem > The resulting recycle bin item instance, if any"
  },
  "api/PnP.Core.Model.SharePoint.RecycleBinItemState.html": {
    "href": "api/PnP.Core.Model.SharePoint.RecycleBinItemState.html",
    "title": "Enum RecycleBinItemState | PnP Core SDK",
    "keywords": "Enum RecycleBinItemState Specifies the Recycle Bin stage of the Recycle Bin item. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum RecycleBinItemState : int FirstStageRecycleBin Specifies that the Recycle Bin item is in the user Recycle Bin. The value = 1. None The stage of the Recycle Bin item is not specified. The value = 0. SecondStageRecycleBin Specifies that the Recycle Bin Item is in the site collection Recycle Bin. The value = 2. Extension Methods DataModelExtensions.IsPropertyAvailable<RecycleBinItemState>(Expression<Func<RecycleBinItemState, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.RecycleBinItemType.html": {
    "href": "api/PnP.Core.Model.SharePoint.RecycleBinItemType.html",
    "title": "Enum RecycleBinItemType | PnP Core SDK",
    "keywords": "Enum RecycleBinItemType Specifies the type of the Recycle Bin item. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum RecycleBinItemType : int App Specifies that that Recycle Bin item is an app. The value = 11 Attachment Specifies that the Recycle Bin item is an attachment. The value = 7. CascadeParent Specifies that the Recycle Bin item is a list item that is the parent of one or more related list items. The value = 9. File Specifies that the Recycle Bin item is a file. The value = 1. FileVersion Specifies that the Recycle Bin item is a historical version of a file. The value = 2. Folder Specifies that the Recycle Bin item is a folder. The value = 5. FolderWithLists Specifies that the Recycle Bin item is a folder that contains a list. The value = 6. List Specifies that the Recycle Bin item is a list. The value = 4. ListItem Specifies that the Recycle Bin item is a list item. The value = 3. ListItemVersion Specifies that the Recycle Bin item is a historical version of a list item. The value = 8. None The type of the Recycle Bin item is not specified. The value = 0. Web Specifies that the Recycle Bin item is a site (Web object). The value = 10. Extension Methods DataModelExtensions.IsPropertyAvailable<RecycleBinItemType>(Expression<Func<RecycleBinItemType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.RelationshipDeleteBehaviorType.html": {
    "href": "api/PnP.Core.Model.SharePoint.RelationshipDeleteBehaviorType.html",
    "title": "Enum RelationshipDeleteBehaviorType | PnP Core SDK",
    "keywords": "Enum RelationshipDeleteBehaviorType Specifies the optional relationship behavior of a relationship lookup field. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-csom/ee537368%28v%3doffice.15%29 Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum RelationshipDeleteBehaviorType : int Cascade Enumeration whose value specifies the cascade behavior. Value = 1. None Enumeration whose value specifies that no relationship behavior is applied. . Value = 0. Restrict Enumeration whose value specifies the restrict behavior. Value = 2. Extension Methods DataModelExtensions.IsPropertyAvailable<RelationshipDeleteBehaviorType>(Expression<Func<RelationshipDeleteBehaviorType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.RenderListDataOptions.html": {
    "href": "api/PnP.Core.Model.SharePoint.RenderListDataOptions.html",
    "title": "Class RenderListDataOptions | PnP Core SDK",
    "keywords": "Class RenderListDataOptions Options to configure the rendering of list data via the RenderListDataAsStream method of IList See https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/working-with-lists-and-list-items-with-rest#renderlistdataasstream-body-parameter-properties Inheritance Object RenderListDataOptions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public class RenderListDataOptions : object Properties AddRequiredFields Specifies if required fields should be returned or not Declaration public bool? AddRequiredFields { get; set; } Property Value Nullable < Boolean > AllowMultipleValueFilterForTaxonomyFields Specifies if multi value filtering is allowed for taxonomy fields or not Declaration public bool? AllowMultipleValueFilterForTaxonomyFields { get; set; } Property Value Nullable < Boolean > AudienceTarget Audience to use while processing this request Declaration public bool? AudienceTarget { get; set; } Property Value Nullable < Boolean > DatesInUtc Specifies if we return DateTime field in UTC or local time Declaration public bool? DatesInUtc { get; set; } Property Value Nullable < Boolean > DeferredRender Use a deferred render? Declaration public bool? DeferredRender { get; set; } Property Value Nullable < Boolean > ExpandGroups Specifies if the grouping should be expanded or not Declaration public bool? ExpandGroups { get; set; } Property Value Nullable < Boolean > FirstGroupOnly Specifies if only the first group should be returned or not (regardless of view schema) Declaration public bool? FirstGroupOnly { get; set; } Property Value Nullable < Boolean > FolderServerRelativeUrl Specifies the url to the folder from which to return items Declaration public string FolderServerRelativeUrl { get; set; } Property Value String ImageFieldsToTryRewriteToCdnUrls Comma-separated list of field names whose values should be rewritten to CDN URLs Declaration public string ImageFieldsToTryRewriteToCdnUrls { get; set; } Property Value String MergeDefaultView Merge with the default view? Declaration public bool? MergeDefaultView { get; set; } Property Value Nullable < Boolean > OriginalDate Return the original date? Declaration public bool? OriginalDate { get; set; } Property Value Nullable < Boolean > OverrideViewXml Specifies the override XML to be combined with the View CAML. Applies only to the Query/Where part of the View CAML Declaration public string OverrideViewXml { get; set; } Property Value String Paging Specifies the paging information Declaration public string Paging { get; set; } Property Value String RenderOptions Specifies the type of output to return Declaration public RenderListDataOptionsFlags? RenderOptions { get; set; } Property Value Nullable < RenderListDataOptionsFlags > ReplaceGroup Specifies if the grouping should be replaced or not to deal with GroupBy throttling Declaration public bool? ReplaceGroup { get; set; } Property Value Nullable < Boolean > ViewXml Specifies the CAML view XML Declaration public string ViewXml { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.html": {
    "href": "api/PnP.Core.Model.SharePoint.RenderListDataOptionsFlags.html",
    "title": "Enum RenderListDataOptionsFlags | PnP Core SDK",
    "keywords": "Enum RenderListDataOptionsFlags Options to setup on the RenderListDataOptions RenderOptions property See https://docs.microsoft.com/en-us/sharepoint/dev/sp-add-ins/working-with-lists-and-list-items-with-rest#sprenderlistdataoptions-options Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum RenderListDataOptionsFlags : int ClientFormSchema Returns the client form schema to add and edit items ClientSideComponentManifest Return client-side component manifest information associated with the list (reserved for future use) ContextInfo Return list context information DisableAutoHyperlink Prevents AutoHyperlink from being run on text fields in this query EnableMediaTAUrls Enables URLs pointing to Media TA service, such as .thumbnailUrl, .videoManifestUrl, .pdfConversionUrls FileSystemItemId The returned list will have a FileSystemItemId field on each item if possible. Must be combined with the ListData flag ListContentType Returns information about list content types. Must be combined with the ContextInfo flag ListData Return list data (same as None) ListSchema Return list schema MenuView Return HTML for the list menu None Return default output PageContextInfo Returns page context info for the current list being rendered ParentInfo Returns parent folder information QuickLaunch Returns QuickLaunch navigation nodes Spotlight Returns Spotlight rendering information ViewMetadata Returns view XML and other information about the current view Visualization Returns Visualization rendering information Extension Methods DataModelExtensions.IsPropertyAvailable<RenderListDataOptionsFlags>(Expression<Func<RenderListDataOptionsFlags, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.SearchBoxInNavBar.html": {
    "href": "api/PnP.Core.Model.SharePoint.SearchBoxInNavBar.html",
    "title": "Enum SearchBoxInNavBar | PnP Core SDK",
    "keywords": "Enum SearchBoxInNavBar Searchbox in navigation options Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum SearchBoxInNavBar : int AllPages Show on all pages Hidden Don't show the search box in the navigation bar Inherit Inherit site config ModernOnly Show on modern pages only Extension Methods DataModelExtensions.IsPropertyAvailable<SearchBoxInNavBar>(Expression<Func<SearchBoxInNavBar, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.SearchScope.html": {
    "href": "api/PnP.Core.Model.SharePoint.SearchScope.html",
    "title": "Enum SearchScope | PnP Core SDK",
    "keywords": "Enum SearchScope Search scopes of the site Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum SearchScope : int DefaultScope Defines the DefaultScope for the SearchScope of the site Hub Defines the Hub for the SearchScope of the site Site Defines the Site for the SearchScope of the site Tenant Defines the Tenant for the SearchScope of the site Extension Methods DataModelExtensions.IsPropertyAvailable<SearchScope>(Expression<Func<SearchScope, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.SPEffectiveInformationRightsManagementSettingsSource.html": {
    "href": "api/PnP.Core.Model.SharePoint.SPEffectiveInformationRightsManagementSettingsSource.html",
    "title": "Enum SPEffectiveInformationRightsManagementSettingsSource | PnP Core SDK",
    "keywords": "Enum SPEffectiveInformationRightsManagementSettingsSource The source of settings for the effective IRM of a file. https://docs.microsoft.com/en-us/previous-versions/office/sharepoint-server/mt684131(v=office.15) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum SPEffectiveInformationRightsManagementSettingsSource : int File File List List None None Rule Rule Extension Methods DataModelExtensions.IsPropertyAvailable<SPEffectiveInformationRightsManagementSettingsSource>(Expression<Func<SPEffectiveInformationRightsManagementSettingsSource, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.TermGroupExtensions.html": {
    "href": "api/PnP.Core.Model.SharePoint.TermGroupExtensions.html",
    "title": "Class TermGroupExtensions | PnP Core SDK",
    "keywords": "Class TermGroupExtensions TermGroup extension methods Inheritance Object TermGroupExtensions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public static class TermGroupExtensions : object Methods GetById(IQueryable<ITermGroup>, String) Extension method to select a term group by id Declaration public static ITermGroup GetById(this IQueryable<ITermGroup> source, string id) Parameters IQueryable < ITermGroup > source The collection of groups to get the group by id from String id The id to search for Returns ITermGroup The resulting term group instance, if any GetById(IQueryable<ITermGroup>, String, Expression<Func<ITermGroup, Object>>[]) Extension method to select a term group by id Declaration public static ITermGroup GetById(this IQueryable<ITermGroup> source, string id, params Expression<Func<ITermGroup, object>>[] selectors) Parameters IQueryable < ITermGroup > source The collection of groups to get the group by id from String id The id to search for Expression < Func < ITermGroup , Object >>[] selectors The expressions declaring the fields to select Returns ITermGroup The resulting term group instance, if any GetByIdAsync(IQueryable<ITermGroup>, String) Extension method to select a term group by id Declaration public static Task<ITermGroup> GetByIdAsync(this IQueryable<ITermGroup> source, string id) Parameters IQueryable < ITermGroup > source The collection of groups to get the group by id from String id The id to search for Returns Task < ITermGroup > The resulting term group instance, if any GetByIdAsync(IQueryable<ITermGroup>, String, Expression<Func<ITermGroup, Object>>[]) Extension method to select a term group by id Declaration public static Task<ITermGroup> GetByIdAsync(this IQueryable<ITermGroup> source, string id, params Expression<Func<ITermGroup, object>>[] selectors) Parameters IQueryable < ITermGroup > source The collection of groups to get the group by id from String id The id to search for Expression < Func < ITermGroup , Object >>[] selectors The expressions declaring the fields to select Returns Task < ITermGroup > The resulting term group instance, if any GetByName(IQueryable<ITermGroup>, String) Extension method to select a term group by name Declaration public static ITermGroup GetByName(this IQueryable<ITermGroup> source, string name) Parameters IQueryable < ITermGroup > source The collection of groups to get the group by name from String name The name to search for Returns ITermGroup The resulting term group instance, if any GetByName(IQueryable<ITermGroup>, String, Expression<Func<ITermGroup, Object>>[]) Extension method to select a term group by name Declaration public static ITermGroup GetByName(this IQueryable<ITermGroup> source, string name, params Expression<Func<ITermGroup, object>>[] selectors) Parameters IQueryable < ITermGroup > source The collection of groups to get the group by name from String name The name to search for Expression < Func < ITermGroup , Object >>[] selectors The expressions declaring the fields to select Returns ITermGroup The resulting term group instance, if any GetByNameAsync(IQueryable<ITermGroup>, String) Extension method to select a term group by name Declaration public static Task<ITermGroup> GetByNameAsync(this IQueryable<ITermGroup> source, string name) Parameters IQueryable < ITermGroup > source The collection of groups to get the group by id from String name The name to search for Returns Task < ITermGroup > The resulting term group instance, if any GetByNameAsync(IQueryable<ITermGroup>, String, Expression<Func<ITermGroup, Object>>[]) Extension method to select a term group by name Declaration public static Task<ITermGroup> GetByNameAsync(this IQueryable<ITermGroup> source, string name, params Expression<Func<ITermGroup, object>>[] selectors) Parameters IQueryable < ITermGroup > source The collection of groups to get the group by id from String name The name to search for Expression < Func < ITermGroup , Object >>[] selectors The expressions declaring the fields to select Returns Task < ITermGroup > The resulting term group instance, if any"
  },
  "api/PnP.Core.Model.SharePoint.TermGroupScope.html": {
    "href": "api/PnP.Core.Model.SharePoint.TermGroupScope.html",
    "title": "Enum TermGroupScope | PnP Core SDK",
    "keywords": "Enum TermGroupScope Returns type of group. Possible values are 'global', 'system' and 'siteCollection'. Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum TermGroupScope : int Global Global term group SiteCollection Site collection term group System System term group Extension Methods DataModelExtensions.IsPropertyAvailable<TermGroupScope>(Expression<Func<TermGroupScope, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.TermRelationType.html": {
    "href": "api/PnP.Core.Model.SharePoint.TermRelationType.html",
    "title": "Enum TermRelationType | PnP Core SDK",
    "keywords": "Enum TermRelationType Type of relationship between two terms Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum TermRelationType : int Pin In a pin relationship, a term can be pinned under a different term in a different term set. In a pinned relationship, new children to the term can only be added in the term set in which the term was created. Any change in the hierarchy under the term is reflected across the sets in which the term was pinned. Reuse The reuse relationship is similar to the pinned relationship except that changes to the reused term can be made from any hierarchy in which the term is reused. Also, a change in hierarchy made to the reused term does not get reflected in the other term sets in which the term is reused. Extension Methods DataModelExtensions.IsPropertyAvailable<TermRelationType>(Expression<Func<TermRelationType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.TermSetExtensions.html": {
    "href": "api/PnP.Core.Model.SharePoint.TermSetExtensions.html",
    "title": "Class TermSetExtensions | PnP Core SDK",
    "keywords": "Class TermSetExtensions TermSet extension methods Inheritance Object TermSetExtensions Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public static class TermSetExtensions : object Methods GetById(IQueryable<ITermSet>, String) Extension method to select a term set by id Declaration public static ITermSet GetById(this IQueryable<ITermSet> source, string id) Parameters IQueryable < ITermSet > source The collection of sets to get term set by id from String id The id to search for Returns ITermSet The resulting term set instance, if any GetById(IQueryable<ITermSet>, String, Expression<Func<ITermSet, Object>>[]) Extension method to select a term set by id Declaration public static ITermSet GetById(this IQueryable<ITermSet> source, string id, params Expression<Func<ITermSet, object>>[] selectors) Parameters IQueryable < ITermSet > source The collection of sets to get term set by id from String id The id to search for Expression < Func < ITermSet , Object >>[] selectors The expressions declaring the fields to select Returns ITermSet The resulting term set instance, if any GetByIdAsync(IQueryable<ITermSet>, String) Extension method to select a term set by id Declaration public static Task<ITermSet> GetByIdAsync(this IQueryable<ITermSet> source, string id) Parameters IQueryable < ITermSet > source The collection of sets to get term set by id from String id The id to search for Returns Task < ITermSet > The resulting term set instance, if any GetByIdAsync(IQueryable<ITermSet>, String, Expression<Func<ITermSet, Object>>[]) Extension method to select a term set by id Declaration public static Task<ITermSet> GetByIdAsync(this IQueryable<ITermSet> source, string id, params Expression<Func<ITermSet, object>>[] selectors) Parameters IQueryable < ITermSet > source The collection of sets to get term set by id from String id The id to search for Expression < Func < ITermSet , Object >>[] selectors The expressions declaring the fields to select Returns Task < ITermSet > The resulting term set instance, if any"
  },
  "api/PnP.Core.Model.SharePoint.UrlFieldFormatType.html": {
    "href": "api/PnP.Core.Model.SharePoint.UrlFieldFormatType.html",
    "title": "Enum UrlFieldFormatType | PnP Core SDK",
    "keywords": "Enum UrlFieldFormatType Format of the Url field Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum UrlFieldFormatType : int Hyperlink Specify that the value must be displayed as a hyperlink. Image Specify that the value must be displayed as an image. Extension Methods DataModelExtensions.IsPropertyAvailable<UrlFieldFormatType>(Expression<Func<UrlFieldFormatType, Object>>)"
  },
  "api/PnP.Core.Model.SharePoint.VariantThemeType.html": {
    "href": "api/PnP.Core.Model.SharePoint.VariantThemeType.html",
    "title": "Enum VariantThemeType | PnP Core SDK",
    "keywords": "Enum VariantThemeType Footer Variant theme type (see https://github.com/microsoft/fluentui/tree/master/packages/variants ) Namespace : PnP.Core.Model.SharePoint Assembly : PnP.Core.dll Syntax public enum VariantThemeType : int Neutral neutral variant - light shade of original background as background ( Value = 1 ) None no emphasis - appears as normal ( Value = 0 ) Soft soft variant - light tint of the primary color as background ( Value = 2 ) Strong strong variant - primary color as background, text uses original background color; white on brand blue by default ( Value = 3 ) Extension Methods DataModelExtensions.IsPropertyAvailable<VariantThemeType>(Expression<Func<VariantThemeType, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ChatMessageContentType.html": {
    "href": "api/PnP.Core.Model.Teams.ChatMessageContentType.html",
    "title": "Enum ChatMessageContentType | PnP Core SDK",
    "keywords": "Enum ChatMessageContentType Chat message content types Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum ChatMessageContentType : int Html Chat message uses html Text Chat message uses text only Extension Methods DataModelExtensions.IsPropertyAvailable<ChatMessageContentType>(Expression<Func<ChatMessageContentType, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ChatMessageImportance.html": {
    "href": "api/PnP.Core.Model.Teams.ChatMessageImportance.html",
    "title": "Enum ChatMessageImportance | PnP Core SDK",
    "keywords": "Enum ChatMessageImportance The importance of the chat message. Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum ChatMessageImportance : int High High importance Normal Normal importance Urgent Urgent importance Extension Methods DataModelExtensions.IsPropertyAvailable<ChatMessageImportance>(Expression<Func<ChatMessageImportance, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ChatMessageReactionType.html": {
    "href": "api/PnP.Core.Model.Teams.ChatMessageReactionType.html",
    "title": "Enum ChatMessageReactionType | PnP Core SDK",
    "keywords": "Enum ChatMessageReactionType Types of reactions to a chat message Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum ChatMessageReactionType : int Angry Angry reaction Heart Heart reaction Laugh Laugh reaction Like Like reaction Sad Sad reaction Surprised Surprised reaction Extension Methods DataModelExtensions.IsPropertyAvailable<ChatMessageReactionType>(Expression<Func<ChatMessageReactionType, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ChatMessageType.html": {
    "href": "api/PnP.Core.Model.Teams.ChatMessageType.html",
    "title": "Enum ChatMessageType | PnP Core SDK",
    "keywords": "Enum ChatMessageType Types of chat messages Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum ChatMessageType : int Message Message type Extension Methods DataModelExtensions.IsPropertyAvailable<ChatMessageType>(Expression<Func<ChatMessageType, Object>>)"
  },
  "api/PnP.Core.Model.Teams.html": {
    "href": "api/PnP.Core.Model.Teams.html",
    "title": "Namespace PnP.Core.Model.Teams | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Model.Teams Classes TeamChannelExtensions TeamChannel extension methods Interfaces ITeam Public interface to define a Team object of Microsoft Teams ITeamApp Defines a Microsoft Teams App installation ITeamAppCollection Public interface to define a collection of TeamApp objects of Microsoft Teams ITeamAsyncOperation Represents a Microsoft Teams async operation ITeamChannel Defines a Channel of Microsoft Teams ITeamChannelCollection Public interface to define a collection of Team Channels ITeamChannelTab Defines the tab in a Team channel ITeamChannelTabCollection Public interface to define a collection of Tabs for a Team Channel ITeamChannelTabConfiguration Public interface to define the configuration settings for a Team tab ITeamChatMessage Represents an individual chat message within a channel or chat. The chat message can be a root chat message or part of a reply thread that is defined by the replyToId property in the chat message. ITeamChatMessageAttachment Attachments connected to a chat message ITeamChatMessageCollection A chat is a collection of chatMessages between one or more participants. Participants can be users or apps. ITeamChatMessageContent Public interface to define the content of a chat message ITeamChatMessageMention Represents a mention in a chatMessage entity. The mention can be to a user, team, bot, or channel. ITeamChatMessageReaction Represents a reaction to a chatMessage entity. ITeamClassSettings Public interface to define the settings for a classroom ITeamDiscoverySettings Public interface to define the discovery settings for a Team ITeamFunSettings Public interface to define the fun settings for a Team ITeamGuestSettings Public interface to define the guest settings for a Team ITeamIdentitySet Identity information about a Teams element ITeamMembersSettings Public interface to define the memebers settings for a Team ITeamMessagingSettings Public interface to define the messaging settings for a Team Enums ChatMessageContentType Chat message content types ChatMessageImportance The importance of the chat message. ChatMessageReactionType Types of reactions to a chat message ChatMessageType Types of chat messages TeamChannelMembershipType Defines the Membership Type for a Team Channel TeamGiphyContentRating Giphy content rating for giphies being used in a team TeamsAppDistributionMethod Distribution method of the team app TeamSpecialization Defines the Specialization options for a Team TeamVisibility Defines the Visibility for a Team"
  },
  "api/PnP.Core.Model.Teams.ITeam.html": {
    "href": "api/PnP.Core.Model.Teams.ITeam.html",
    "title": "Interface ITeam | PnP Core SDK",
    "keywords": "Interface ITeam Public interface to define a Team object of Microsoft Teams Inherited Members IDataModel<ITeam>.HasValue(String) IDataModel<ITeam>.HasChanged(String) IDataModel<ITeam>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeam>.GetBatchAsync(Batch, Expression<Func<ITeam, Object>>[]) IDataModelGet<ITeam>.GetBatchAsync(Expression<Func<ITeam, Object>>[]) IDataModelGet<ITeam>.GetBatch(Batch, Expression<Func<ITeam, Object>>[]) IDataModelGet<ITeam>.GetBatch(Expression<Func<ITeam, Object>>[]) IDataModelGet<ITeam>.GetAsync(Expression<Func<ITeam, Object>>[]) IDataModelGet<ITeam>.GetAsync(ApiResponse, Expression<Func<ITeam, Object>>[]) IDataModelGet<ITeam>.Get(Expression<Func<ITeam, Object>>[]) IDataModelGet<ITeam>.Get(ApiResponse, Expression<Func<ITeam, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeam : IDataModel<ITeam>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITeam>, IDataModelGet, IDataModelUpdate Properties Channels Collection of channels in this current Team Declaration ITeamChannelCollection Channels { get; } Property Value ITeamChannelCollection Classification The classification of the Team Declaration string Classification { get; set; } Property Value String ClassSettings Defines the Class Settings for the Team Declaration ITeamClassSettings ClassSettings { get; } Property Value ITeamClassSettings Description The description of the Team Declaration string Description { get; set; } Property Value String DiscoverySettings Defines the Members Settings for the Team Declaration ITeamDiscoverySettings DiscoverySettings { get; } Property Value ITeamDiscoverySettings DisplayName The display name of the Team Declaration string DisplayName { get; set; } Property Value String FunSettings Defines the Members Settings for the Team Declaration ITeamFunSettings FunSettings { get; } Property Value ITeamFunSettings GuestSettings Defines the Guest Settings for the Team Declaration ITeamGuestSettings GuestSettings { get; } Property Value ITeamGuestSettings Id The Unique ID of the Team/Group Declaration Guid Id { get; } Property Value Guid InstalledApps Collection of installed apps in this current Team Declaration ITeamAppCollection InstalledApps { get; } Property Value ITeamAppCollection InternalId The Internal ID of the Team Declaration string InternalId { get; } Property Value String IsArchived Defines whether the Team is archived or not Declaration bool IsArchived { get; } Property Value Boolean Members Collection of Members of the current Team Declaration IGraphUserCollection Members { get; } Property Value IGraphUserCollection MemberSettings Defines the Members Settings for the Team Declaration ITeamMembersSettings MemberSettings { get; } Property Value ITeamMembersSettings MessagingSettings Defines the Members Settings for the Team Declaration ITeamMessagingSettings MessagingSettings { get; } Property Value ITeamMessagingSettings Owners Collection of Owners of the current Team Declaration IGraphUserCollection Owners { get; } Property Value IGraphUserCollection PrimaryChannel Reference to the Primary Channel for the Team Declaration ITeamChannel PrimaryChannel { get; } Property Value ITeamChannel Specialization The specialization of the Team Declaration TeamSpecialization Specialization { get; set; } Property Value TeamSpecialization Visibility The specialization of the Team Declaration TeamVisibility Visibility { get; set; } Property Value TeamVisibility WebUrl The Web URL of the Team Declaration Uri WebUrl { get; } Property Value Uri Methods Archive() Archives the team Declaration ITeamAsyncOperation Archive() Returns ITeamAsyncOperation Archive(Boolean) Archives the team Declaration ITeamAsyncOperation Archive(bool setSPOSiteReadOnlyForMembers) Parameters Boolean setSPOSiteReadOnlyForMembers This optional parameter defines whether to set permissions for team members to read-only on the Sharepoint Online site associated with the team Returns ITeamAsyncOperation ArchiveAsync() Archives the team Declaration Task<ITeamAsyncOperation> ArchiveAsync() Returns Task < ITeamAsyncOperation > ArchiveAsync(Boolean) Archives the team Declaration Task<ITeamAsyncOperation> ArchiveAsync(bool setSPOSiteReadOnlyForMembers) Parameters Boolean setSPOSiteReadOnlyForMembers This optional parameter defines whether to set permissions for team members to read-only on the Sharepoint Online site associated with the team Returns Task < ITeamAsyncOperation > Unarchive() Unarchives the team Declaration ITeamAsyncOperation Unarchive() Returns ITeamAsyncOperation UnarchiveAsync() Unarchives the team Declaration Task<ITeamAsyncOperation> UnarchiveAsync() Returns Task < ITeamAsyncOperation > Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamApp.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamApp.html",
    "title": "Interface ITeamApp | PnP Core SDK",
    "keywords": "Interface ITeamApp Defines a Microsoft Teams App installation Inherited Members IDataModel<ITeamApp>.HasValue(String) IDataModel<ITeamApp>.HasChanged(String) IDataModel<ITeamApp>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeamApp>.GetBatchAsync(Batch, Expression<Func<ITeamApp, Object>>[]) IDataModelGet<ITeamApp>.GetBatchAsync(Expression<Func<ITeamApp, Object>>[]) IDataModelGet<ITeamApp>.GetBatch(Batch, Expression<Func<ITeamApp, Object>>[]) IDataModelGet<ITeamApp>.GetBatch(Expression<Func<ITeamApp, Object>>[]) IDataModelGet<ITeamApp>.GetAsync(Expression<Func<ITeamApp, Object>>[]) IDataModelGet<ITeamApp>.GetAsync(ApiResponse, Expression<Func<ITeamApp, Object>>[]) IDataModelGet<ITeamApp>.Get(Expression<Func<ITeamApp, Object>>[]) IDataModelGet<ITeamApp>.Get(ApiResponse, Expression<Func<ITeamApp, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamApp : IDataModel<ITeamApp>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITeamApp>, IDataModelGet Properties DisplayName The Display Name of the Team App Declaration string DisplayName { get; set; } Property Value String DistributionMethod The method of distribution for the Team App Declaration TeamsAppDistributionMethod DistributionMethod { get; set; } Property Value TeamsAppDistributionMethod ExternalId The external ID of the Team App as defined by the developer Declaration string ExternalId { get; set; } Property Value String Id The unique Id of the Team App in the current app catalog Declaration string Id { get; } Property Value String Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamAppCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamAppCollection.html",
    "title": "Interface ITeamAppCollection | PnP Core SDK",
    "keywords": "Interface ITeamAppCollection Public interface to define a collection of TeamApp objects of Microsoft Teams Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging<ITeamApp>.CanPage ISupportPaging<ITeamApp>.GetPagedAsync(Int32, Expression<Func<ITeamApp, Object>>[]) ISupportPaging<ITeamApp>.GetNextPageAsync() ISupportPaging<ITeamApp>.GetAllPagesAsync() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamAppCollection : IDataModelCollection<ITeamApp>, IEnumerable<ITeamApp>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging<ITeamApp> Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.Teams.ITeamAsyncOperation.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamAsyncOperation.html",
    "title": "Interface ITeamAsyncOperation | PnP Core SDK",
    "keywords": "Interface ITeamAsyncOperation Represents a Microsoft Teams async operation Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamAsyncOperation Properties Location Location to call to request the current status of an async operation Declaration string Location { get; } Property Value String Methods WaitForCompletion() Waits for the async operation to finish Declaration void WaitForCompletion() WaitForCompletionAsync() Waits for the async operation to finish Declaration Task WaitForCompletionAsync() Returns Task Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChannel.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannel.html",
    "title": "Interface ITeamChannel | PnP Core SDK",
    "keywords": "Interface ITeamChannel Defines a Channel of Microsoft Teams Inherited Members IDataModel<ITeamChannel>.HasValue(String) IDataModel<ITeamChannel>.HasChanged(String) IDataModel<ITeamChannel>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeamChannel>.GetBatchAsync(Batch, Expression<Func<ITeamChannel, Object>>[]) IDataModelGet<ITeamChannel>.GetBatchAsync(Expression<Func<ITeamChannel, Object>>[]) IDataModelGet<ITeamChannel>.GetBatch(Batch, Expression<Func<ITeamChannel, Object>>[]) IDataModelGet<ITeamChannel>.GetBatch(Expression<Func<ITeamChannel, Object>>[]) IDataModelGet<ITeamChannel>.GetAsync(Expression<Func<ITeamChannel, Object>>[]) IDataModelGet<ITeamChannel>.GetAsync(ApiResponse, Expression<Func<ITeamChannel, Object>>[]) IDataModelGet<ITeamChannel>.Get(Expression<Func<ITeamChannel, Object>>[]) IDataModelGet<ITeamChannel>.Get(ApiResponse, Expression<Func<ITeamChannel, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannel : IDataModel<ITeamChannel>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITeamChannel>, IDataModelGet, IDataModelUpdate, IDataModelDelete, IQueryableDataModel Properties Description The description of the Team Channel Declaration string Description { get; set; } Property Value String DisplayName The display name of the Team Channel Declaration string DisplayName { get; set; } Property Value String Email The email address of the Team Channel Declaration string Email { get; } Property Value String Id The Unique ID of the Team Channel Declaration string Id { get; } Property Value String IsFavoriteByDefault Defines whether the Team Channel is favorite by default in the Team Declaration bool IsFavoriteByDefault { get; set; } Property Value Boolean MembershipType Defines the Membership type for the Team Channel Declaration TeamChannelMembershipType MembershipType { get; set; } Property Value TeamChannelMembershipType Messages Messages in this Team Channel Declaration ITeamChatMessageCollection Messages { get; } Property Value ITeamChatMessageCollection Tabs Tabs in this Channel Declaration ITeamChannelTabCollection Tabs { get; } Property Value ITeamChannelTabCollection WebUrl The Web URL of the Team Channel Declaration Uri WebUrl { get; } Property Value Uri Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChannelCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannelCollection.html",
    "title": "Interface ITeamChannelCollection | PnP Core SDK",
    "keywords": "Interface ITeamChannelCollection Public interface to define a collection of Team Channels Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging<ITeamChannel>.CanPage ISupportPaging<ITeamChannel>.GetPagedAsync(Int32, Expression<Func<ITeamChannel, Object>>[]) ISupportPaging<ITeamChannel>.GetNextPageAsync() ISupportPaging<ITeamChannel>.GetAllPagesAsync() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannelCollection : IQueryable<ITeamChannel>, IDataModelCollection<ITeamChannel>, IEnumerable<ITeamChannel>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging<ITeamChannel> Methods Add(String, String) Adds a new channel Declaration ITeamChannel Add(string name, string description = null) Parameters String name Display name of the channel String description Optional description of the channel Returns ITeamChannel Newly added channel AddAsync(String, String) Adds a new channel Declaration Task<ITeamChannel> AddAsync(string name, string description = null) Parameters String name Display name of the channel String description Optional description of the channel Returns Task < ITeamChannel > Newly added channel AddBatch(Batch, String, String) Adds a new channel Declaration ITeamChannel AddBatch(Batch batch, string name, string description = null) Parameters Batch batch Batch to use String name Display name of the channel String description Optional description of the channel Returns ITeamChannel Newly added channel AddBatch(String, String) Adds a new channel Declaration ITeamChannel AddBatch(string name, string description = null) Parameters String name Display name of the channel String description Optional description of the channel Returns ITeamChannel Newly added channel AddBatchAsync(Batch, String, String) Adds a new channel Declaration Task<ITeamChannel> AddBatchAsync(Batch batch, string name, string description = null) Parameters Batch batch Batch to use String name Display name of the channel String description Optional description of the channel Returns Task < ITeamChannel > Newly added channel AddBatchAsync(String, String) Adds a new channel Declaration Task<ITeamChannel> AddBatchAsync(string name, string description = null) Parameters String name Display name of the channel String description Optional description of the channel Returns Task < ITeamChannel > Newly added channel Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.Teams.ITeamChannelTab.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannelTab.html",
    "title": "Interface ITeamChannelTab | PnP Core SDK",
    "keywords": "Interface ITeamChannelTab Defines the tab in a Team channel Inherited Members IDataModel<ITeamChannelTab>.HasValue(String) IDataModel<ITeamChannelTab>.HasChanged(String) IDataModel<ITeamChannelTab>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeamChannelTab>.GetBatchAsync(Batch, Expression<Func<ITeamChannelTab, Object>>[]) IDataModelGet<ITeamChannelTab>.GetBatchAsync(Expression<Func<ITeamChannelTab, Object>>[]) IDataModelGet<ITeamChannelTab>.GetBatch(Batch, Expression<Func<ITeamChannelTab, Object>>[]) IDataModelGet<ITeamChannelTab>.GetBatch(Expression<Func<ITeamChannelTab, Object>>[]) IDataModelGet<ITeamChannelTab>.GetAsync(Expression<Func<ITeamChannelTab, Object>>[]) IDataModelGet<ITeamChannelTab>.GetAsync(ApiResponse, Expression<Func<ITeamChannelTab, Object>>[]) IDataModelGet<ITeamChannelTab>.Get(Expression<Func<ITeamChannelTab, Object>>[]) IDataModelGet<ITeamChannelTab>.Get(ApiResponse, Expression<Func<ITeamChannelTab, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelDelete.DeleteBatchAsync() IDataModelDelete.DeleteBatchAsync(Batch) IDataModelDelete.DeleteAsync() IDataModelDelete.DeleteBatch() IDataModelDelete.DeleteBatch(Batch) IDataModelDelete.Delete() IDataModelUpdate.UpdateBatchAsync() IDataModelUpdate.UpdateBatchAsync(Batch) IDataModelUpdate.UpdateAsync() IDataModelUpdate.UpdateBatch() IDataModelUpdate.UpdateBatch(Batch) IDataModelUpdate.Update() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannelTab : IDataModel<ITeamChannelTab>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITeamChannelTab>, IDataModelGet, IDataModelDelete, IDataModelUpdate Properties Configuration Container for custom settings applied to a tab. The tab is considered configured only once this property is set. Declaration ITeamChannelTabConfiguration Configuration { get; } Property Value ITeamChannelTabConfiguration DisplayName Name of the tab. Declaration string DisplayName { get; set; } Property Value String Id Identifier that uniquely identifies a specific instance of a channel tab. Read only. Declaration Guid Id { get; } Property Value Guid SortOrderIndex Index of the order used for sorting tabs. Declaration string SortOrderIndex { get; set; } Property Value String TeamsApp The application that is linked to the tab. This cannot be changed after tab creation. Declaration ITeamApp TeamsApp { get; } Property Value ITeamApp WebUrl Deep link url of the tab instance. Read only. Declaration Uri WebUrl { get; } Property Value Uri Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChannelTabCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannelTabCollection.html",
    "title": "Interface ITeamChannelTabCollection | PnP Core SDK",
    "keywords": "Interface ITeamChannelTabCollection Public interface to define a collection of Tabs for a Team Channel Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging<ITeamChannelTab>.CanPage ISupportPaging<ITeamChannelTab>.GetPagedAsync(Int32, Expression<Func<ITeamChannelTab, Object>>[]) ISupportPaging<ITeamChannelTab>.GetNextPageAsync() ISupportPaging<ITeamChannelTab>.GetAllPagesAsync() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannelTabCollection : IDataModelCollection<ITeamChannelTab>, IEnumerable<ITeamChannelTab>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging<ITeamChannelTab> Methods AddDocumentLibraryTab(String, Uri) Adds a new DocumentLibrary channel tab Declaration ITeamChannelTab AddDocumentLibraryTab(string name, Uri documentLibraryUri) Parameters String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns ITeamChannelTab Newly added DocumentLibrary channel tab AddDocumentLibraryTabAsync(String, Uri) Adds a new DocumentLibrary channel tab Declaration Task<ITeamChannelTab> AddDocumentLibraryTabAsync(string name, Uri documentLibraryUri) Parameters String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns Task < ITeamChannelTab > Newly added DocumentLibrary channel tab AddDocumentLibraryTabBatch(Batch, String, Uri) Adds a new DocumentLibrary channel tab Declaration ITeamChannelTab AddDocumentLibraryTabBatch(Batch batch, string name, Uri documentLibraryUri) Parameters Batch batch Batch to use String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns ITeamChannelTab Newly added DocumentLibrary channel tab AddDocumentLibraryTabBatch(String, Uri) Adds a new DocumentLibrary channel tab Declaration ITeamChannelTab AddDocumentLibraryTabBatch(string name, Uri documentLibraryUri) Parameters String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns ITeamChannelTab Newly added DocumentLibrary channel tab AddDocumentLibraryTabBatchAsync(Batch, String, Uri) Adds a new DocumentLibrary channel tab Declaration Task<ITeamChannelTab> AddDocumentLibraryTabBatchAsync(Batch batch, string name, Uri documentLibraryUri) Parameters Batch batch Batch to use String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns Task < ITeamChannelTab > Newly added DocumentLibrary channel tab AddDocumentLibraryTabBatchAsync(String, Uri) Adds a new DocumentLibrary channel tab Declaration Task<ITeamChannelTab> AddDocumentLibraryTabBatchAsync(string name, Uri documentLibraryUri) Parameters String name Display name of the DocumentLibrary channel tab Uri documentLibraryUri Uri to the document library that needs to be added as tab Returns Task < ITeamChannelTab > Newly added DocumentLibrary channel tab AddWikiTab(String) Adds a new wiki channel tab Declaration ITeamChannelTab AddWikiTab(string name) Parameters String name Display name of the wiki channel tab Returns ITeamChannelTab Newly added wiki channel tab AddWikiTabAsync(String) Adds a new wiki channel tab Declaration Task<ITeamChannelTab> AddWikiTabAsync(string name) Parameters String name Display name of the wiki channel tab Returns Task < ITeamChannelTab > Newly added wiki channel tab AddWikiTabBatch(Batch, String) Adds a new wiki channel tab Declaration ITeamChannelTab AddWikiTabBatch(Batch batch, string name) Parameters Batch batch Batch to use String name Display name of the wiki channel tab Returns ITeamChannelTab Newly added wiki channel tab AddWikiTabBatch(String) Adds a new wiki channel tab Declaration ITeamChannelTab AddWikiTabBatch(string name) Parameters String name Display name of the wiki channel tab Returns ITeamChannelTab Newly added wiki channel tab AddWikiTabBatchAsync(Batch, String) Adds a new wiki channel tab Declaration Task<ITeamChannelTab> AddWikiTabBatchAsync(Batch batch, string name) Parameters Batch batch Batch to use String name Display name of the wiki channel tab Returns Task < ITeamChannelTab > Newly added wiki channel tab AddWikiTabBatchAsync(String) Adds a new wiki channel tab Declaration Task<ITeamChannelTab> AddWikiTabBatchAsync(string name) Parameters String name Display name of the wiki channel tab Returns Task < ITeamChannelTab > Newly added wiki channel tab Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.Teams.ITeamChannelTabConfiguration.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChannelTabConfiguration.html",
    "title": "Interface ITeamChannelTabConfiguration | PnP Core SDK",
    "keywords": "Interface ITeamChannelTabConfiguration Public interface to define the configuration settings for a Team tab Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChannelTabConfiguration : IComplexType Properties ContentUrl Url used for rendering tab contents in Teams. Required. Declaration string ContentUrl { get; set; } Property Value String EntityId Identifier for the entity hosted by the tab provider. Declaration string EntityId { get; } Property Value String HasContent Is there content in this tab. Declaration bool HasContent { get; set; } Property Value Boolean RemoveUrl Url called by Teams client when a Tab is removed using the Teams Client. Declaration string RemoveUrl { get; set; } Property Value String WebsiteUrl Url for showing tab contents outside of Teams. Declaration string WebsiteUrl { get; set; } Property Value String WikiDefaultTab Is this the default wiki tab. Declaration bool WikiDefaultTab { get; set; } Property Value Boolean WikiTabId Wiki tab id. Declaration int WikiTabId { get; set; } Property Value Int32 Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessage.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessage.html",
    "title": "Interface ITeamChatMessage | PnP Core SDK",
    "keywords": "Interface ITeamChatMessage Represents an individual chat message within a channel or chat. The chat message can be a root chat message or part of a reply thread that is defined by the replyToId property in the chat message. Inherited Members IDataModel<ITeamChatMessage>.HasValue(String) IDataModel<ITeamChatMessage>.HasChanged(String) IDataModel<ITeamChatMessage>.Requested IDataModelParent.Parent IDataModelWithContext.PnPContext IDataModelGet<ITeamChatMessage>.GetBatchAsync(Batch, Expression<Func<ITeamChatMessage, Object>>[]) IDataModelGet<ITeamChatMessage>.GetBatchAsync(Expression<Func<ITeamChatMessage, Object>>[]) IDataModelGet<ITeamChatMessage>.GetBatch(Batch, Expression<Func<ITeamChatMessage, Object>>[]) IDataModelGet<ITeamChatMessage>.GetBatch(Expression<Func<ITeamChatMessage, Object>>[]) IDataModelGet<ITeamChatMessage>.GetAsync(Expression<Func<ITeamChatMessage, Object>>[]) IDataModelGet<ITeamChatMessage>.GetAsync(ApiResponse, Expression<Func<ITeamChatMessage, Object>>[]) IDataModelGet<ITeamChatMessage>.Get(Expression<Func<ITeamChatMessage, Object>>[]) IDataModelGet<ITeamChatMessage>.Get(ApiResponse, Expression<Func<ITeamChatMessage, Object>>[]) IDataModelGet.GetBatchAsync(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatchAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Batch, Expression<Func<Object, Object>>[]) IDataModelGet.GetBatch(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(Expression<Func<Object, Object>>[]) IDataModelGet.GetAsync(ApiResponse, Expression<Func<Object, Object>>[]) IDataModelGet.Get(Expression<Func<Object, Object>>[]) IDataModelGet.Get(ApiResponse, Expression<Func<Object, Object>>[]) Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessage : IDataModel<ITeamChatMessage>, IDataModelParent, IDataModelWithContext, IDataModelGet<ITeamChatMessage>, IDataModelGet, IQueryableDataModel Properties Attachments Attached files. Attachments are currently read-only – sending attachments is not supported. Declaration List<ITeamChatMessageAttachment> Attachments { get; } Property Value List < ITeamChatMessageAttachment > Body Plaintext/HTML representation of the content of the chat message. Representation is specified by the contentType inside the body. The content is always in HTML if the chat message contains a chatMessageMention. Declaration ITeamChatMessageContent Body { get; } Property Value ITeamChatMessageContent CreatedDateTime Read only. Timestamp of when the chat message was created. Declaration DateTimeOffset CreatedDateTime { get; } Property Value DateTimeOffset DeletedDateTime Read only. Timestamp at which the chat message was deleted, or null if not deleted. Declaration DateTimeOffset DeletedDateTime { get; } Property Value DateTimeOffset Etag Read-only. Version number of the chat message. Declaration string Etag { get; } Property Value String From Read only. Details of the sender of the chat message. Declaration ITeamIdentitySet From { get; } Property Value ITeamIdentitySet Id Read-only. Unique Id of the message. Declaration string Id { get; } Property Value String Importance The importance of the chat message. Declaration ChatMessageImportance Importance { get; set; } Property Value ChatMessageImportance LastModifiedDateTime Read only. Timestamp of when the chat message is created or edited, including when a reply is made (if it's a root chat message in a channel) or a reaction is added or removed. Declaration DateTimeOffset LastModifiedDateTime { get; } Property Value DateTimeOffset Locale Locale of the team chat message Declaration string Locale { get; set; } Property Value String Mentions List of entities mentioned in the chat message. Currently supports user, bot, team, channel. Declaration List<ITeamChatMessageMention> Mentions { get; } Property Value List < ITeamChatMessageMention > MessageType The type of chat message. The possible values are: message. Declaration ChatMessageType MessageType { get; set; } Property Value ChatMessageType Reactions Reactions for this chat message (for example, Like). Declaration List<ITeamChatMessageReaction> Reactions { get; } Property Value List < ITeamChatMessageReaction > ReplyToId Read-only. Id of the parent chat message or root chat message of the thread. (Only applies to chat messages in channels not chats) Declaration string ReplyToId { get; } Property Value String Subject The subject of the chat message, in plaintext. Declaration string Subject { get; set; } Property Value String Summary Summary text of the chat message that could be used for push notifications and summary views or fall back views. Only applies to channel chat messages, not chat messages in a chat. Declaration string Summary { get; set; } Property Value String WebUrl The Web URL of the team chat message Declaration Uri WebUrl { get; } Property Value Uri Extension Methods DataModelExtensions.EnsurePropertiesAsync<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.ArePropertiesAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>[]) DataModelExtensions.IsPropertyAvailable<TModel>(IDataModel<TModel>, Expression<Func<TModel, Object>>) DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageAttachment.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageAttachment.html",
    "title": "Interface ITeamChatMessageAttachment | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageAttachment Attachments connected to a chat message Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageAttachment : IComplexType Properties Content The content of the attachment. If the attachment is a rich card, set the property to the rich card object. This property and contentUrl are mutually exclusive. Declaration string Content { get; set; } Property Value String ContentType The media type of the content attachment. Declaration string ContentType { get; set; } Property Value String ContentUrl URL for the content of the attachment. Supported protocols: http, https, file and data. Declaration Uri ContentUrl { get; set; } Property Value Uri Id Read-only. Unique id of the attachment. Declaration string Id { get; } Property Value String Name Name of the attachment. Declaration string Name { get; set; } Property Value String ThumbnailUrl URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl. For example, if you set contentType to application/word and set contentUrl to the location of the Word document, you might include a thumbnail image that represents the document. The channel could display the thumbnail image instead of the document. When the user clicks the image, the channel would open the document. Declaration Uri ThumbnailUrl { get; set; } Property Value Uri Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageCollection.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageCollection.html",
    "title": "Interface ITeamChatMessageCollection | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageCollection A chat is a collection of chatMessages between one or more participants. Participants can be users or apps. Inherited Members IDataModelParent.Parent IDataModelWithContext.PnPContext IRequestableCollection.Requested IRequestableCollection.Length IRequestableCollection.RequestedItems ISupportPaging<ITeamChatMessage>.CanPage ISupportPaging<ITeamChatMessage>.GetPagedAsync(Int32, Expression<Func<ITeamChatMessage, Object>>[]) ISupportPaging<ITeamChatMessage>.GetNextPageAsync() ISupportPaging<ITeamChatMessage>.GetAllPagesAsync() Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageCollection : IQueryable<ITeamChatMessage>, IDataModelCollection<ITeamChatMessage>, IEnumerable<ITeamChatMessage>, IDataModelParent, IDataModelWithContext, IRequestableCollection, ISupportPaging<ITeamChatMessage> Methods Add(String) Adds a new channel chat message Declaration ITeamChatMessage Add(string body) Parameters String body Body of the chat message Returns ITeamChatMessage Newly added channel chat message AddAsync(String) Adds a new channel chat message Declaration Task<ITeamChatMessage> AddAsync(string body) Parameters String body Body of the chat message Returns Task < ITeamChatMessage > Newly added channel chat message AddBatch(Batch, String) Adds a new channel chat message Declaration ITeamChatMessage AddBatch(Batch batch, string body) Parameters Batch batch Batch to use String body Body of the chat message Returns ITeamChatMessage Newly added channel chat message AddBatch(String) Adds a new channel chat message Declaration ITeamChatMessage AddBatch(string body) Parameters String body Body of the chat message Returns ITeamChatMessage Newly added channel chat message AddBatchAsync(Batch, String) Adds a new channel chat message Declaration Task<ITeamChatMessage> AddBatchAsync(Batch batch, string body) Parameters Batch batch Batch to use String body Body of the chat message Returns Task < ITeamChatMessage > Newly added channel chat message AddBatchAsync(String) Adds a new channel chat message Declaration Task<ITeamChatMessage> AddBatchAsync(string body) Parameters String body Body of the chat message Returns Task < ITeamChatMessage > Newly added channel chat message Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>) DataModelExtensions.LoadProperties<TModel>(IDataModelCollection<TModel>, Expression<Func<TModel, Object>>[])"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageContent.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageContent.html",
    "title": "Interface ITeamChatMessageContent | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageContent Public interface to define the content of a chat message Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageContent : IComplexType Properties Content The content of the item. Declaration string Content { get; set; } Property Value String ContentType The type of the content. Possible values are text and html. Declaration ChatMessageContentType ContentType { get; set; } Property Value ChatMessageContentType Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageMention.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageMention.html",
    "title": "Interface ITeamChatMessageMention | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageMention Represents a mention in a chatMessage entity. The mention can be to a user, team, bot, or channel. Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageMention : IComplexType Properties Id Index of an entity being mentioned in the specified chatMessage. Declaration int Id { get; set; } Property Value Int32 Mentioned The entity (user, application, team, or channel) that was mentioned. If it was a channel or team that was @mentioned, the identitySet contains a conversation property giving the ID of the team/channel, and a conversationIdentityType property that represents either the team or channel. Declaration ITeamIdentitySet Mentioned { get; set; } Property Value ITeamIdentitySet MentionText String used to represent the mention. For example, a user's display name, a team name. Declaration string MentionText { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamChatMessageReaction.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamChatMessageReaction.html",
    "title": "Interface ITeamChatMessageReaction | PnP Core SDK",
    "keywords": "Interface ITeamChatMessageReaction Represents a reaction to a chatMessage entity. Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamChatMessageReaction : IComplexType Properties CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 would look like this: '2014-01-01T00:00:00Z' Declaration DateTimeOffset CreatedDateTime { get; set; } Property Value DateTimeOffset ReactionType Type of reaction Declaration ChatMessageReactionType ReactionType { get; set; } Property Value ChatMessageReactionType User The user who reacted to the message. Declaration ITeamIdentitySet User { get; set; } Property Value ITeamIdentitySet Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamClassSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamClassSettings.html",
    "title": "Interface ITeamClassSettings | PnP Core SDK",
    "keywords": "Interface ITeamClassSettings Public interface to define the settings for a classroom Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamClassSettings Properties NotifyGuardiansAboutAssignments Do guardians need to be notified about assignments? Declaration bool NotifyGuardiansAboutAssignments { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamDiscoverySettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamDiscoverySettings.html",
    "title": "Interface ITeamDiscoverySettings | PnP Core SDK",
    "keywords": "Interface ITeamDiscoverySettings Public interface to define the discovery settings for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamDiscoverySettings : IComplexType Properties ShowInTeamsSearchAndSuggestions Show team in Teams search and suggestions? Declaration bool ShowInTeamsSearchAndSuggestions { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamFunSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamFunSettings.html",
    "title": "Interface ITeamFunSettings | PnP Core SDK",
    "keywords": "Interface ITeamFunSettings Public interface to define the fun settings for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamFunSettings : IComplexType Properties AllowCustomMemes Defines whether the custom memes are allowed in the Team Declaration bool AllowCustomMemes { get; set; } Property Value Boolean AllowGiphy Defines whether the Giphy are allowed in the Team Declaration bool AllowGiphy { get; set; } Property Value Boolean AllowStickersAndMemes Defines whether the stickers and meme are allowed in the Team Declaration bool AllowStickersAndMemes { get; set; } Property Value Boolean GiphyContentRating Defines the Giphy content rating (strict or moderate) Declaration TeamGiphyContentRating GiphyContentRating { get; set; } Property Value TeamGiphyContentRating Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamGuestSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamGuestSettings.html",
    "title": "Interface ITeamGuestSettings | PnP Core SDK",
    "keywords": "Interface ITeamGuestSettings Public interface to define the guest settings for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamGuestSettings : IComplexType Properties AllowCreateUpdateChannels Defines whether the guests can create or update channels Declaration bool AllowCreateUpdateChannels { get; set; } Property Value Boolean AllowDeleteChannels Defines whether the guests can delete channels Declaration bool AllowDeleteChannels { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamIdentitySet.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamIdentitySet.html",
    "title": "Interface ITeamIdentitySet | PnP Core SDK",
    "keywords": "Interface ITeamIdentitySet Identity information about a Teams element Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamIdentitySet : IComplexType Properties Application Optional. The application associated with this action. Declaration IIdentity Application { get; set; } Property Value IIdentity Conversation Optional. The team or channel associated with this action. Declaration IIdentity Conversation { get; set; } Property Value IIdentity ConversationIdentityType Optional. Indicates whether the conversation property identifies a team or channel. Declaration IIdentity ConversationIdentityType { get; set; } Property Value IIdentity Device Optional. The device associated with this action. Declaration IIdentity Device { get; set; } Property Value IIdentity Phone Optional. The phone number associated with this action. Declaration IIdentity Phone { get; set; } Property Value IIdentity User Optional. The user associated with this action. Declaration IIdentity User { get; set; } Property Value IIdentity Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamMembersSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamMembersSettings.html",
    "title": "Interface ITeamMembersSettings | PnP Core SDK",
    "keywords": "Interface ITeamMembersSettings Public interface to define the memebers settings for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamMembersSettings : IComplexType Properties AllowAddRemoveApps Defines whether the team members can add or remove apps Declaration bool AllowAddRemoveApps { get; set; } Property Value Boolean AllowCreatePrivateChannels Defines whether the team members can create private channels Declaration bool AllowCreatePrivateChannels { get; set; } Property Value Boolean AllowCreateUpdateChannels Defines whether the team members can update channels Declaration bool AllowCreateUpdateChannels { get; set; } Property Value Boolean AllowCreateUpdateRemoveConnectors Defines whether the team members can create, update, or remove connectors Declaration bool AllowCreateUpdateRemoveConnectors { get; set; } Property Value Boolean AllowCreateUpdateRemoveTabs Defines whether the team members can update or remove tabs Declaration bool AllowCreateUpdateRemoveTabs { get; set; } Property Value Boolean AllowDeleteChannels Defines whether the team members can delete channels Declaration bool AllowDeleteChannels { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.ITeamMessagingSettings.html": {
    "href": "api/PnP.Core.Model.Teams.ITeamMessagingSettings.html",
    "title": "Interface ITeamMessagingSettings | PnP Core SDK",
    "keywords": "Interface ITeamMessagingSettings Public interface to define the messaging settings for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public interface ITeamMessagingSettings : IComplexType Properties AllowChannelMentions Defines whether users can use channel mentions Declaration bool AllowChannelMentions { get; set; } Property Value Boolean AllowOwnerDeleteMessages Defines whether owners can delete messages Declaration bool AllowOwnerDeleteMessages { get; set; } Property Value Boolean AllowTeamMentions Defines whether users can use team mentions Declaration bool AllowTeamMentions { get; set; } Property Value Boolean AllowUserDeleteMessages Defines whether users can delete messages Declaration bool AllowUserDeleteMessages { get; set; } Property Value Boolean AllowUserEditMessages Defines whether users can edit messages Declaration bool AllowUserEditMessages { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Model.Teams.TeamChannelExtensions.html": {
    "href": "api/PnP.Core.Model.Teams.TeamChannelExtensions.html",
    "title": "Class TeamChannelExtensions | PnP Core SDK",
    "keywords": "Class TeamChannelExtensions TeamChannel extension methods Inheritance Object TeamChannelExtensions Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public static class TeamChannelExtensions : object Methods GetByDisplayName(IQueryable<ITeamChannel>, String) Extension method to select a channel (ITeamChannel) by displayName Declaration public static ITeamChannel GetByDisplayName(this IQueryable<ITeamChannel> source, string displayName) Parameters IQueryable < ITeamChannel > source The collection of channels to get the channel by displayName from String displayName The displayName to search for Returns ITeamChannel The resulting channel instance, if any GetByDisplayName(IQueryable<ITeamChannel>, String, Expression<Func<ITeamChannel, Object>>[]) Extension method to select a channel (ITeamChannel) by displayName Declaration public static ITeamChannel GetByDisplayName(this IQueryable<ITeamChannel> source, string displayName, params Expression<Func<ITeamChannel, object>>[] selectors) Parameters IQueryable < ITeamChannel > source The collection of channels to get the channel by displayName from String displayName The displayName to search for Expression < Func < ITeamChannel , Object >>[] selectors The expressions declaring the fields to select Returns ITeamChannel The resulting channel instance, if any GetByDisplayNameAsync(IQueryable<ITeamChannel>, String) Extension method to select a channel (ITeamChannel) by displayName asynchronously Declaration public static Task<ITeamChannel> GetByDisplayNameAsync(this IQueryable<ITeamChannel> source, string displayName) Parameters IQueryable < ITeamChannel > source The collection of channels to get the channel by displayName from String displayName The displayName to search for Returns Task < ITeamChannel > The resulting channel instance, if any GetByDisplayNameAsync(IQueryable<ITeamChannel>, String, Expression<Func<ITeamChannel, Object>>[]) Extension method to select a channel (ITeamChannel) by displayName asynchronously Declaration public static Task<ITeamChannel> GetByDisplayNameAsync(this IQueryable<ITeamChannel> source, string displayName, params Expression<Func<ITeamChannel, object>>[] selectors) Parameters IQueryable < ITeamChannel > source The collection of channels to get the channel by displayName from String displayName The displayName to search for Expression < Func < ITeamChannel , Object >>[] selectors The expressions declaring the fields to select Returns Task < ITeamChannel > The resulting channel instance, if any"
  },
  "api/PnP.Core.Model.Teams.TeamChannelMembershipType.html": {
    "href": "api/PnP.Core.Model.Teams.TeamChannelMembershipType.html",
    "title": "Enum TeamChannelMembershipType | PnP Core SDK",
    "keywords": "Enum TeamChannelMembershipType Defines the Membership Type for a Team Channel Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamChannelMembershipType : int Private Private channel membership Standard Standard channel membership UnknownFutureValue Reserved for future use Extension Methods DataModelExtensions.IsPropertyAvailable<TeamChannelMembershipType>(Expression<Func<TeamChannelMembershipType, Object>>)"
  },
  "api/PnP.Core.Model.Teams.TeamGiphyContentRating.html": {
    "href": "api/PnP.Core.Model.Teams.TeamGiphyContentRating.html",
    "title": "Enum TeamGiphyContentRating | PnP Core SDK",
    "keywords": "Enum TeamGiphyContentRating Giphy content rating for giphies being used in a team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamGiphyContentRating : int Moderate Moderate content rating Strict Strict content rating Extension Methods DataModelExtensions.IsPropertyAvailable<TeamGiphyContentRating>(Expression<Func<TeamGiphyContentRating, Object>>)"
  },
  "api/PnP.Core.Model.Teams.TeamsAppDistributionMethod.html": {
    "href": "api/PnP.Core.Model.Teams.TeamsAppDistributionMethod.html",
    "title": "Enum TeamsAppDistributionMethod | PnP Core SDK",
    "keywords": "Enum TeamsAppDistributionMethod Distribution method of the team app Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamsAppDistributionMethod : int Organization From your organization SideLoaded Side loaded (developer scenario) Store From store Extension Methods DataModelExtensions.IsPropertyAvailable<TeamsAppDistributionMethod>(Expression<Func<TeamsAppDistributionMethod, Object>>)"
  },
  "api/PnP.Core.Model.Teams.TeamSpecialization.html": {
    "href": "api/PnP.Core.Model.Teams.TeamSpecialization.html",
    "title": "Enum TeamSpecialization | PnP Core SDK",
    "keywords": "Enum TeamSpecialization Defines the Specialization options for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamSpecialization : int EducationClass Education class EducationProfessionalLearningCommunity Education professional learning community EducationStaff Education staff EducationStandard Education Standard None None UnknownFutureValue Reserved for future use Extension Methods DataModelExtensions.IsPropertyAvailable<TeamSpecialization>(Expression<Func<TeamSpecialization, Object>>)"
  },
  "api/PnP.Core.Model.Teams.TeamVisibility.html": {
    "href": "api/PnP.Core.Model.Teams.TeamVisibility.html",
    "title": "Enum TeamVisibility | PnP Core SDK",
    "keywords": "Enum TeamVisibility Defines the Visibility for a Team Namespace : PnP.Core.Model.Teams Assembly : PnP.Core.dll Syntax public enum TeamVisibility : int Private Private team Public Public team Extension Methods DataModelExtensions.IsPropertyAvailable<TeamVisibility>(Expression<Func<TeamVisibility, Object>>)"
  },
  "api/PnP.Core.Model.TransientDictionary.html": {
    "href": "api/PnP.Core.Model.TransientDictionary.html",
    "title": "Class TransientDictionary | PnP Core SDK",
    "keywords": "Class TransientDictionary Class tracks Dictionary changes Inheritance Object TransientDictionary Namespace : PnP.Core.Model Assembly : PnP.Core.dll Syntax public class TransientDictionary : Dictionary<string, object> Constructors TransientDictionary() Default constructor Declaration public TransientDictionary() TransientDictionary(Dictionary<String, Object>) Constructor that initializes based upon an existing Dictionary Declaration public TransientDictionary(Dictionary<string, object> input) Parameters Dictionary < String , Object > input holding the key value pairs to add Properties HasChanges Does this model instance have changes? Declaration public bool HasChanges { get; } Property Value Boolean Item[String] Gets or sets the value of an object in this dictionary Declaration public object this[string key] { get; set; } Parameters String key Key of the object to set Property Value Object Methods Add(String, Object) Adds a new item to the dictionary Declaration public void Add(string key, object value) Parameters String key Key of the item to add Object value Value of the item to add Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.PnPConstants.html": {
    "href": "api/PnP.Core.PnPConstants.html",
    "title": "Class PnPConstants | PnP Core SDK",
    "keywords": "Class PnPConstants Support class to provide all the constants for the engine Inheritance Object PnPConstants Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public static class PnPConstants : object Fields GraphBetaEndpoint Graph beta endpoint Declaration public static readonly string GraphBetaEndpoint Field Value String GraphV1Endpoint Graph v1 endpoint Declaration public static readonly string GraphV1Endpoint Field Value String MetaDataEtag The name of the ETag metadata attribute Declaration public const string MetaDataEtag = null Field Value String MetaDataGraphId The name of the Microsoft Graph ID metadata attribute Declaration public const string MetaDataGraphId = null Field Value String MetaDataGraphType The name of the Graph ODATA metadata attribute Declaration public const string MetaDataGraphType = null Field Value String MetaDataId The name of the ID metadata attribute Declaration public const string MetaDataId = null Field Value String MetaDataRestEntityTypeName The name of the Entity Type Name metadata attribute Declaration public const string MetaDataRestEntityTypeName = null Field Value String MetaDataRestId The name of the REST Id metadata attribute Declaration public const string MetaDataRestId = null Field Value String MetaDataType The name of the Data Type metadata attribute Declaration public const string MetaDataType = null Field Value String MetaDataUri The name of the URI metadata attribute Declaration public const string MetaDataUri = null Field Value String MicrosoftGraphBaseUri The base URI of the Microsoft Graph Declaration public static readonly Uri MicrosoftGraphBaseUri Field Value Uri MicrosoftGraphBaseUrl The string base URL of the Microsoft Graph Declaration public const string MicrosoftGraphBaseUrl = null Field Value String"
  },
  "api/PnP.Core.PnPException.html": {
    "href": "api/PnP.Core.PnPException.html",
    "title": "Class PnPException | PnP Core SDK",
    "keywords": "Class PnPException Base class for the pnp core sdk exceptions Inheritance Object PnPException AuthenticationException ClientException ServiceException Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public abstract class PnPException : Exception Constructors PnPException() Creates a PnP Exception Declaration public PnPException() PnPException(String) Creates a PnP Exception Declaration public PnPException(string message) Parameters String message Exception message PnPException(String, Exception) Creates a PnP Exception Declaration public PnPException(string message, Exception innerException) Parameters String message Exception message Exception innerException Inner exception to be linked to this PnPException Properties Error Additional error information Declaration public BaseError Error { get; set; } Property Value BaseError Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.QueryModel.BaseDataModelExtensions.html": {
    "href": "api/PnP.Core.QueryModel.BaseDataModelExtensions.html",
    "title": "Class BaseDataModelExtensions | PnP Core SDK",
    "keywords": "Class BaseDataModelExtensions Class holding data model extension methods Inheritance Object BaseDataModelExtensions Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public static class BaseDataModelExtensions : object Methods AndThen<TIn, TOut>(Task<TIn>, Func<TIn, Task<TOut>>) Chains async calls. See https://stackoverflow.com/a/52739551 for more information Declaration public static Task<TOut> AndThen<TIn, TOut>(this Task<TIn> inputTask, Func<TIn, Task<TOut>> mapping) Parameters Task <TIn> inputTask Async operatation to start from Func <TIn, Task <TOut>> mapping Async operation to run next Returns Task <TOut> Task outcome from the ran async operation Type Parameters TIn Input task TOut Output task Include<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>) Extension method to declare the collection properties to expand while querying the REST service Declaration public static IQueryable<TResult> Include<TResult>(this IQueryable<TResult> source, Expression<Func<TResult, object>> selector) Parameters IQueryable <TResult> source The collection of items to expand properties from Expression < Func <TResult, Object >> selector A selector for the expandable properties Returns IQueryable <TResult> The resulting collection Type Parameters TResult The type of the target entity Include<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[]) Extension method to declare the collection properties to expand while querying the REST service Declaration public static IQueryable<TResult> Include<TResult>(this IQueryable<TResult> source, params Expression<Func<TResult, object>>[] selectors) Parameters IQueryable <TResult> source The collection of items to expand properties from Expression < Func <TResult, Object >>[] selectors An array of selectors for the expandable properties Returns IQueryable <TResult> The resulting collection Type Parameters TResult The type of the target entity Load<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>) Extension method to declare a field/metadata property to load while executing the REST query Declaration public static IQueryable<TResult> Load<TResult>(this IQueryable<TResult> source, Expression<Func<TResult, object>> selector) Parameters IQueryable <TResult> source The collection of items to load the field/metadata from Expression < Func <TResult, Object >> selector A selector for a field/metadata Returns IQueryable <TResult> The resulting collection Type Parameters TResult The type of the target entity Load<TResult>(IQueryable<TResult>, Expression<Func<TResult, Object>>[]) Extension method to declare the fields/metadata properties to load while executing the REST query Declaration public static IQueryable<TResult> Load<TResult>(this IQueryable<TResult> source, params Expression<Func<TResult, object>>[] selectors) Parameters IQueryable <TResult> source The collection of items to load fields/metadata from Expression < Func <TResult, Object >>[] selectors An array of selectors for the fields/metadata Returns IQueryable <TResult> The resulting collection Type Parameters TResult The type of the target entity"
  },
  "api/PnP.Core.QueryModel.BaseQueryProvider.html": {
    "href": "api/PnP.Core.QueryModel.BaseQueryProvider.html",
    "title": "Class BaseQueryProvider | PnP Core SDK",
    "keywords": "Class BaseQueryProvider Base abstract class to implement the basic logic of an IQueryProvider Inheritance Object BaseQueryProvider Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public abstract class BaseQueryProvider : object, IAsyncQueryProvider, IQueryProvider Methods CreateQuery(Expression) Creates a query for the provided expression Declaration public abstract IQueryable CreateQuery(Expression expression) Parameters Expression expression Expression to create a query for Returns IQueryable CreateQuery<TResult>(Expression) Creates a query for the provided expression Declaration public IQueryable<TResult> CreateQuery<TResult>(Expression expression) Parameters Expression expression Expression that will be translated into a query Returns IQueryable <TResult> Created query Type Parameters TResult Result type of the query Execute(Expression) Executes the provided expression Declaration public object Execute(Expression expression) Parameters Expression expression Expression to execute Returns Object Execute<TResult>(Expression) Executes the provided expression Declaration public TResult Execute<TResult>(Expression expression) Parameters Expression expression Expression to execute Returns TResult Loaded model instace of type TResult Type Parameters TResult Resulting type of the linq expression execution ExecuteAsync<TResult>(Expression, CancellationToken) Executes the provided expression Declaration public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) Parameters Expression expression Expression to execute CancellationToken cancellationToken Cancellation token Returns TResult Loaded model instace of type TResult Type Parameters TResult Resulting type of the linq expression execution Implements IAsyncQueryProvider.ExecuteAsync<TResult>(Expression, CancellationToken) ExecuteObjectAsync(Expression) Executes the provided expression Declaration public abstract Task<object> ExecuteObjectAsync(Expression expression) Parameters Expression expression Expression to execute Returns Task < Object > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.QueryModel.FilteringConcatOperator.html": {
    "href": "api/PnP.Core.QueryModel.FilteringConcatOperator.html",
    "title": "Enum FilteringConcatOperator | PnP Core SDK",
    "keywords": "Enum FilteringConcatOperator Enumeration of logical concat operators for queries Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public enum FilteringConcatOperator : int AND Logical AND for query items in query groups OR Logical OR for query items in query groups Extension Methods DataModelExtensions.IsPropertyAvailable<FilteringConcatOperator>(Expression<Func<FilteringConcatOperator, Object>>)"
  },
  "api/PnP.Core.QueryModel.FilteringCriteria.html": {
    "href": "api/PnP.Core.QueryModel.FilteringCriteria.html",
    "title": "Enum FilteringCriteria | PnP Core SDK",
    "keywords": "Enum FilteringCriteria Enumeration of filtering criteria for queries Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public enum FilteringCriteria : int Equal Corresponds to the = operator GreaterThan Corresponds to the > operator GreaterThanOrEqual Corresponds to the >= operator LessThan Corresponds to the < operator LessThanOrEqual Corresponds to the <= operator Not Corresponds to the ! operator NotEqual Corresponds to the != operator Extension Methods DataModelExtensions.IsPropertyAvailable<FilteringCriteria>(Expression<Func<FilteringCriteria, Object>>)"
  },
  "api/PnP.Core.QueryModel.FilterItem.html": {
    "href": "api/PnP.Core.QueryModel.FilterItem.html",
    "title": "Class FilterItem | PnP Core SDK",
    "keywords": "Class FilterItem Defines a filtering criteria item Inheritance Object ODataFilter FilterItem Inherited Members ODataFilter.ConcatOperator Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public class FilterItem : ODataFilter Properties Criteria The filtering criteria. Default: Equal. Declaration public FilteringCriteria Criteria { get; set; } Property Value FilteringCriteria Field The name of the field for the filtering criteria Declaration public string Field { get; set; } Property Value String Value The actual value for the filtering criteria Declaration public object Value { get; set; } Property Value Object Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.QueryModel.FiltersGroup.html": {
    "href": "api/PnP.Core.QueryModel.FiltersGroup.html",
    "title": "Class FiltersGroup | PnP Core SDK",
    "keywords": "Class FiltersGroup Defines a group of filters Inheritance Object ODataFilter FiltersGroup Inherited Members ODataFilter.ConcatOperator Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public class FiltersGroup : ODataFilter Constructors FiltersGroup() Constructs a group of filters Declaration public FiltersGroup() FiltersGroup(List<ODataFilter>) Constructs a group of filters based upon the provide list of filters Declaration public FiltersGroup(List<ODataFilter> filters) Parameters List < ODataFilter > filters List of ODataFilter filters Properties Filters Declaration public List<ODataFilter> Filters { get; } Property Value List < ODataFilter > Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.QueryModel.html": {
    "href": "api/PnP.Core.QueryModel.html",
    "title": "Namespace PnP.Core.QueryModel | PnP Core SDK",
    "keywords": "Namespace PnP.Core.QueryModel Classes BaseDataModelExtensions Class holding data model extension methods BaseQueryProvider Base abstract class to implement the basic logic of an IQueryProvider FilterItem Defines a filtering criteria item FiltersGroup Defines a group of filters ODataFilter Interface to define the basic functionalities of a filtering item (either a single item or a group of items) OrderByItem Defines a single sorting item QueryableExtensions Asynchronous LINQ related extension methods. Interfaces IAsyncQueryProvider Defines method to execute queries asynchronously that are described by an IQueryable object. Enums FilteringConcatOperator Enumeration of logical concat operators for queries FilteringCriteria Enumeration of filtering criteria for queries ODataTargetPlatform Defines the target platform for the query OrderByDirection Enumeration of the ordering criteria for sorting results"
  },
  "api/PnP.Core.QueryModel.IAsyncQueryProvider.html": {
    "href": "api/PnP.Core.QueryModel.IAsyncQueryProvider.html",
    "title": "Interface IAsyncQueryProvider | PnP Core SDK",
    "keywords": "Interface IAsyncQueryProvider Defines method to execute queries asynchronously that are described by an IQueryable object. Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public interface IAsyncQueryProvider : IQueryProvider Methods ExecuteAsync<TResult>(Expression, CancellationToken) Executes the strongly-typed query represented by a specified expression tree asynchronously. Declaration TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken = null) Parameters Expression expression CancellationToken cancellationToken Returns TResult Type Parameters TResult Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.QueryModel.ODataFilter.html": {
    "href": "api/PnP.Core.QueryModel.ODataFilter.html",
    "title": "Class ODataFilter | PnP Core SDK",
    "keywords": "Class ODataFilter Interface to define the basic functionalities of a filtering item (either a single item or a group of items) Inheritance Object ODataFilter FilterItem FiltersGroup Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public abstract class ODataFilter : object Properties ConcatOperator The concatenation operator between the current filter item and the next one in the chain, within the current filtering group. Default: AND. Declaration public FilteringConcatOperator ConcatOperator { get; set; } Property Value FilteringConcatOperator Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.QueryModel.ODataTargetPlatform.html": {
    "href": "api/PnP.Core.QueryModel.ODataTargetPlatform.html",
    "title": "Enum ODataTargetPlatform | PnP Core SDK",
    "keywords": "Enum ODataTargetPlatform Defines the target platform for the query Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public enum ODataTargetPlatform : int Graph Microsoft Graph (primary choice) SPORest Microsoft SharePoint Online REST API (fallback) Extension Methods DataModelExtensions.IsPropertyAvailable<ODataTargetPlatform>(Expression<Func<ODataTargetPlatform, Object>>)"
  },
  "api/PnP.Core.QueryModel.OrderByDirection.html": {
    "href": "api/PnP.Core.QueryModel.OrderByDirection.html",
    "title": "Enum OrderByDirection | PnP Core SDK",
    "keywords": "Enum OrderByDirection Enumeration of the ordering criteria for sorting results Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public enum OrderByDirection : int Asc Ascending sorting Desc Descending sorting Extension Methods DataModelExtensions.IsPropertyAvailable<OrderByDirection>(Expression<Func<OrderByDirection, Object>>)"
  },
  "api/PnP.Core.QueryModel.OrderByItem.html": {
    "href": "api/PnP.Core.QueryModel.OrderByItem.html",
    "title": "Class OrderByItem | PnP Core SDK",
    "keywords": "Class OrderByItem Defines a single sorting item Inheritance Object OrderByItem Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public class OrderByItem : object Properties Direction The direction (Ascending/Descending) for the sorting criteria. Default: Ascending. Declaration public OrderByDirection Direction { get; set; } Property Value OrderByDirection Field The name of the field to sort by Declaration public string Field { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.QueryModel.QueryableExtensions.html": {
    "href": "api/PnP.Core.QueryModel.QueryableExtensions.html",
    "title": "Class QueryableExtensions | PnP Core SDK",
    "keywords": "Class QueryableExtensions Asynchronous LINQ related extension methods. Inheritance Object QueryableExtensions Namespace : PnP.Core.QueryModel Assembly : PnP.Core.dll Syntax public static class QueryableExtensions : object Methods AsAsyncEnumerable<TSource>(IQueryable<TSource>) Returns an which can be enumerated asynchronously. Declaration public static IAsyncEnumerable<TSource> AsAsyncEnumerable<TSource>(this IQueryable<TSource> source) Parameters IQueryable <TSource> source An to enumerate. Returns IAsyncEnumerable <TSource> The query results. Type Parameters TSource The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use 'await' to ensure that any asynchronous operations have completed before calling another method on this context. FirstAsync<TSource>(IQueryable<TSource>, CancellationToken) Asynchronously returns the first element of a sequence. Declaration public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to return the first element of. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task <TSource> A task that represents the asynchronous operation. The task result contains the first element in source . Type Parameters TSource The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use 'await' to ensure that any asynchronous operations have completed before calling another method on this context. FirstAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Asynchronously returns the first element of a sequence that satisfies a specified condition. Declaration public static Task<TSource> FirstAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to return the first element of. Expression < Func <TSource, Boolean >> predicate A function to test each element for a condition. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task <TSource> A task that represents the asynchronous operation. The task result contains the first element in source that passes the test in predicate . Type Parameters TSource The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use 'await' to ensure that any asynchronous operations have completed before calling another method on this context. FirstOrDefaultAsync<TSource>(IQueryable<TSource>, CancellationToken) Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements. Declaration public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to return the first element of. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task <TSource> A task that represents the asynchronous operation. The task result contains langword_csharp_default ( TSource ) if source is empty; otherwise, the first element in source . Type Parameters TSource The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use 'await' to ensure that any asynchronous operations have completed before calling another method on this context. FirstOrDefaultAsync<TSource>(IQueryable<TSource>, Expression<Func<TSource, Boolean>>, CancellationToken) Asynchronously returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found. Declaration public static Task<TSource> FirstOrDefaultAsync<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to return the first element of. Expression < Func <TSource, Boolean >> predicate A function to test each element for a condition. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task <TSource> A task that represents the asynchronous operation. The task result contains langword_csharp_default ( TSource ) if source is empty or if no element passes the test specified by predicate ; otherwise, the first element in source that passes the test specified by predicate . Type Parameters TSource The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use 'await' to ensure that any asynchronous operations have completed before calling another method on this context. ForEachAsync<T>(IQueryable<T>, Action<T>, CancellationToken) Asynchronously enumerates the query results and performs the specified action on each element. Declaration public static Task ForEachAsync<T>(this IQueryable<T> source, Action<T> action, CancellationToken cancellationToken = null) Parameters IQueryable <T> source An to enumerate. Action <T> action The action to perform on each element. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task A task that represents the asynchronous operation. Type Parameters T The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use 'await' to ensure that any asynchronous operations have completed before calling another method on this context. IgnoreQueryFilters<TEntity>(IQueryable<TEntity>) Specifies that the current LINQ query should not have any model-level entity query filters applied. Declaration public static IQueryable<TEntity> IgnoreQueryFilters<TEntity>(this IQueryable<TEntity> source) where TEntity : class Parameters IQueryable <TEntity> source The source query. Returns IQueryable <TEntity> A new query that will not apply any model-level entity query filters. Type Parameters TEntity The type of entity being queried. ToArrayAsync<TSource>(IQueryable<TSource>, CancellationToken) Asynchronously creates an array from an by enumerating it asynchronously. Declaration public static Task<TSource[]> ToArrayAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to create an array from. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task <TSource[]> A task that represents the asynchronous operation. The task result contains an array that contains elements from the input sequence. Type Parameters TSource The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use 'await' to ensure that any asynchronous operations have completed before calling another method on this context. ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, CancellationToken) Creates a from an by enumerating it asynchronously according to a specified key selector function. Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to create a from. Func <TSource, TKey> keySelector A function to extract a key from each element. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task < Dictionary <TKey, TSource>> A task that represents the asynchronous operation. The task result contains a that contains selected keys and values. Type Parameters TSource The type of the elements of source . TKey The type of the key returned by keySelector . Remarks Multiple active operations on the same context instance are not supported. Use 'await' to ensure that any asynchronous operations have completed before calling another method on this context. ToDictionaryAsync<TSource, TKey>(IQueryable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>, CancellationToken) Creates a from an by enumerating it asynchronously according to a specified key selector function and a comparer. Declaration public static Task<Dictionary<TKey, TSource>> ToDictionaryAsync<TSource, TKey>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to create a from. Func <TSource, TKey> keySelector A function to extract a key from each element. IEqualityComparer <TKey> comparer An to compare keys. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task < Dictionary <TKey, TSource>> A task that represents the asynchronous operation. The task result contains a that contains selected keys and values. Type Parameters TSource The type of the elements of source . TKey The type of the key returned by keySelector . Remarks Multiple active operations on the same context instance are not supported. Use 'await' to ensure that any asynchronous operations have completed before calling another method on this context. ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, CancellationToken) Creates a from an by enumerating it asynchronously according to a specified key selector and an element selector function. Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to create a from. Func <TSource, TKey> keySelector A function to extract a key from each element. Func <TSource, TElement> elementSelector A transform function to produce a result element value from each element. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task < Dictionary <TKey, TElement>> A task that represents the asynchronous operation. The task result contains a that contains values of type TElement selected from the input sequence. Type Parameters TSource The type of the elements of source . TKey The type of the key returned by keySelector . TElement The type of the value returned by elementSelector . Remarks Multiple active operations on the same context instance are not supported. Use 'await' to ensure that any asynchronous operations have completed before calling another method on this context. ToDictionaryAsync<TSource, TKey, TElement>(IQueryable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>, CancellationToken) Creates a from an by enumerating it asynchronously according to a specified key selector function, a comparer, and an element selector function. Declaration public static Task<Dictionary<TKey, TElement>> ToDictionaryAsync<TSource, TKey, TElement>(this IQueryable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to create a from. Func <TSource, TKey> keySelector A function to extract a key from each element. Func <TSource, TElement> elementSelector A transform function to produce a result element value from each element. IEqualityComparer <TKey> comparer An to compare keys. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task < Dictionary <TKey, TElement>> A task that represents the asynchronous operation. The task result contains a that contains values of type TElement selected from the input sequence. Type Parameters TSource The type of the elements of source . TKey The type of the key returned by keySelector . TElement The type of the value returned by elementSelector . Remarks Multiple active operations on the same context instance are not supported. Use 'await' to ensure that any asynchronous operations have completed before calling another method on this context. ToListAsync<TSource>(IQueryable<TSource>, CancellationToken) Asynchronously creates a from an by enumerating it asynchronously. Declaration public static Task<List<TSource>> ToListAsync<TSource>(this IQueryable<TSource> source, CancellationToken cancellationToken = null) Parameters IQueryable <TSource> source An to create a list from. CancellationToken cancellationToken A to observe while waiting for the task to complete. Returns Task < List <TSource>> A task that represents the asynchronous operation. The task result contains a that contains elements from the input sequence. Type Parameters TSource The type of the elements of source . Remarks Multiple active operations on the same context instance are not supported. Use 'await' to ensure that any asynchronous operations have completed before calling another method on this context."
  },
  "api/PnP.Core.ServiceError.html": {
    "href": "api/PnP.Core.ServiceError.html",
    "title": "Class ServiceError | PnP Core SDK",
    "keywords": "Class ServiceError Error information for a service error Inheritance Object BaseError ServiceError CsomError MicrosoftGraphError SharePointRestError Inherited Members BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData BaseError.AddAdditionalData(String, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class ServiceError : BaseError Constructors ServiceError(ErrorType, Int32) ServiceError constructor using error type and http response code to create a backend service request error Declaration public ServiceError(ErrorType type, int httpResponseCode) Parameters ErrorType type Type of the error Int32 httpResponseCode Http response code of the error Properties ClientRequestId Client request id header returned in the response. Declaration public string ClientRequestId { get; } Property Value String Code Graph error code Declaration public string Code { get; } Property Value String HttpResponseCode Http response code that was linked to the service error Declaration public int HttpResponseCode { get; } Property Value Int32 Message Error message that was linked to the service error Declaration public string Message { get; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.ServiceException.html": {
    "href": "api/PnP.Core.ServiceException.html",
    "title": "Class ServiceException | PnP Core SDK",
    "keywords": "Class ServiceException Abstract class representing service errors Inheritance Object PnPException ServiceException CsomServiceException MicrosoftGraphServiceException SharePointRestServiceException Inherited Members PnPException.Error Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class ServiceException : PnPException Constructors ServiceException() Creates a service request exception Declaration public ServiceException() ServiceException(ErrorType, Int32, String) Creates a service request exception Declaration public ServiceException(ErrorType type, int httpResponseCode, string message) Parameters ErrorType type Error type Int32 httpResponseCode Http response code of the service request that got an error back String message Exception message ServiceException(String) Creates a service request exception Declaration public ServiceException(string message) Parameters String message Exception message ServiceException(String, Exception) Creates a service request exception Declaration public ServiceException(string message, Exception innerException) Parameters String message Exception message Exception innerException Inner exception to be linked to this ServiceException Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.ApiResponse.html": {
    "href": "api/PnP.Core.Services.ApiResponse.html",
    "title": "Struct ApiResponse | PnP Core SDK",
    "keywords": "Struct ApiResponse Defines the response of an executed API call Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public struct ApiResponse Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.Batch.html": {
    "href": "api/PnP.Core.Services.Batch.html",
    "title": "Class Batch | PnP Core SDK",
    "keywords": "Class Batch Defines a Batch of requests to execute Inheritance Object Batch Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class Batch : object Constructors Batch() Default public constructor, instantiates a Batch Declaration public Batch() Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.Builder.Configuration.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.html",
    "title": "Namespace PnP.Core.Services.Builder.Configuration | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Services.Builder.Configuration Classes PnPCoreContextOptions Microsoft Graph global settings PnPCoreHttpRequestsGraphOptions Microsoft Graph REST options PnPCoreHttpRequestsOptions Http request global settings PnPCoreHttpRequestsSharePointRestOptions SharePoint Online REST options PnPCoreOptions Options for configuring PnP Core SDK PnPCoreSiteOptions Options for configuring a single site in PnP Core SDK PnPCoreSitesOptions Options for configuring PnP Core SDK"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreContextOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreContextOptions.html",
    "title": "Class PnPCoreContextOptions | PnP Core SDK",
    "keywords": "Class PnPCoreContextOptions Microsoft Graph global settings Inheritance Object PnPCoreContextOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreContextOptions : object Properties GraphAlwaysUseBeta If true than all requests to Microsoft Graph use the beta endpoint Declaration public bool GraphAlwaysUseBeta { get; set; } Property Value Boolean GraphCanUseBeta If true than the Graph beta endpoint is used when there's no other option, default approach stays using the v1 endpoint Declaration public bool GraphCanUseBeta { get; set; } Property Value Boolean GraphFirst Controls whether the library will try to use Microsoft Graph over REST whenever that's defined in the model Declaration public bool GraphFirst { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreHttpRequestsGraphOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreHttpRequestsGraphOptions.html",
    "title": "Class PnPCoreHttpRequestsGraphOptions | PnP Core SDK",
    "keywords": "Class PnPCoreHttpRequestsGraphOptions Microsoft Graph REST options Inheritance Object PnPCoreHttpRequestsGraphOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreHttpRequestsGraphOptions : object Properties DelayInSeconds How many seconds to wait for the next retry attempt. Defaults to 3 Declaration public int DelayInSeconds { get; set; } Property Value Int32 MaxRetries When not using retry-after, how many times can a retry be made. Defaults to 10 Declaration public int MaxRetries { get; set; } Property Value Int32 UseIncrementalDelay Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true Declaration public bool UseIncrementalDelay { get; set; } Property Value Boolean UseRetryAfterHeader Use the Retry-After header for calculating the delay in case of a retry. Defaults to true Declaration public bool UseRetryAfterHeader { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreHttpRequestsOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreHttpRequestsOptions.html",
    "title": "Class PnPCoreHttpRequestsOptions | PnP Core SDK",
    "keywords": "Class PnPCoreHttpRequestsOptions Http request global settings Inheritance Object PnPCoreHttpRequestsOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreHttpRequestsOptions : object Properties MicrosoftGraph Microsoft Graph REST options Declaration public PnPCoreHttpRequestsGraphOptions MicrosoftGraph { get; set; } Property Value PnPCoreHttpRequestsGraphOptions SharePointRest SharePoint Online REST options Declaration public PnPCoreHttpRequestsSharePointRestOptions SharePointRest { get; set; } Property Value PnPCoreHttpRequestsSharePointRestOptions UserAgent User agent value, can be customized via configuration Declaration public string UserAgent { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreHttpRequestsSharePointRestOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreHttpRequestsSharePointRestOptions.html",
    "title": "Class PnPCoreHttpRequestsSharePointRestOptions | PnP Core SDK",
    "keywords": "Class PnPCoreHttpRequestsSharePointRestOptions SharePoint Online REST options Inheritance Object PnPCoreHttpRequestsSharePointRestOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreHttpRequestsSharePointRestOptions : object Properties DelayInSeconds How many seconds to wait for the next retry attempt. Defaults to 3 Declaration public int DelayInSeconds { get; set; } Property Value Int32 MaxRetries When not using retry-after, how many times can a retry be made. Defaults to 10 Declaration public int MaxRetries { get; set; } Property Value Int32 UseIncrementalDelay Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true Declaration public bool UseIncrementalDelay { get; set; } Property Value Boolean UseRetryAfterHeader Use the Retry-After header for calculating the delay in case of a retry. Defaults to false Declaration public bool UseRetryAfterHeader { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreOptions.html",
    "title": "Class PnPCoreOptions | PnP Core SDK",
    "keywords": "Class PnPCoreOptions Options for configuring PnP Core SDK Inheritance Object PnPCoreOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreOptions : object Properties AADTenantId AAD tenant id, used for telemetry purposes. Can be customized via configuration Declaration public Guid AADTenantId { get; set; } Property Value Guid DefaultAuthenticationProvider The default Authentication Provider for the sites Declaration public IAuthenticationProvider DefaultAuthenticationProvider { get; set; } Property Value IAuthenticationProvider DisableTelemetry Turns on/off telemetry, can be customized via configuration. Defaults to false. Declaration public bool DisableTelemetry { get; set; } Property Value Boolean HttpRequests The global HTTP requests settings Declaration public PnPCoreHttpRequestsOptions HttpRequests { get; set; } Property Value PnPCoreHttpRequestsOptions PnPContext The global PnPContext options Declaration public PnPCoreContextOptions PnPContext { get; set; } Property Value PnPCoreContextOptions Sites The sites options Declaration public PnPCoreSitesOptions Sites { get; } Property Value PnPCoreSitesOptions Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreSiteOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreSiteOptions.html",
    "title": "Class PnPCoreSiteOptions | PnP Core SDK",
    "keywords": "Class PnPCoreSiteOptions Options for configuring a single site in PnP Core SDK Inheritance Object PnPCoreSiteOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreSiteOptions : object Properties AuthenticationProvider The Authentication Provider Declaration public IAuthenticationProvider AuthenticationProvider { get; set; } Property Value IAuthenticationProvider SiteUrl The URL of the target site Declaration public string SiteUrl { get; set; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.Builder.Configuration.PnPCoreSitesOptions.html": {
    "href": "api/PnP.Core.Services.Builder.Configuration.PnPCoreSitesOptions.html",
    "title": "Class PnPCoreSitesOptions | PnP Core SDK",
    "keywords": "Class PnPCoreSitesOptions Options for configuring PnP Core SDK Inheritance Object PnPCoreSitesOptions Namespace : PnP.Core.Services.Builder.Configuration Assembly : PnP.Core.dll Syntax public class PnPCoreSitesOptions : Dictionary<string, PnPCoreSiteOptions> Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.Builder.html": {
    "href": "api/PnP.Core.Services.Builder.html",
    "title": "Namespace PnP.Core.Services.Builder | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Services.Builder Classes PnPCoreBuilder Used to configure PnP Core SDK Interfaces IPnPCoreBuilder Used to configure PnP Core SDK"
  },
  "api/PnP.Core.Services.Builder.IPnPCoreBuilder.html": {
    "href": "api/PnP.Core.Services.Builder.IPnPCoreBuilder.html",
    "title": "Interface IPnPCoreBuilder | PnP Core SDK",
    "keywords": "Interface IPnPCoreBuilder Used to configure PnP Core SDK Namespace : PnP.Core.Services.Builder Assembly : PnP.Core.dll Syntax public interface IPnPCoreBuilder Properties Services Collection of services for Dependecy Injection Declaration IServiceCollection Services { get; } Property Value IServiceCollection Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.Builder.PnPCoreBuilder.html": {
    "href": "api/PnP.Core.Services.Builder.PnPCoreBuilder.html",
    "title": "Class PnPCoreBuilder | PnP Core SDK",
    "keywords": "Class PnPCoreBuilder Used to configure PnP Core SDK Inheritance Object PnPCoreBuilder Namespace : PnP.Core.Services.Builder Assembly : PnP.Core.dll Syntax public class PnPCoreBuilder : object, IPnPCoreBuilder Constructors PnPCoreBuilder(IServiceCollection) Constructor Declaration public PnPCoreBuilder(IServiceCollection services) Parameters IServiceCollection services The services being configured. Properties Services The services being configured Declaration public virtual IServiceCollection Services { get; } Property Value IServiceCollection Implements IPnPCoreBuilder.Services Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.FromJson.html": {
    "href": "api/PnP.Core.Services.FromJson.html",
    "title": "Class FromJson | PnP Core SDK",
    "keywords": "Class FromJson Class that represents the JSON context that's being used during call outs when parsing JSON responses Inheritance Object FromJson Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class FromJson : object Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.html": {
    "href": "api/PnP.Core.Services.html",
    "title": "Namespace PnP.Core.Services | PnP Core SDK",
    "keywords": "Namespace PnP.Core.Services Classes Batch Defines a Batch of requests to execute FromJson Class that represents the JSON context that's being used during call outs when parsing JSON responses MicrosoftGraphClient Client that handles all Microsoft Graph requests PnPContext PnP Context class...the glue between the model and the data stores PnPContextFactory Public factory service to create PnPContext object instances PnPContextFactoryCollectionExtensions Extension class for the IServiceCollection type to provide supporting methods for the PnPContextFactory service PnPContextFactoryOptions Defines the options to configure the PnPContextFactory object PnPContextFactoryOptionsConfiguration PnPContext configuration options PnPGlobalSettingsOptions PnP Core SDK settings class SharePointRestClient Client that handles all SharePoint REST requests Structs ApiResponse Defines the response of an executed API call Interfaces IAuthenticationProvider Defines the public interface that any Authentication Provider must implement IPnPContextFactory Public interface for the injectable service to create an PnPContext"
  },
  "api/PnP.Core.Services.IAuthenticationProvider.html": {
    "href": "api/PnP.Core.Services.IAuthenticationProvider.html",
    "title": "Interface IAuthenticationProvider | PnP Core SDK",
    "keywords": "Interface IAuthenticationProvider Defines the public interface that any Authentication Provider must implement Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public interface IAuthenticationProvider Methods AuthenticateRequestAsync(Uri, HttpRequestMessage) Authenticates the specified request message. Declaration Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) Parameters Uri resource Request uri HttpRequestMessage request The to authenticate. Returns Task The task to await. GetAccessTokenAsync(Uri) Gets an access token for the requested resource Declaration Task<string> GetAccessTokenAsync(Uri resource) Parameters Uri resource Resource to request an access token for Returns Task < String > An access token GetAccessTokenAsync(Uri, String[]) Gets an access token for the requested resource and scope Declaration Task<string> GetAccessTokenAsync(Uri resource, String[] scopes) Parameters Uri resource Resource to request an access token for String [] scopes Scopes to request Returns Task < String > An access token Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.IPnPContextFactory.html": {
    "href": "api/PnP.Core.Services.IPnPContextFactory.html",
    "title": "Interface IPnPContextFactory | PnP Core SDK",
    "keywords": "Interface IPnPContextFactory Public interface for the injectable service to create an PnPContext Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public interface IPnPContextFactory Methods Create(Guid) Creates a new instance of PnPContext based on a provided group and using the default Authentication Provider Declaration PnPContext Create(Guid groupId) Parameters Guid groupId The id of an Microsoft 365 group Returns PnPContext A PnPContext object based on the provided configuration name Create(Guid, IAuthenticationProvider) Creates a new instance of PnPContext based on a provided group and Authentication Provider instance Declaration PnPContext Create(Guid groupId, IAuthenticationProvider authenticationProvider) Parameters Guid groupId The id of an Microsoft 365 group IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext Returns PnPContext A PnPContext object based on the provided configuration name Create(String) Creates a new instance of PnPContext based on a provided configuration name Declaration PnPContext Create(string name) Parameters String name The name of the configuration to use Returns PnPContext A PnPContext object based on the provided configuration name Create(Uri) Creates a new instance of PnPContext based on a provided URL and using the default Authentication Provider Declaration PnPContext Create(Uri url) Parameters Uri url The URL of the PnPContext as a URI Returns PnPContext A PnPContext object based on the provided configuration name Create(Uri, IAuthenticationProvider) Creates a new instance of PnPContext based on a provided URL and Authentication Provider instance Declaration PnPContext Create(Uri url, IAuthenticationProvider authenticationProvider) Parameters Uri url The URL of the PnPContext as a URI IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext Returns PnPContext A PnPContext object based on the provided configuration name CreateAsync(Guid) Creates a new instance of PnPContext based on a provided group and using the default Authentication Provider Declaration Task<PnPContext> CreateAsync(Guid groupId) Parameters Guid groupId The id of an Microsoft 365 group Returns Task < PnPContext > A PnPContext object based on the provided configuration name CreateAsync(Guid, IAuthenticationProvider) Creates a new instance of PnPContext based on a provided group and Authentication Provider instance Declaration Task<PnPContext> CreateAsync(Guid groupId, IAuthenticationProvider authenticationProvider) Parameters Guid groupId The id of an Microsoft 365 group IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext Returns Task < PnPContext > A PnPContext object based on the provided configuration name CreateAsync(String) Creates a new instance of PnPContext based on a provided configuration name Declaration Task<PnPContext> CreateAsync(string name) Parameters String name The name of the configuration to use Returns Task < PnPContext > A PnPContext object based on the provided configuration name CreateAsync(Uri) Creates a new instance of PnPContext based on a provided URL and using the default Authentication Provider Declaration Task<PnPContext> CreateAsync(Uri url) Parameters Uri url The URL of the PnPContext as a URI Returns Task < PnPContext > A PnPContext object based on the provided configuration name CreateAsync(Uri, IAuthenticationProvider) Creates a new instance of PnPContext based on a provided URL and Authentication Provider instance Declaration Task<PnPContext> CreateAsync(Uri url, IAuthenticationProvider authenticationProvider) Parameters Uri url The URL of the PnPContext as a URI IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext Returns Task < PnPContext > A PnPContext object based on the provided configuration name Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.MicrosoftGraphClient.html": {
    "href": "api/PnP.Core.Services.MicrosoftGraphClient.html",
    "title": "Class MicrosoftGraphClient | PnP Core SDK",
    "keywords": "Class MicrosoftGraphClient Client that handles all Microsoft Graph requests Inheritance Object MicrosoftGraphClient Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class MicrosoftGraphClient : object Constructors MicrosoftGraphClient(HttpClient, ILogger<MicrosoftGraphClient>, IOptions<PnPGlobalSettingsOptions>) Constructs the Microsoft Graph http client Declaration public MicrosoftGraphClient(HttpClient client, ILogger<MicrosoftGraphClient> log, IOptions<PnPGlobalSettingsOptions> options) Parameters HttpClient client Http client instance ILogger < MicrosoftGraphClient > log Logger IOptions < PnPGlobalSettingsOptions > options Settings to configure the http client Properties Client Returns the configured Microsoft Graph http client Declaration public HttpClient Client { get; } Property Value HttpClient Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.PnPContext.html": {
    "href": "api/PnP.Core.Services.PnPContext.html",
    "title": "Class PnPContext | PnP Core SDK",
    "keywords": "Class PnPContext PnP Context class...the glue between the model and the data stores Inheritance Object PnPContext Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPContext : IDisposable Properties AuthenticationProvider Connected authentication provider Declaration public IAuthenticationProvider AuthenticationProvider { get; } Property Value IAuthenticationProvider CurrentBatch Current batch, used for implicit batching Declaration public Batch CurrentBatch { get; } Property Value Batch GraphAlwaysUseBeta If true than all requests to Microsoft Graph use the beta endpoint Declaration public bool GraphAlwaysUseBeta { get; set; } Property Value Boolean GraphCanUseBeta If true than the Graph beta endpoint is used when there's no other option, default approach stays using the v1 endpoint Declaration public bool GraphCanUseBeta { get; set; } Property Value Boolean GraphClient Connected Microsoft Graph client Declaration public MicrosoftGraphClient GraphClient { get; } Property Value MicrosoftGraphClient GraphFirst Controls whether the library will try to use Microsoft Graph over REST whenever that's defined in the model Declaration public bool GraphFirst { get; set; } Property Value Boolean Group Entry point for the Microsoft 365 Group Object Declaration public IGraphGroup Group { get; } Property Value IGraphGroup HasPendingRequests Are there pending requests to execute (in the case of batching) Declaration public bool HasPendingRequests { get; } Property Value Boolean Logger Connected logger Declaration public ILogger Logger { get; } Property Value ILogger RestClient Connected SharePoint REST client Declaration public SharePointRestClient RestClient { get; } Property Value SharePointRestClient Site Entry point for the Site Object Declaration public ISite Site { get; } Property Value ISite Team Entry point for the Team Object Declaration public ITeam Team { get; } Property Value ITeam TermStore Entry point for the Microsoft 365 TermStore Declaration public ITermStore TermStore { get; } Property Value ITermStore Uri Uri of the SharePoint site we're working against Declaration public Uri Uri { get; } Property Value Uri Web Entry point for the Web Object Declaration public IWeb Web { get; } Property Value IWeb Methods Clone() Clones this context into a new context for the same SharePoint site Declaration public PnPContext Clone() Returns PnPContext New PnPContext Clone(Uri) Clones this context for another SharePoint site Declaration public PnPContext Clone(Uri uri) Parameters Uri uri Uri of the other SharePoint site Returns PnPContext New PnPContext Dispose() Disposes this PnPContext Declaration public void Dispose() Dispose(Boolean) Disposes this PnPContext Declaration protected virtual void Dispose(bool disposing) Parameters Boolean disposing Do we need to dispose resources ExecuteAsync() Method to execute the current batch Declaration public Task ExecuteAsync() Returns Task The asynchronous task that will be executed ExecuteAsync(Batch) Method to execute a given batch Declaration public Task ExecuteAsync(Batch batch) Parameters Batch batch Batch to execute Returns Task The asynchronous task that will be executed NewBatch() Creates a new batch Declaration public Batch NewBatch() Returns Batch Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.PnPContextFactory.html": {
    "href": "api/PnP.Core.Services.PnPContextFactory.html",
    "title": "Class PnPContextFactory | PnP Core SDK",
    "keywords": "Class PnPContextFactory Public factory service to create PnPContext object instances Inheritance Object PnPContextFactory Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPContextFactory : object, IPnPContextFactory Constructors PnPContextFactory(ILogger<PnPContext>, SharePointRestClient, MicrosoftGraphClient, IOptions<PnPContextFactoryOptions>, IOptions<PnPGlobalSettingsOptions>, TelemetryClient) Default constructor for PnPContextFactory Declaration public PnPContextFactory(ILogger<PnPContext> logger, SharePointRestClient sharePointRestClient, MicrosoftGraphClient microsoftGraphClient, IOptions<PnPContextFactoryOptions> contextOptions, IOptions<PnPGlobalSettingsOptions> globalOptions, TelemetryClient telemetryClient) Parameters ILogger < PnPContext > logger Connected logger SharePointRestClient sharePointRestClient SharePoint REST http client to use MicrosoftGraphClient microsoftGraphClient Microsoft Graph http client to use IOptions < PnPContextFactoryOptions > contextOptions PnPContextFactory options IOptions < PnPGlobalSettingsOptions > globalOptions Global options to use TelemetryClient telemetryClient Connected Azure AppInsights telemetry client Properties ContextOptions Options used to configure this PnPContext Declaration protected PnPContextFactoryOptions ContextOptions { get; } Property Value PnPContextFactoryOptions GlobalOptions Options used to configure this PnPContext Declaration protected PnPGlobalSettingsOptions GlobalOptions { get; } Property Value PnPGlobalSettingsOptions Log Connected logger Declaration protected ILogger Log { get; } Property Value ILogger MicrosoftGraphClient Connected Microsoft Graph http client Declaration protected MicrosoftGraphClient MicrosoftGraphClient { get; } Property Value MicrosoftGraphClient SharePointRestClient Connected SharePoint REST http client Declaration protected SharePointRestClient SharePointRestClient { get; } Property Value SharePointRestClient TelemetryClient Connected Azure AppInsights telemetry client Declaration protected TelemetryClient TelemetryClient { get; } Property Value TelemetryClient Methods Create(Guid) Creates a new instance of PnPContext based on a provided group and using the default Authentication Provider Declaration public virtual PnPContext Create(Guid groupId) Parameters Guid groupId The id of an Microsoft 365 group Returns PnPContext A PnPContext object based on the provided configuration name Implements IPnPContextFactory.Create(Guid) Create(Guid, IAuthenticationProvider) Creates a new instance of PnPContext based on a provided group and Authentication Provider instance Declaration public virtual PnPContext Create(Guid groupId, IAuthenticationProvider authenticationProvider) Parameters Guid groupId The id of an Microsoft 365 group IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext Returns PnPContext A PnPContext object based on the provided configuration name Implements IPnPContextFactory.Create(Guid, IAuthenticationProvider) Create(String) Creates a new instance of SPOContext based on a provided configuration name Declaration public virtual PnPContext Create(string name) Parameters String name The name of the SPOContext configuration to use Returns PnPContext A SPOContext object based on the provided configuration name Implements IPnPContextFactory.Create(String) Create(Uri) Creates a new instance of SPOContext based on a provided configuration name Declaration public virtual PnPContext Create(Uri url) Parameters Uri url The URL of the SPOContext as a URI Returns PnPContext A SPOContext object based on the provided configuration name Implements IPnPContextFactory.Create(Uri) Create(Uri, IAuthenticationProvider) Creates a new instance of SPOContext based on a provided configuration name Declaration public virtual PnPContext Create(Uri url, IAuthenticationProvider authenticationProvider) Parameters Uri url The URL of the SPOContext as a URI IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the SPOContext Returns PnPContext A SPOContext object based on the provided configuration name Implements IPnPContextFactory.Create(Uri, IAuthenticationProvider) CreateAsync(Guid) Creates a new instance of PnPContext based on a provided group and using the default Authentication Provider Declaration public virtual Task<PnPContext> CreateAsync(Guid groupId) Parameters Guid groupId The id of an Microsoft 365 group Returns Task < PnPContext > A PnPContext object based on the provided configuration name Implements IPnPContextFactory.CreateAsync(Guid) CreateAsync(Guid, IAuthenticationProvider) Creates a new instance of PnPContext based on a provided group and Authentication Provider instance Declaration public virtual Task<PnPContext> CreateAsync(Guid groupId, IAuthenticationProvider authenticationProvider) Parameters Guid groupId The id of an Microsoft 365 group IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the PnPContext Returns Task < PnPContext > A PnPContext object based on the provided configuration name Implements IPnPContextFactory.CreateAsync(Guid, IAuthenticationProvider) CreateAsync(String) Creates a new instance of SPOContext based on a provided configuration name Declaration public virtual Task<PnPContext> CreateAsync(string name) Parameters String name The name of the SPOContext configuration to use Returns Task < PnPContext > A SPOContext object based on the provided configuration name Implements IPnPContextFactory.CreateAsync(String) CreateAsync(Uri) Creates a new instance of SPOContext based on a provided configuration name Declaration public virtual Task<PnPContext> CreateAsync(Uri url) Parameters Uri url The URL of the SPOContext as a URI Returns Task < PnPContext > A SPOContext object based on the provided configuration name Implements IPnPContextFactory.CreateAsync(Uri) CreateAsync(Uri, IAuthenticationProvider) Creates a new instance of SPOContext based on a provided configuration name Declaration public virtual Task<PnPContext> CreateAsync(Uri url, IAuthenticationProvider authenticationProvider) Parameters Uri url The URL of the SPOContext as a URI IAuthenticationProvider authenticationProvider The Authentication Provider to use to authenticate within the SPOContext Returns Task < PnPContext > A SPOContext object based on the provided configuration name Implements IPnPContextFactory.CreateAsync(Uri, IAuthenticationProvider) Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.PnPContextFactoryCollectionExtensions.html": {
    "href": "api/PnP.Core.Services.PnPContextFactoryCollectionExtensions.html",
    "title": "Class PnPContextFactoryCollectionExtensions | PnP Core SDK",
    "keywords": "Class PnPContextFactoryCollectionExtensions Extension class for the IServiceCollection type to provide supporting methods for the PnPContextFactory service Inheritance Object PnPContextFactoryCollectionExtensions Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public static class PnPContextFactoryCollectionExtensions : object Methods AddPnPContextFactory(IServiceCollection) Adds the PnPContextFactory to the collection of services Declaration public static IServiceCollection AddPnPContextFactory(this IServiceCollection collection) Parameters IServiceCollection collection Collection of loaded services Returns IServiceCollection Collection of loaded services AddPnPContextFactory(IServiceCollection, Action<PnPContextFactoryOptions>) Adds the PnPContextFactory to the collection of services with options Declaration public static IServiceCollection AddPnPContextFactory(this IServiceCollection collection, Action<PnPContextFactoryOptions> options) Parameters IServiceCollection collection Collection of loaded services Action < PnPContextFactoryOptions > options PnPContextFactory configuration options Returns IServiceCollection Collection of loaded services"
  },
  "api/PnP.Core.Services.PnPContextFactoryOptions.html": {
    "href": "api/PnP.Core.Services.PnPContextFactoryOptions.html",
    "title": "Class PnPContextFactoryOptions | PnP Core SDK",
    "keywords": "Class PnPContextFactoryOptions Defines the options to configure the PnPContextFactory object Inheritance Object PnPContextFactoryOptions Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPContextFactoryOptions : object Properties Configurations Collection of configurations for PnPContextFactory Declaration public List<PnPContextFactoryOptionsConfiguration> Configurations { get; } Property Value List < PnPContextFactoryOptionsConfiguration > DefaultAuthenticationProvider The Default Authentication Provider configuration Declaration public IAuthenticationProvider DefaultAuthenticationProvider { get; set; } Property Value IAuthenticationProvider GraphAlwaysUseBeta If true than all requests to Microsoft Graph use the beta endpoint Declaration public bool GraphAlwaysUseBeta { get; set; } Property Value Boolean GraphCanUseBeta If true than the Graph beta endpoint is used when there's no other option, default approach stays using the v1 endpoint Declaration public bool GraphCanUseBeta { get; set; } Property Value Boolean GraphFirst Controls whether the library will try to use Microsoft Graph over REST whenever that's defined in the model Declaration public bool GraphFirst { get; set; } Property Value Boolean Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.PnPContextFactoryOptionsConfiguration.html": {
    "href": "api/PnP.Core.Services.PnPContextFactoryOptionsConfiguration.html",
    "title": "Class PnPContextFactoryOptionsConfiguration | PnP Core SDK",
    "keywords": "Class PnPContextFactoryOptionsConfiguration PnPContext configuration options Inheritance Object PnPContextFactoryOptionsConfiguration Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPContextFactoryOptionsConfiguration : object Properties AuthenticationProvider The Authentication Provider configuration Declaration public IAuthenticationProvider AuthenticationProvider { get; set; } Property Value IAuthenticationProvider Name The Name of the configuration Declaration public string Name { get; set; } Property Value String SiteUrl The URL of the target SPO Site Declaration public Uri SiteUrl { get; set; } Property Value Uri Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.PnPGlobalSettingsOptions.html": {
    "href": "api/PnP.Core.Services.PnPGlobalSettingsOptions.html",
    "title": "Class PnPGlobalSettingsOptions | PnP Core SDK",
    "keywords": "Class PnPGlobalSettingsOptions PnP Core SDK settings class Inheritance Object PnPGlobalSettingsOptions Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class PnPGlobalSettingsOptions : object Constructors PnPGlobalSettingsOptions() Default constructor Declaration public PnPGlobalSettingsOptions() PnPGlobalSettingsOptions(ILogger<PnPGlobalSettingsOptions>) Custom constructor Declaration public PnPGlobalSettingsOptions(ILogger<PnPGlobalSettingsOptions> log) Parameters ILogger < PnPGlobalSettingsOptions > log Connected logger Properties AADTenantId AAD tenant id, used for telemetry purposes. Can be customized via configuration Declaration public Guid AADTenantId { get; set; } Property Value Guid DisableTelemetry Turns on/off telemetry, can be customized via configuration. Defaults to false. Declaration public bool DisableTelemetry { get; set; } Property Value Boolean HttpMicrosoftGraphDelayInSeconds How many seconds to wait for the next retry attempt. Defaults to 3 Declaration public int HttpMicrosoftGraphDelayInSeconds { get; set; } Property Value Int32 HttpMicrosoftGraphMaxRetries When not using retry-after, how many times can a retry be made. Defaults to 10 Declaration public int HttpMicrosoftGraphMaxRetries { get; set; } Property Value Int32 HttpMicrosoftGraphUseIncrementalDelay Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true Declaration public bool HttpMicrosoftGraphUseIncrementalDelay { get; set; } Property Value Boolean HttpMicrosoftGraphUseRetryAfterHeader Use the Retry-After header for calculating the delay in case of a retry. Defaults to true Declaration public bool HttpMicrosoftGraphUseRetryAfterHeader { get; set; } Property Value Boolean HttpSharePointRestDelayInSeconds How many seconds to wait for the next retry attempt. Defaults to 3 Declaration public int HttpSharePointRestDelayInSeconds { get; set; } Property Value Int32 HttpSharePointRestMaxRetries When not using retry-after, how many times can a retry be made. Defaults to 10 Declaration public int HttpSharePointRestMaxRetries { get; set; } Property Value Int32 HttpSharePointRestUseIncrementalDelay Use an incremental strategy for the delay: each retry doubles the previous delay time. Defaults to true Declaration public bool HttpSharePointRestUseIncrementalDelay { get; set; } Property Value Boolean HttpSharePointRestUseRetryAfterHeader Use the Retry-After header for calculating the delay in case of a retry. Defaults to false Declaration public bool HttpSharePointRestUseRetryAfterHeader { get; set; } Property Value Boolean HttpUserAgent User agent value, can be customized via configuration Declaration public string HttpUserAgent { get; } Property Value String VersionTag Version tag used in telemetry Declaration public string VersionTag { get; } Property Value String Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.Services.SharePointRestClient.html": {
    "href": "api/PnP.Core.Services.SharePointRestClient.html",
    "title": "Class SharePointRestClient | PnP Core SDK",
    "keywords": "Class SharePointRestClient Client that handles all SharePoint REST requests Inheritance Object SharePointRestClient Namespace : PnP.Core.Services Assembly : PnP.Core.dll Syntax public class SharePointRestClient : object Constructors SharePointRestClient(HttpClient, ILogger<SharePointRestClient>, IOptions<PnPGlobalSettingsOptions>) Default Constructor Declaration public SharePointRestClient(HttpClient client, ILogger<SharePointRestClient> log, IOptions<PnPGlobalSettingsOptions> options) Parameters HttpClient client Http Client coming from the .Net http client factory ILogger < SharePointRestClient > log Logger service IOptions < PnPGlobalSettingsOptions > options Options service Properties Client Http client which needs to be used for making a SharePoint REST call Declaration public HttpClient Client { get; } Property Value HttpClient Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.SharePointRestError.html": {
    "href": "api/PnP.Core.SharePointRestError.html",
    "title": "Class SharePointRestError | PnP Core SDK",
    "keywords": "Class SharePointRestError SharePoint Rest service error Inheritance Object BaseError ServiceError SharePointRestError Inherited Members ServiceError.HttpResponseCode ServiceError.Message ServiceError.ClientRequestId ServiceError.Code BaseError.Type BaseError.PnPCorrelationId BaseError.AdditionalData BaseError.AddAdditionalData(String, Object) Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class SharePointRestError : ServiceError Constructors SharePointRestError(ErrorType, Int32, String) Default constructor for the SharePointRestError error Declaration public SharePointRestError(ErrorType type, int httpResponseCode, string response) Parameters ErrorType type ErrorType type of the error Int32 httpResponseCode Http response code of the service request that failed String response Service request response content Properties ServerErrorCode SharePoint server error code Declaration public long ServerErrorCode { get; } Property Value Int64 Methods ToString() Outputs a SharePointRestError to a string representation Declaration public override string ToString() Returns String String representation Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.SharePointRestServiceException.html": {
    "href": "api/PnP.Core.SharePointRestServiceException.html",
    "title": "Class SharePointRestServiceException | PnP Core SDK",
    "keywords": "Class SharePointRestServiceException Microsoft SharePoint REST Service exception Inheritance Object PnPException ServiceException SharePointRestServiceException Inherited Members PnPException.Error Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public class SharePointRestServiceException : ServiceException Constructors SharePointRestServiceException(ErrorType, Int32, String) Creates a SharePointRestServiceException using the provided error type, http response code and request response Declaration public SharePointRestServiceException(ErrorType type, int httpResponseCode, string response) Parameters ErrorType type Type of the error Int32 httpResponseCode Http response code of the service request String response Response of the service request that errored out Methods ToString() Outputs a SharePointRestServiceException to a string representation Declaration public override string ToString() Returns String String representation Extension Methods DataModelExtensions.IsPropertyAvailable<TModel>(TModel, Expression<Func<TModel, Object>>)"
  },
  "api/PnP.Core.UrlUtility.html": {
    "href": "api/PnP.Core.UrlUtility.html",
    "title": "Class UrlUtility | PnP Core SDK",
    "keywords": "Class UrlUtility Static methods to modify URL paths. Inheritance Object UrlUtility Namespace : PnP.Core Assembly : PnP.Core.dll Syntax public static class UrlUtility : object Methods Combine(String, String) Combines a path and a relative path. Declaration public static Uri Combine(string path, string relative) Parameters String path A SharePoint URL String relative SharePoint relative URL Returns Uri Returns comibed path with a relative path Combine(String, String[]) Combines a path and a relative path. Declaration public static Uri Combine(string path, params string[] relativePaths) Parameters String path A SharePoint URL String [] relativePaths SharePoint relative URLs Returns Uri Returns combined path with a relative paths Combine(Uri, String[]) Combines a path and a relative path. Declaration public static Uri Combine(Uri path, params string[] relativePaths) Parameters Uri path A SharePoint URL String [] relativePaths SharePoint relative URLs Returns Uri Returns combined path with a relative paths EnsureAbsoluteUrl(Uri, String, Boolean) Ensure the absolute URL from a specified resource URL Declaration public static Uri EnsureAbsoluteUrl(Uri webUrl, string resourceUrl, bool checkIfWebContainedResource = false) Parameters Uri webUrl The URL of a SharePoint site (Web). String resourceUrl The absolute or server relative URL of a resource. Boolean checkIfWebContainedResource Indicates if the resource URL must belong to the specified web (default = false) Returns Uri The absolute URL of the specified resource. EnsureTrailingSlash(String) Ensures that there is a trailing slash at the end of the URL. Declaration public static string EnsureTrailingSlash(string urlToProcess) Parameters String urlToProcess The URL to ensure to have a trailing slash. Returns String The ensured trailing slash URL. EnsureTrailingSlash(Uri) Ensures that there is a trailing slash at the end of the URL. Declaration public static Uri EnsureTrailingSlash(this Uri uri) Parameters Uri uri The URL to ensure to have a trailing slash. Returns Uri The ensured trailing slash URI. IsSameSite(Uri, String) Checks wether the resource absolute or relative URL is located in specified site (Web). Declaration public static bool IsSameSite(Uri webUrl, string resourceUrl) Parameters Uri webUrl The URL of the SharePoint site (Web). String resourceUrl The absolute or relative URL of a resource. Returns Boolean true if the resource is in the same site, false otherwise MakeAbsoluteUrl(Uri, String) Returns absolute URL of a resource located in a SharePoint site. Declaration public static Uri MakeAbsoluteUrl(Uri webUrl, string serverRelativeUrl) Parameters Uri webUrl The URL of a SharePoint site (Web). String serverRelativeUrl Any server relative URL of a resource. Returns Uri"
  },
  "articles/consumer/configuring authentication.html": {
    "href": "articles/consumer/configuring authentication.html",
    "title": "Configuring authentication | PnP Core SDK",
    "keywords": "Configuring authentication The PnP Core SDK works with both SharePoint REST as Microsoft Graph in a transparent way, this also means that the authentication model used must work for both. The chosen authentication model is Azure Active Directory (a.k.a. Azure AD), using Azure Active Directory you can define an application and grant it permissions to access Microsoft 365 workloads like SharePoint, Teams,... Configuring your own application is the recommended approach , but you can also use a multi-tenant application that the PnP team created. Both options are detailed in the next chapters I want to configure my own Azure AD application (recommended) Delegated Permissions (acting in the name of the user) In this section you can learn how to register an application in Azure Active Directory and how to use it in your .NET code, in order to use the PnP Core SDK with interactive login in a Console application, running your requests in the name of the authenticated user. Configuring the application in Azure AD In this step by step guide you will register an application in Azure Active Directory, in order to consume the PnP Core SDK in the name of the user connected to your app (i.e. with a delegated access token) from within a .NET Core Console application. Follow below steps to configure an application in Azure AD: Navigate to https://aad.portal.azure.com/ Click on Azure Active Directory from the left navigation Click on App registrations in the Manage left navigation group Click on New registration Give the application a name (e.g. PnP Core SDK) and click on Register Copy the Application ID (Client ID) from the Overview page, you'll need this GUID value later on Copy the Directory ID (Tenant ID) from the Overview page, you'll need this GUID value later on Click on the API Permissions in the Manage left navigation group Click on Add Permissions and add the permissions you want to give to this application. Below list is a recommendation, you can grant less permissions but that might result in some PnP Core SDK calls to fail due getting access denied errors. SharePoint -> Delegated Permissions -> AllSites -> AllSites.FullControl SharePoint -> Delegated Permissions -> Sites -> Sites.Search.All SharePoint -> Delegated Permissions -> TermStore -> TermStore.ReadWrite.All SharePoint -> Delegated Permissions -> User -> User.ReadWrite.All Microsoft Graph -> Delegated Permissions -> User -> User.Read Microsoft Graph -> Delegated Permissions -> Directory -> Directory.ReadWrite.All Microsoft Graph -> Delegated Permissions -> Directory -> Directory.AccessAsUser.All Microsoft Graph -> Delegated Permissions -> Group -> Group.ReadWrite.All Click on the Grant admin consent for button to consent to these permissions for the users in your organization Click on Authentication in the Manage left navigation group Change Default client type to Treat application as public client and hit Save (this step is optional and you should do that if and only if you are planning to use the UsernamePasswordAuthenticationProvider or the CredentialManagerAuthenticationProvider for authentication) If you want to configure support for interactive login you should also configure the Platform and the redirect URI in the Authentication panel. You can read further details here . Click on Authentication and then click on Add a platform , choose Mobile and desktop applications and provide http://localhost as the Redirect URI Configuring PnP Core SDK to use the configured application When you're configuring your application to use the PnP Core SDK you will have to configure the PnP.Core services and the PnP.Core.Auth services using the AddPnPCore and AddPnPCoreAuthentication methods, respectively. The ClientId and TenantId are those of the application that you just registered in Azure Active Directory. The value for the CredentialManagerName property is the name of the item stored in the Windows Credential Manager. // Add the PnP Core SDK library services.AddPnPCore(options => { options.PnPContext.GraphFirst = true; options.HttpRequests.UserAgent = \"ISV|Contoso|ProductX\"; options.Sites.Add(\"SiteToWorkWith\", new PnPCoreSiteOptions { SiteUrl = \"https://contoso.sharepoint.com/sites/pnp\" }); }); services.AddPnPCoreAuthentication( options => { // Configure an Authentication Provider relying on Windows Credential Manager options.Credentials.Configurations.Add(\"interactive\", new PnPCoreAuthenticationCredentialConfigurationOptions { ClientId = \"{your_client_id}\", TenantId = \"{your_tenant_id}\", Interactive = new PnPCoreAuthenticationInteractiveOptions { RedirectUri = \"http://localhost\" } }); // Configure the default authentication provider options.Credentials.DefaultConfiguration = \"interactive\"; // Map the site defined in AddPnPCore with the // Authentication Provider configured in this action options.Sites.Add(\"SiteToWorkWith\", new PnPCoreAuthenticationSiteOptions { AuthenticationProviderName = \"interactive\" }); }); Application Permissions (acting as an app account with app-only permissions) In this section you can learn how to register an application in Azure Active Directory and how to use it in your .NET code, in order to use the PnP Core SDK within a background job/service/function, running your requests with an app account. Configuring the application in Azure AD The easiest way to register an application in Azure Active Directory for app-only is to use the PnP PowerShell command lets. Specifically you can use the Initialize-PnPPowerShellAuthentication command with the following syntax: $app = Initialize-PnPPowerShellAuthentication -ApplicationName \"PnP.Core.SDK.Consumer\" -Tenant contoso.onmicrosoft.com -OutPath c:\\temp -CertificatePassword (ConvertTo-SecureString -String \"password\" -AsPlainText -Force) -Scopes \"MSGraph.Group.ReadWrite.All\",\"MSGraph.User.ReadWrite.All\",\"SPO.Sites.FullControl.All\",\"SPO.TermStore.ReadWrite.All\",\"SPO.User.ReadWrite.All\" -Store CurrentUser The above command will register for you in Azure Active Directory an app with name PnP.Core.SDK.Consumer , with a self-signed certificate that will be also saved on your filesystem under the c:\\temp folder (remember to create the folder or to provide the path of an already existing folder), with a certificate password value of password (you should provide your own strong password, indeed). Remember to replace contoso.onmicrosoft.com with your Azure AD tenant name, which typically is company.onmicrosoft.com . The permissions granted to the app will be: SharePoint -> Application Permissions -> Sites -> Sites.FullControl.All SharePoint -> Application Permissions -> TermStore -> TermStore.ReadWrite.All SharePoint -> Application Permissions -> User -> User.ReadWrite.All Microsoft Graph -> Application Permissions -> User -> User.ReadWrite.All Microsoft Graph -> Application Permissions -> Group -> Group.ReadWrite.All Executing the command you will first have to authenticate against the target tenant, providing the credentials of a Global Tenant Admin. Then you will see a message like the following one: Waiting 60 seconds to launch consent flow in a browser window. This wait is required to make sure that Azure AD is able to initialize all required artifacts......... Almost 60 seconds later, the command will prompt you for authentication again and to grant the selected permissions to the app you are registering. Once you have done that, in the $app variable you will find information about the just registered app. You can copy in your clipboard the Application ID (Client ID) executing the following command: $app.AzureAppId | clip And you can copy in your clipboard the thumbprint of the generated X.509 certificate executing the following command: $app.'Certificate Thumbprint' | clip Paste this copied values in a safe place, because you will need them soon. In the c:\\temp folder (or whatever else folder you will choose) there will also be a file named PnP.Core.SDK.Consumer.pfx , which includes the private key of the self-signed certificate generated for you, as well as a file named PnP.Core.SDK.Consumer.cer , which includes the public key of the self-signed certificate generated for you. Configuring PnP Core SDK to use the configured application When you're configuring your application to use the PnP Core SDK you will have to configure the PnP.Core services and the PnP.Core.Auth services using the AddPnPCore and AddPnPCoreAuthentication methods, respectively. The ClientId and TenantId are those of the application that you just registered in Azure Active Directory.. // Add the PnP Core SDK library services.AddPnPCore(options => { options.PnPContext.GraphFirst = true; options.HttpRequests.UserAgent = \"ISV|Contoso|ProductX\"; options.Sites.Add(\"SiteToWorkWith\", new PnPCoreSiteOptions { SiteUrl = \"https://contoso.sharepoint.com/sites/pnp\" }); }); services.AddPnPCoreAuthentication( options => { // Configure an Authentication Provider relying on Windows Credential Manager options.Credentials.Configurations.Add(\"x509certificate\", new PnPCoreAuthenticationCredentialConfigurationOptions { ClientId = \"{your_client_id}\", TenantId = \"{your_tenant_id}\", X509Certificate = new PnPCoreAuthenticationX509CertificateOptions { StoreName = StoreName.My, StoreLocation = StoreLocation.CurrentUser, Thumbprint = \"{certificate_thumbprint}\" } }); // Configure the default authentication provider options.Credentials.DefaultConfiguration = \"x509certificate\"; // Map the site defined in AddPnPCore with the // Authentication Provider configured in this action options.Sites.Add(\"SiteToWorkWith\", new PnPCoreAuthenticationSiteOptions { AuthenticationProviderName = \"x509certificate\" }); }); Using the multi-tenant PnP Azure AD application Azure AD has the concept of multi-tenant applications allowing you to re-use an application created in another Azure AD tenant. The PnP team did setup a general purpose Azure AD application (named \"PnP Office 365 Management Shell\") configured with the needed permissions, and you can reuse this application. It means that you don't need to create your own Azure AD application, instead you simply need to consent permissions to the already created multi-tenant application. Step 1 To consent permissions to the PnP multi-tenant application first update below content URL: replace contoso.onmicrosoft.com with your Azure AD tenant name, which typically is company.onmicrosoft.com. https://login.microsoftonline.com/contoso.onmicrosoft.com/adminconsent?client_id=31359c7f-bd7e-475c-86db-fdb8c937548e&state=12345&redirect_uri=https://aka.ms/sppnp Step 2 Login to your Microsoft 365 tenant (e.g. by browsing to SharePoint Online), open a new browser tab and paste the URL you've just created. Azure AD will eventually ask you to login, and then it will prompt you to consent permissions to the app: Click on Accept to accept the requested permissions. At that point you will be redirected to the PnP Site ( https://aka.ms/sppnp ). You've now successfully registered the PnP multi-tenant application in your Azure AD environment and you can use it with the PnP Core SDK. The PnP Core SDK defaults to this application, so if you're not specifying any Azure AD application details when setting up authentication for the application, then the PnP Core SDK automatically uses the PnP application (application id 31359c7f-bd7e-475c-86db-fdb8c937548e). Note If you get errors during this consent process it's most likely because you are not an Azure AD tenant administrator. Please contact your admins and check with them for further steps. Using the credential manager Another supported option to authenticate to a created Azure AD application, configured for delegated permissions, is via username and password, through the UsernamePasswordAuthenticationProvider . To configure this in a secure way it's recommended to setup a credential manager entry and to use the CredentialManagerAuthenticationProvider . Below steps walk you through the setup on Windows, but a similar credential manager concepts exists on other platforms as well. Click on the Windows Start button in the taskbar and type credential manager . Click on the Credential Manager link. Go to Windows Credentials and click on Add a generic credential . Give the credential a name (e.g. Contoso), a user name (e.g. joe@contoso.onmicrosoft.com) and a password. Hit OK to save. Use the credential manager name (Contoso in this example) in the settings of the CredentialManagerAuthenticationProvider provider."
  },
  "articles/consumer/custom-authentication-provider.html": {
    "href": "articles/consumer/custom-authentication-provider.html",
    "title": "Creating a custom Authentication Provider for PnP.Core | PnP Core SDK",
    "keywords": "Creating a custom Authentication Provider for PnP.Core There might be implementations where the default provided authentication providers do not offer the needed features (e.g. when authenticating Blazor WebAssembly applications). If that's the case, you always have the option to write your own authentication provider and use that when working with the PnP Core SDK. Creating a custom authentication provider When using Blazor WebAssembly applications we want to ask the Blazor framework to deliver us an access token for the logged on user and then use that access token in the PnP Core SDK. There's no default authentication provider in PnP.Core.Auth for that, so let's roll our own. Writing an authentication provider comes down to implementing the IAuthenticationProvider interface defined in the PnP.Core.Services namespace (in the PnP.Core assembly). This interface requires 3 methods to be implemented: Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) : authenticates a web requests by adding an access token to it Task<string> GetAccessTokenAsync(Uri resource, String[] scopes) : gets an access token for the requested resource and scope Task<string> GetAccessTokenAsync(Uri resource) : gets an access token for the requested resource and its default scopes Below sample shows a custom authentication provider that can be used in Blazor WebAssembly applications: using Microsoft.AspNetCore.Components.WebAssembly.Authentication; using PnP.Core.Services; using System; using System.Net.Http; using System.Net.Http.Headers; using System.Threading.Tasks; namespace Demo.Blazor { /// <summary> /// Custom authentication provider that uses the WebAssembly access token provider to obtain an access token /// </summary> public class MsalWrappedTokenProvider : IAuthenticationProvider { private readonly IAccessTokenProvider _accessTokenProvider; /// <summary> /// Default constructor /// </summary> /// <param name=\"accessTokenProvider\">WebAssembly access token provider instance</param> public MsalWrappedTokenProvider(IAccessTokenProvider accessTokenProvider) { _accessTokenProvider = accessTokenProvider; } private const string MicrosoftGraphScope = \"Sites.FullControl.All\"; private const string SharePointOnlineScope = \"AllSites.FullControl\"; private string[] GetRelevantScopes(Uri resourceUri) { if (resourceUri.ToString() == \"https://graph.microsoft.com\") { return new[] { $\"{resourceUri}/{MicrosoftGraphScope}\" }; } else { string resource = $\"{resourceUri.Scheme}://{resourceUri.DnsSafeHost}\"; return new[] { $\"{resource}/{SharePointOnlineScope}\" }; } } /// <summary> /// Authenticate the web request /// </summary> /// <param name=\"resource\">Resource to get an access token for</param> /// <param name=\"request\">Request to add the access token on</param> /// <returns></returns> public async Task AuthenticateRequestAsync(Uri resource, HttpRequestMessage request) { if (request == null) { throw new ArgumentNullException(nameof(request)); } if (resource == null) { throw new ArgumentNullException(nameof(resource)); } request.Headers.Authorization = new AuthenticationHeaderValue(\"bearer\", await GetAccessTokenAsync(resource).ConfigureAwait(false)); } /// <summary> /// Gets an access token for the requested resource and scopes /// </summary> /// <param name=\"resource\">Resource to get access token for</param> /// <param name=\"scopes\">Scopes to use when getting the access token</param> /// <returns>Obtained access token</returns> public async Task<string> GetAccessTokenAsync(Uri resource, string[] scopes) { if (resource == null) { throw new ArgumentNullException(nameof(resource)); } if (scopes == null) { throw new ArgumentNullException(nameof(scopes)); } var tokenResult = await _accessTokenProvider.RequestAccessToken(new AccessTokenRequestOptions() { // The scopes must specify the needed permissions for the app to work Scopes = scopes, }).ConfigureAwait(false); if (!tokenResult.TryGetToken(out AccessToken accessToken)) { throw new Exception(\"An error occured while trying to acquire the access token...\"); } return accessToken.Value; } /// <summary> /// Gets an access token for the requested resource /// </summary> /// <param name=\"resource\">Resource to get access token for</param> /// <returns>Obtained access token</returns> public async Task<string> GetAccessTokenAsync(Uri resource) { if (resource == null) { throw new ArgumentNullException(nameof(resource)); } return await GetAccessTokenAsync(resource, GetRelevantScopes(resource)); } } } Using a custom authentication provider Once you've added the custom authentication provider to your project, you need to configure it in the pipeline of PnP Core SDK. This is done by passing an authentication provider instance to the CreateAsync or Create methods of the IPnPContextFactory you're using . using(var context = await pnpContextFactory.CreateAsync(new Uri(\"https://contoso.sharepoint.com/sites/siteA\"), myCustomAuthProvider)) { // use context to read/update Microsoft 365 data }"
  },
  "articles/consumer/pnp core settings.html": {
    "href": "articles/consumer/pnp core settings.html",
    "title": "Configuring the PnP Core SDK via settings | PnP Core SDK",
    "keywords": "Configuring the PnP Core SDK via settings The PnP Core SDK uses a default configuration and as such you're not required to provide specific settings. However, if you want to change the settings, then providing the custom settings via a settings service (e.g. settings file) is the way to go. Sample settings file Below snippet shows the settings which are used by the PnP Core SDK, you can simply include this snippet in your application settings file next to your custom settings. { \"PnPCore\": { \"DisableTelemetry\": \"false\", \"HttpRequests\": { \"UserAgent\": \"ISV|Contoso|ProductX\", \"SharePointRest\": { \"UseRetryAfterHeader\": \"false\", \"MaxRetries\": \"10\", \"DelayInSeconds\": \"3\", \"UseIncrementalDelay\": \"true\" }, \"MicrosoftGraph\": { \"UseRetryAfterHeader\": \"true\", \"MaxRetries\": \"10\", \"DelayInSeconds\": \"3\", \"UseIncrementalDelay\": \"true\" } }, \"PnPContext\": { \"GraphFirst\": \"true\", \"GraphCanUseBeta\": \"true\", \"GraphAlwaysUseBeta\": \"false\" }, \"Credentials\": { \"CredentialManagerAuthentication\": { \"CredentialManagerName\": \"mycreds\" } }, \"Sites\": { \"SiteToWorkWith\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnp\", \"AuthenticationProviderName\": \"CredentialManagerAuthentication\" }, } }, // Not really library related, but since the library assumes logging is connected it's being shown here \"Logging\": { \"LogLevel\": { \"Default\": \"Debug\" } } } Settings overview Setting Default value Description Logging:LogLevel:Default Information Allows you to change log level. See the .Net Logging article for more details. Common levels are Debug and Information. PnPCore:PnPContext:GraphFirst true If for a given request the library can choose between a SharePoint REST or a Microsoft Graph call then it will favor the Microsoft Graph call. Settings this to false will prefer SharePoint REST for all SharePoint related API calls. PnPCore:PnPContext:GraphCanUseBeta true When you ask for data that can only be provided via the Microsoft Graph beta API the PnP Core SDK will use the beta endpoint for that specific request. All other requests will still use the v1.0 endpoint. If you set this to false, then any request that requires Microsoft Graph beta will not provide any result. PnPCore:PnPContext:GraphAlwaysUsesBeta false The library by default uses the production v1.0 Microsoft Graph API. Use this setting to default it to the beta Microsoft Graph API. PnPCore:HttpRequests:UserAgent NONISV|SharePointPnP|PnPCoreSDK Value set as user agent when the request is sent to Microsoft 365. PnPCore:HttpRequests:SharePointRest:UseRetryAfterHeader false Use retry-after http header when calculating the wait time in seconds for SharePoint Rest request retry. PnPCore:HttpRequests:SharePointRest:MaxRetries 10 Maximum number of retries before retrying a SharePoint Rest request throws an exception. PnPCore:HttpRequests:SharePointRest:DelayInSeconds 3 Delay in seconds between SharePoint Rest request retries. PnPCore:HttpRequests:SharePointRest:IncrementalDelay true Delays get incrementally longer with each retry. PnPCore:HttpRequests:MicrosoftGraph:UseRetryAfterHeader true Use retry-after http header when calculating the wait time in seconds for Microsoft Graph request retry. PnPCore:HttpRequests:MicrosoftGraph:MaxRetries 10 Maximum number of retries before retrying a Microsoft Graph request throws an exception. PnPCore:HttpRequests:MicrosoftGraph:DelayInSeconds 3 Delay in seconds between Microsoft Graph request retries. PnPCore:HttpRequests:MicrosoftGraph:IncrementalDelay true Delays get incrementally longer with each retry. PnPCore:DisableTelemetry false Allows to turn off telemetry being sent. Telemetry is used to improve this open source library and it's recommended to keep it on, but you can disable it, if required. PnPCore:Credentials This section defines the settings for the Authentication Providers and it will be updated in the near future. PnPCore:Sites This section defines the site collections to consume using the PnP Core SDK. Every single item of the array has a name, which can then be used with the PnPContextFactory to retrieve an instance of PnPContext for that specific site, a SiteUrl and the AuthenticationProviderName that maps to the corresponding Authentication Provider to use for accessing the target site."
  },
  "articles/consumer/readme.html": {
    "href": "articles/consumer/readme.html",
    "title": "Getting started with the PnP Core SDK | PnP Core SDK",
    "keywords": "Getting started with the PnP Core SDK The PnP Core SDK is designed to be used in modern .Net development, hence it relies on dependency injection ( generic host ) for its core services. This implies that before you can actually use the PnP Core SDK you need to configure the needed services. Once that's done you can obtain a PnPContext from the PnPContextFactory and start using the library. Where is the code? The PnP Core SDK is maintained in the PnP GitHub repository: https://github.com/pnp/pnpcore . You'll find: The code of the PnP Core SDK in the src\\sdk folder Examples of how to use the PnP Core SDK in the src\\samples folder The source of the documentation you are reading right now in the docs folder Referencing the PnP Core SDK in your project The recommended approach is to use the preview PnP.Core nuget package together with the preview PnP.Core.Auth nuget package . The former is the actual PnP Core SDK library, while the latter is an helper library that provides a useful set of Authentication Providers to authenticate against Azure Active Directory. Each night these preview packages are refreshed, so you can always upgrade to the latest dev bits by upgrading your nuget package to the latest version. If you don't want to rely on the PnP.Core.Auth package, you can eventually implement your own Authentication Provider . Note There are 2 package flavors: a -preview version and a -blazor-preview version. The latter one is meant to be used in Blazor Web Assembly projects and will exist until one of the SDK's references gets supported on Blazor. If you want to debug the SDK code you can include the PnP Core project ( src\\PnP.Core\\PnP.Core.csproj ) in your project as a dependency. Configuring the needed services In order to configure the needed services in a .Net Core console app, you can rely on the AddPnPCore extension method (defined in the PnP.Core nuget package) and on the AddPnPCoreAuthentication method (defined in the PnP.Core.Auth nuget package), like in the following code excerpt: var host = Host.CreateDefaultBuilder() // Set environment to use .UseEnvironment(\"demo\") // you can eventually read it from environment variables // Configure logging // Configure logging .ConfigureServices((hostingContext, services) => { // Add the PnP Core SDK library services services.AddPnPCore(); // Add the PnP Core SDK library services configuration from the appsettings.json file services.Configure<PnPCoreOptions>(Configuration.GetSection(\"PnPCore\")); // Add the PnP Core SDK Authentication Providers services.AddPnPCoreAuthentication(); // Add the PnP Core SDK Authentication Providers configuration from the appsettings.json file services.Configure<PnPCoreAuthenticationOptions>(Configuration.GetSection(\"PnPCore\")); }) // Let the builder know we're running in a console .UseConsoleLifetime() // Add services to the container .Build(); And you will also need to provide the configuration in the appsettings.json file, using a configuration section like the following one: { \"PnPCore\": { \"DisableTelemetry\": \"false\", \"HttpRequests\": { \"UserAgent\": \"ISV|Contoso|ProductX\", \"SharePointRest\": { \"UseRetryAfterHeader\": \"false\", \"MaxRetries\": \"10\", \"DelayInSeconds\": \"3\", \"UseIncrementalDelay\": \"true\" }, \"MicrosoftGraph\": { \"UseRetryAfterHeader\": \"true\", \"MaxRetries\": \"10\", \"DelayInSeconds\": \"3\", \"UseIncrementalDelay\": \"true\" } }, \"PnPContext\": { \"GraphFirst\": \"true\", \"GraphCanUseBeta\": \"true\", \"GraphAlwaysUseBeta\": \"false\" }, \"Credentials\": { \"DefaultConfiguration\": \"interactive\", \"Configurations\": { \"interactive\": { \"ClientId\": \"{your_client_id}\", \"TenantId\": \"{your_tenant_id}\", \"Interactive\": { \"RedirectUri\": \"http://localhost\" } } } }, \"Sites\": { \"SiteToWorkWith\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnp\", \"AuthenticationProviderName\": \"interactive\" }, } } } You should provide the ClientId and TenantId for an application registered in Azure Active Directory and configured with proper permissions, accordingly to your needs. For example, you could register an app in Azure Active Directory with delegated permission for: Microsoft Graph: Group.ReadWrite.All Microsoft Graph: User.ReadWrite.All SharePoint Online: AllSites.FullControl SharePoint Online: TermStore.ReadWrite.All SharePoint Online: User.ReadWrite.All As the Redirect URI, in Web platform enter http://localhost . If you don't want to register a custom app in your target Azure Active Directory, you can skip the ClientId and TenantId properties and the PnP Core SDK will rely on a multi-tenant application that will be registered on your tenant, upon admin consent. In the above example, the authentication will rely on the InteractiveAuthenticationProvider (defined in the PnP.Core.Auth nuget package) so that you will simply need to authenticate with a set of valid credentials for your target tenant. If you like to configure the .Net Core console app in code, without relying on the appsettings.json file, you can also use the following syntax: var host = Host.CreateDefaultBuilder() // Set environment to use .UseEnvironment(\"demo\") // you can eventually read it from environment variables // Configure logging // Configure logging .ConfigureServices((hostingContext, services) => { // Add the PnP Core SDK library services.AddPnPCore(options => { options.PnPContext.GraphFirst = true; options.HttpRequests.UserAgent = \"ISV|Contoso|ProductX\"; options.Sites.Add(\"SiteToWorkWith\", new PnPCoreSiteOptions { SiteUrl = \"https://contoso.sharepoint.com/sites/pnp\" }); }); services.AddPnPCoreAuthentication( options => { // Configure an Authentication Provider relying on the interactive authentication options.Credentials.Configurations.Add(\"interactive\", new PnPCoreAuthenticationCredentialConfigurationOptions { ClientId = \"{your_client_id}\", TenantId = \"{your_tenant_id}\", Interactive = new PnPCoreAuthenticationInteractiveOptions { RedirectUri = \"http://localhost\" } }); // Configure the default authentication provider options.Credentials.DefaultConfiguration = \"interactive\"; // Map the site defined in AddPnPCore with the // Authentication Provider configured in this action options.Sites.Add(\"SiteToWorkWith\", new PnPCoreAuthenticationSiteOptions { AuthenticationProviderName = \"interactive\" }); } ); }) // Let the builder know we're running in a console .UseConsoleLifetime() // Add services to the container .Build(); In advanced scenarios, you can consider using code-based configuration of registered services, like in the following code excerpt. Typically you would also include logging as well. var host = Host.CreateDefaultBuilder() // Set environment to use .UseEnvironment(\"demo\") // you can eventually read it from environment variables // Configure logging .ConfigureServices((hostingContext, services) => { // Read the custom configuration from the appsettings.<environment>.json file var customSettings = new CustomSettings(); hostingContext.Configuration.Bind(\"CustomSettings\", customSettings); // Create an instance of the Interactive Authentication Provider var authenticationProvider = new InteractiveAuthenticationProvider( customSettings.ClientId, customSettings.TenantId, customSettings.RedirectUri); // Add the PnP Core SDK services services .AddPnPCore(options => { // You can explicitly configure all the settings, or you can // simply use the default values options.PnPContext.GraphFirst = true; options.PnPContext.GraphCanUseBeta = true; options.PnPContext.GraphAlwaysUseBeta = false; options.HttpRequests.UserAgent = \"NONISV|SharePointPnP|PnPCoreSDK\"; options.HttpRequests.MicrosoftGraph = new PnPCoreHttpRequestsGraphOptions { UseRetryAfterHeader = true, MaxRetries = 10, DelayInSeconds = 3, UseIncrementalDelay = true, }; options.HttpRequests.SharePointRest = new PnPCoreHttpRequestsSharePointRestOptions { UseRetryAfterHeader = true, MaxRetries = 10, DelayInSeconds = 3, UseIncrementalDelay = true, }; options.DefaultAuthenticationProvider = authenticationProvider; options.Sites.Add(\"DemoSite\", new PnP.Core.Services.Builder.Configuration.PnPCoreSiteOptions { SiteUrl = customSettings.DemoSiteUrl, AuthenticationProvider = authenticationProvider }); }); }) // Let the builder know we're running in a console .UseConsoleLifetime() // Add services to the container .Build(); In above sample the following configuration file is used: appsettings.demo.json { \"CustomSettings\": { \"ClientId\": \"{client_id}\", \"TenantId\": \"{tenant_id}\", \"DemoSiteUrl\": \"https://contoso.sharepoint.com/sites/pnp\", \"RedirectUri\": \"http://localhost\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\" } } } Note To learn more about how to setup authentication check the Configuring authentication article. Obtaining a PnPContext The PnPContext is the entry point for using the PnP Core SDK, you can create a PnPContext from either a SharePoint site url or the id of a Microsoft 365 group. // Start console host await host.StartAsync(); using (var scope = host.Services.CreateScope()) { // Obtain a PnP Context factory var pnpContextFactory = scope.ServiceProvider.GetRequiredService<IPnPContextFactory>(); // Use the PnP Context factory to get a PnPContext for the given configuration using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // See next chapter on how to use the PnPContext } using (var context = await pnpContextFactory.CreateAsync(\"Microsoft 365 Group guid\")) { // See next chapter on how to use the PnPContext } } // Cleanup console host host.Dispose(); Next to creating a new PnPContext you can also clone an existing one, cloning is very convenient if you for example created a context for the root web of your site collection but now want to work with a sub site. Below snippet shows how to use cloning: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { var web = await context.Web.GetAsync(); Console.WriteLine($\"Title: {web.Title}\"); using (var subSiteContext = context.Clone(new Uri(\"https://contoso.sharepoint.com/sites/siteA/subsite\"))) { var subWeb = await subSiteContext.Web.GetAsync(); Console.WriteLine($\"Sub site title: {subWeb.Title}\"); } } Using the PnPContext for operations on Microsoft 365 All operations on Microsoft 365 start from the PnPContext instance you've obtained from the PnPContextFactory . Below sample shows a simple get operation that requests data from Microsoft 365 and outputs it to the console: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { var web = await context.Web.GetAsync(); Console.WriteLine($\"Title: {web.Title}\"); } Here follows another example that shows how to define which properties need to be loaded while executing the request: var team = await context.Team.GetAsync(p => p.Description, p => p.FunSettings, p => p.DiscoverySettings, p => p.Members); When you see an asynchronous call being used, it means that the call is executed immediately. However, you can easily group multiple requests in a batch and send them in one call to the server via the built in batching support: var web = await context.Web.GetAsync(); var myList = await web.Lists.GetByTitleAsync(\"TestList\"); if (myList != null) { // Create three list items and add them via single server request Dictionary<string, object> values = new Dictionary<string, object> { { \"Title\", \"PnP Rocks!\" } }; await myList.Items.AddBatchAsync(values); await myList.Items.AddBatchAsync(values); await myList.Items.AddBatchAsync(values); // Send batch to the server await context.ExecuteAsync(); } To update Microsoft 365 you simply update the needed properties in your model and then call UpdateAsync or UpdateBatchAsync (used for batching): var web = await context.Web.GetAsync(p => p.Lists); var myList = await web.Lists.GetByTitleAsync(\"Documents\"); if (myList != null) { myList.Description = $\"Updated on UTC {DateTime.UtcNow}\"; await myList.UpdateAsync(); } Deleting follows a similar pattern, but now you use DeleteAsync or Delete : var web = await context.Web.GetAsync(p => p.Lists); var myList = await web.Lists.GetByTitleAsync(\"ListToDelete\"); if (myList != null) { await myList.DeleteAsync(); } If you like, you can also leverage a fluent syntax enriched with LINQ (Language Integrated Query). For example, in the following code excerpt you can see how to write a query for the items of a list. var document = (await context.Web.Lists.GetByTitleAsync(\"Documents\")).Items .Where(i => i.Title == \"Sample Document\") .Load(i => i.Id, i => i.Title) .FirstOrDefault(); if (document != null) { Console.WriteLine($\"Document Title: {document.Title}\"); } Another approach to mainly limit the data that's being pulled from Microsoft 365 is using the LoadProperties() method on the properties specified in the lambda expression(s), below example shows using LoadProperties() in a recursive manner: next to the Title property of the Web this request also loads the Lists for the Web and for each List it loads the Id, Title, DocumentTemplate and ContentTypes property. Given List ContentTypes is a collection, the Name and FieldLinks properties of each content type are loaded and, in turn, for ContentType FieldLinks, the Name property is loaded. await context.Web.GetAsync(p => p.Title, p => p.ContentTypes.LoadProperties(p => p.Name), p => p.Lists.LoadProperties(p => p.Id, p => p.Title, p => p.DocumentTemplate, p => p.ContentTypes.LoadProperties(p => p.Name, p => p.FieldLinks.LoadProperties(p => p.Name))) );"
  },
  "articles/consumer/using paging.html": {
    "href": "articles/consumer/using paging.html",
    "title": "Using paging | PnP Core SDK",
    "keywords": "Using paging Being able to retrieve data in a paged manner is important when you want to use the first data rows while you're loading still additional data, but also when you're loading large data sets. When you page data you can start from either a GetPagedAsync() method call or from a linq query that uses the Take() method. Once you've done one of these calls to Microsoft 365 can use the paging methods to get additional pages. Supported paging attributes and methods Method/Attribute Description GetPagedAsync(pageSize, expression) Loads the first page of a given size. Optionally an expression can be specified to only return the properties you need CanPage This attribute indicates whether you can use the paging API's to request a next page or to request all remaining pages GetNextPageAsync() Get's the next page, this method assumes you've already loaded a first page using either the GetPagedAsync() method or via a linq query that included the Take() method GetAllPagesAsync() Loads all the pages in a collection until there's no new data returned anymore. This method assumes you've already loaded a first page using either the GetPagedAsync() method or via a linq query that included the Take() method Examples Starting via the GetPagedAsync() method This example shows how to use paging to load lists, in the sample only the Title property of the list is requested, if you do not provide the expression then list default properties are loaded. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Get a first page of lists of size 2 await context.Web.Lists.GetPagedAsync(2, p => p.Title); // Do we have a pointer to a next page? if (context.Web.Lists.CanPage) { // Load the next page await context.Web.Lists.GetNextPageAsync(); // Load all pages await context.Web.Lists.GetAllPagesAsync(); } } Starting via a linq query with Take() In this example a linq query is executed first using the Take() method. Once the linq query was execution was triggered (in this case by calling ToListAsync() ), you can using the paging methods to get additional pages of data. using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Issue a linq query var lists = context.Web.Lists.Take(2); var queryResult = await lists.ToListAsync(); // Do we have a pointer to a next page? if (context.Web.Lists.CanPage) { // Load the next page await context.Web.Lists.GetNextPageAsync(); // Load all pages await context.Web.Lists.GetAllPagesAsync(); } }"
  },
  "articles/contributor/configuring-for-auth-tests.html": {
    "href": "articles/contributor/configuring-for-auth-tests.html",
    "title": "Configuring the environment to run PnP.Core.Auth tests | PnP Core SDK",
    "keywords": "Configuring the environment to run PnP.Core.Auth tests The PnP.Core.Auth library has some requirements in order to properly execute its automated tests (PnP.Core.Auth.Test). Specifically, you need to: Register in Azure Active Directory a generic test application for authentication tests Register in Azure Active Directory a frontend application for the OnBehalfOf authentication tests Register in Azure Active Directory a backend application for the OnBehalfOf authentication tests Enable the frontend application to consume the backend application Configure a set of credentials in the Windows Credential Manager Configure the appsettings.json file of the PnP.Core.Auth.Test project Register in AAD a generic test application for authentication tests In order to execute both tests with application and delegated access tokens, you will need to register an application in AAD both as app-only and delegated. The easiest way to register an application in Azure Active Directory for app-only is to use the PnP PowerShell command lets. Specifically you can use the Initialize-PnPPowerShellAuthentication command with the following syntax: $app = Initialize-PnPPowerShellAuthentication -ApplicationName \"PnP.Core.Test\" -Tenant contoso.onmicrosoft.com -OutPath c:\\temp -CertificatePassword (ConvertTo-SecureString -String \"password\" -AsPlainText -Force) -Scopes \"MSGraph.Group.ReadWrite.All\",\"MSGraph.Directory.ReadWrite.All\",\"SPO.Sites.FullControl.All\",\"SPO.TermStore.ReadWrite.All\",\"SPO.User.ReadWrite.All\" -Store CurrentUser The above command will register for you in Azure Active Directory an app with name PnP.Core.Test , with a self-signed certificate that will be also saved on your filesystem under the c:\\temp folder (remember to create the folder or to provide the path of an already existing folder), with a certificate password value of password (you should provide your own strong password, indeed). Remember to replace contoso.onmicrosoft.com with your Azure AD tenant name, which typically is company.onmicrosoft.com . The permissions granted to the app will be: SharePoint -> Application Permissions -> Sites -> Sites.FullControl.All SharePoint -> Application Permissions -> TermStore -> TermStore.ReadWrite.All SharePoint -> Application Permissions -> User -> User.ReadWrite.All Microsoft Graph -> Application Permissions -> Group -> Group.ReadWrite.All Microsoft Graph -> Application Permissions -> Directory -> Directory.ReadWrite.All Executing the command you will first have to authenticate against the target tenant, providing the credentials of a Global Tenant Admin. Then you will see a message like the following one: Waiting 60 seconds to launch consent flow in a browser window. This wait is required to make sure that Azure AD is able to initialize all required artifacts......... Almost 60 seconds later, the command will prompt you for authentication again and to grant the selected permissions to the app you are registering. Once you have done that, in the $app variable you will find information about the just registered app. You can copy in your clipboard the Application ID (Client ID) executing the following command: $app.AzureAppId | clip And you can copy in your clipboard the thumbprint of the generated X.509 certificate executing the following command: $app.'Certificate Thumbprint' | clip Paste this copied values in a safe place, because you will need them soon. Now, configure the same application also for delegated access tokens following the below steps: Navigate to https://aad.portal.azure.com/ Click on Azure Active Directory from the left navigation Click on App registrations in the Manage left navigation group Write the Client ID of the just created application in the search box Select the application with name PnP.Core.Test in the list of results Click on the API Permissions in the Manage left navigation group Click on Add Permissions and add the following permissions to this application: SharePoint -> Delegated Permissions -> AllSites -> AllSites.FullControl SharePoint -> Delegated Permissions -> TermStore -> TermStore.ReadWrite.All SharePoint -> Delegated Permissions -> User -> User.ReadWrite.All Microsoft Graph -> Delegated Permissions -> Group -> Group.ReadWrite.All Microsoft Graph -> Delegated Permissions -> User -> User.Read Microsoft Graph -> Delegated Permissions -> Directory -> Directory.ReadWrite.All At the end, the overall list of permissions for the application will be the following one: SharePoint -> Delegated Permissions -> AllSites -> AllSites.FullControl SharePoint -> Delegated Permissions -> TermStore -> TermStore.ReadWrite.All SharePoint -> Delegated Permissions -> User -> User.ReadWrite.All SharePoint -> Application Permissions -> Sites -> Sites.FullControl.All SharePoint -> Application Permissions -> TermStore -> TermStore.ReadWrite.All SharePoint -> Application Permissions -> User -> User.ReadWrite.All Microsoft Graph -> Delegated Permissions -> Group -> Group.ReadWrite.All Microsoft Graph -> Delegated Permissions -> User -> User.Read Microsoft Graph -> Delegated Permissions -> Directory -> Directory.ReadWrite.All Microsoft Graph -> Application Permissions -> Group -> Group.ReadWrite.All Microsoft Graph -> Application Permissions -> Directory -> Directory.ReadWrite.All Click on the Grant admin consent for button to consent to these permissions for the users in your organization Click on Authentication in the Manage left navigation group Change Default client type to Treat application as public client and hit Save Click on Authentication and then click on Add a platform , choose Mobile and desktop applications and provide http://localhost as the Redirect URI Register in AAD a frontend application for the OnBehalfOf authentication tests You need to register an application that will be the frontend for the OnBehalfOf flow. Follow the below steps: Navigate to https://aad.portal.azure.com/ Click on Azure Active Directory from the left navigation Click on App registrations in the Manage left navigation group Click on New registration Give the application a name (e.g. PnP.Core.Test.OnBehalfOf.Frontend ) and click on Register Copy the Application ID (Client ID) from the Overview page, you'll need this GUID value later on Copy the Directory ID (Tenant ID) from the Overview page, you'll need this GUID value later on Click on Authentication and then click on Add a platform , choose Mobile and desktop applications and provide http://localhost as the Redirect URI Register in AAD a backend application for the OnBehalfOf authentication tests You need to register an application that will be the backend for the OnBehalfOf flow. Follow the below steps: Navigate to https://aad.portal.azure.com/ Click on Azure Active Directory from the left navigation Click on App registrations in the Manage left navigation group Click on New registration Give the application a name (e.g. PnP.Core.Test.OnBehalfOf.Backend ) and click on Register Copy the Application ID (Client ID) from the Overview page, you'll need this GUID value later on Copy the Directory ID (Tenant ID) from the Overview page, you'll need this GUID value later on Click on API Permissions in the Manage left navigation group Click on Add Permissions and add the permissions you want to give to this application. Below list is a recommendation, you can grant less permissions but that might result in some PnP Core SDK calls to fail due getting access denied errors. SharePoint -> Delegated Permissions -> AllSites -> AllSites.Read Microsoft Graph -> Delegated Permissions -> Sites -> Sites.Read.All Microsoft Graph -> Delegated Permissions -> User -> User.Read Click on the Grant admin consent for button to consent to these permissions for the users in your organization Click on the Expose an API in the Manage left navigation group Configure the Application ID URI with a value like api://pnp.core.test.onbehalfof.backend Click on Add a scope and configure a new scope with name Backend.Consume with Admins Only consent. Provide a display name and a description for admins and click Add scope . Click on the Manifest in the Manage left navigation group In the JSON file representing the manifest of the application search for the knownClientApplications value. It is an array of IDs and assign to it an array made of a single item, which is the Client ID of the application with name PnP.Core.Test.OnBehalfOf.Frontend . Save the updated manifest Click on Certificates & secrets in the Manage left navigation group Click on New client secret to create a new client secret for the backend application. Choose a name (for example ClientSecret ) and a lifetime (for example 2 years). Click on Add and store the Client Secret value in a safe place Click on Upload certificate , browse your file system for the .CER file that you created when you registered the application with PowerShell (the path should c:\\temp , unless you changed it, and the file should be PnP.Core.Test.CER ) Enable the frontend application to consume the backend application Now, you need to go back to the application registered with name PnP.Core.Test.OnBehalfOf.Frontend and update its setting accordingly to the following steps: Navigate to https://aad.portal.azure.com/ Click on Azure Active Directory from the left navigation Click on App registrations in the Manage left navigation group Write PnP.Core.Test.OnBehalfOf.Frontend in the search box Select the application with name PnP.Core.Test.OnBehalfOf.Frontend in the list of results Click on the API Permissions in the Manage left navigation group Click on Add Permissions , select My APIs and choose PnP.Core.Test.OnBehalfOf.Backend Select the permission with name Backend.Consume Click on the Grant admin consent for button to consent to these permissions for the users in your organization Now the frontend application is enabled to consume the backend application. Configure a set of credentials in the Windows Credential Manager In order to test the CredentialManagerAuthenticationProvider you need to register a set of credentials in the Windows Credential Manager, by following the below steps. Click on the Windows Start button in the taskbar and type credential manager . Click on the Credential Manager link. Go to Windows Credentials and click on Add a generic credential . Give the credential a name (e.g. Contoso), a user name (e.g. joe@contoso.onmicrosoft.com) and a password. Hit OK to save. Copy in a safe place the name you provided to the Credential Manager item, because you will reuse it shortly. Configure the appsettings.json file of the PnP.Core.Auth.Test project Copy the file appsettings.copyme.json defined in the root folder of the PnP.Core.Auth.Test project and paste it to create a new copy. Rename the copied file with a name like appsettings.yourname.json , where yourname should be replaced with something the identifies you (like your name or your company name). Now copy the file env.sample defined in the root folder of the PnP.Core.Auth.Test project and paste it to create a new copy. Rename the copied file with name env.txt . Open the file env.txt and write in its content the value that you choose for the yourname token in the name of the appsettings.json file. For example, if you renamed the settings file as appsettings.contoso.json you will have to write contoso as the unique content of the env.txt file. Open the appsettings.yourname.json file, it will look like the following one. { \"PnPCore\": { \"DisableTelemetry\": \"true\", \"PnPContext\": { \"GraphFirst\": \"true\", \"GraphCanUseBeta\": \"true\", \"GraphAlwaysUseBeta\": \"false\" }, \"Credentials\": { \"DefaultConfiguration\": \"credentialManager\", \"Configurations\": { \"usernamePassword\": { \"ClientId\": \"{PnP.Core.Test-ClientId}\", \"TenantId\": \"{TenantId}\", \"UsernamePassword\": { \"Username\": \"{Test-Username}\", \"Password\": \"{Test-Password}\" } }, \"credentialManager\": { \"ClientId\": \"{PnP.Core.Test-ClientId}\", \"TenantId\": \"{TenantId}\", \"CredentialManager\": { \"CredentialManagerName\": \"{Credential-Manager}\" } }, \"onBehalfOf\": { \"ClientId\": \"{PnP.Core.Test.OnBehalfOf.Backend-ClientID}\", \"TenantId\": \"{TenantId}\", \"OnBehalfOf\": { \"StoreName\": \"My\", \"StoreLocation\": \"CurrentUser\", \"Thumbprint\": \"{Backend-Certificate-Thumbprint}\", \"ClientSecret\": \"{Backend-Client-Secret}\" } }, \"interactive\": { \"ClientId\": \"{PnP.Core.Test-ClientId}\", \"TenantId\": \"{TenantId}\", \"Interactive\": { \"RedirectUri\": \"http://localhost\" } }, \"x509Certificate\": { \"ClientId\": \"{PnP.Core.Test-ClientId}\", \"TenantId\": \"{TenantId}\", \"X509Certificate\": { \"StoreName\": \"My\", \"StoreLocation\": \"CurrentUser\", \"ThumbPrint\": \"{Certificate-Thumbprint}\" } }, \"onBehalfFrontEnd\": { \"ClientId\": \"{PnP.Core.Test.OnBehalfOf.Frontend-ClientID}\", \"TenantId\": \"{TenantId}\", \"Interactive\": { \"RedirectUri\": \"http://localhost\" } }, \"deviceCode\": { \"ClientId\": \"{PnP.Core.Test-ClientId}\", \"TenantId\": \"{TenantId}\", \"DeviceCode\": { \"RedirectUri\": \"http://localhost\" } }, \"externalRealProvider\": { \"ClientId\": \"{PnP.Core.Test-ClientId}\", \"TenantId\": \"{TenantId}\", \"CredentialManager\": { \"CredentialManagerName\": \"{Credential-Manager}\" } } } }, \"Sites\": { \"TestSiteCredentialManager\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\", \"AuthenticationProviderName\": \"credentialManager\" }, \"TestSiteUsernamePassword\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\", \"AuthenticationProviderName\": \"usernamePassword\" }, \"TestSiteInteractive\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\", \"AuthenticationProviderName\": \"interactive\" }, \"TestSiteOnBehalfOf\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\", \"AuthenticationProviderName\": \"onBehalfOf\" }, \"TestSiteX509Certificate\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\", \"AuthenticationProviderName\": \"x509Certificate\" }, \"TestSiteDeviceCode\": { \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\", \"AuthenticationProviderName\": \"deviceCode\" } } }, \"Logging\": { \"LogLevel\": { \"Default\": \"Debug\" } } } In the file replace: {PnP.Core.Test-ClientId} with the ClientId of the PnP.Core.Test application that you registered before {TenantId} with the TenantId of your target tenant {Test-Username} with the username (UPN) of a user that you want to use for tests and that must have access to the target test SharePoint sites and Teams. It might be a user account dedicated to tests. {Test-Password} with the password of the username declared in the previous step {Credential-Manager} with the name of the Credential Manager item that you created before {Certificate-Thumbprint} with the thumbprint of the certificate created before Lastly, replace all the occurrences of the URL of the site https://contoso.sharepoint.com/sites/pnpcoresdktestgroup with the URL of a site that you want to use for testing purposes."
  },
  "articles/contributor/event handlers.html": {
    "href": "articles/contributor/event handlers.html",
    "title": "Event handlers | PnP Core SDK",
    "keywords": "Event handlers When you add/extend the model, you will have an option to use event handlers. This article lists and explains the available event handlers, providing short samples. Event handler overview Event handler Delegate Description AddApiCallHandler Task<ApiCall> AddApiCall(); When you want to implement Add on a model class you need to use this event handler GetApiCallOverrideHandler Task<ApiCallRequest> GetApiCallOverride(ApiCallRequest input); You can use this handler to override or cancel the get API call that was created based upon the model decoration UpdateApiCallOverrideHandler Task<ApiCallRequest> UpdateApiCallOverride(ApiCallRequest input); You can use this handler to override or cancel the update API call that was created based upon the model decoration DeleteApiCallOverrideHandler Task<ApiCallRequest> DeleteApiCallOverride(ApiCallRequest input); You can use this handler to override or cancel the delete API call that was created based upon the model decoration MappingHandler TResult Func<in T, out TResult>(T arg); Use this handler to customize how the JSON received from the server is mapped to the model. Typically used to handle enumerations and special fields PostMappingHandler void Action<in T>(T obj); This handler is fired after the complete JSON to model mapping was done and allows you to perform extra logic using the JSON snippet received from the server ValidateUpdateHandler void ValidateUpdate(ref FieldUpdateRequest fieldUpdateRequest); If you want to perform checks before you allow a property in the model to be updated, then use this event handler Event handlers in the model lifecycle Event handlers fire in a certain order when triggered by an action on the model. In below example a Team is loaded requiring a get request, as such the GetApiCallOverrideHandler fires. Unless the get request is cancelled in the event handler, the server is queried and JSON results are returned. During mapping of the JSON results to the model the MappingHandler is fired for each property for which there's no default mapping. Finally the full JSON to model mapping is done and the PostMappingHandler fires allowing you to perform extra processing if needed. AddApiCallHandler This handler is required when you want to implement Add functionality on a model class. In the handler you use the properties of the model class instance to be added ( DisplayName and Description ) to construct the JSON payload, which you then wrap into the respective Microsoft Graph or SharePoint REST API call. internal partial class TeamChannel { private const string baseUri = \"teams/{Parent.GraphId}/channels\"; internal TeamChannel() { // Handler to construct the Add request for this channel AddApiCallHandler = async () => { // Define the JSON body of the update request based on the actual changes dynamic body = new ExpandoObject(); body.displayName = DisplayName; if (!string.IsNullOrEmpty(Description)) { body.description = Description; } // Serialize object to json var bodyContent = JsonSerializer.Serialize(body, typeof(ExpandoObject), new JsonSerializerOptions { WriteIndented = false }); return new ApiCall(ParseApiRequest(baseUri), ApiType.Graph, bodyContent); }; } } GetApiCallOverrideHandler This event handler is meant to be a last resort, it can override/cancel the generated get query. Typically one should not have to do this, but the option is available for special cases like shown in below example where the system prevents getting the Team if the connected SharePoint site collection is not group connected (as it never can have a Team in that case). internal partial class Team { internal Team() { GetApiCallOverrideHandler = async (ApiCallRequest api) => { if (!PnPContext.Site.IsPropertyAvailable(p => p.GroupId) || PnPContext.Site.GroupId == Guid.Empty) { api.CancelRequest(\"There is no Microsoft 365 group attached to the current site\"); } return api; }; } } UpdateApiCallOverrideHandler and DeleteApiCallOverrideHandler Manipulating updates and deletes is a more common scenario, especially preventing updates/deletes from happening. In below example, you see how sending an update or delete request to the server for the General channel of a Team is prevented. internal partial class TeamChannel { internal TeamChannel() { UpdateApiCallOverrideHandler = async (ApiCallRequest apiCallRequest) => { if (DisplayName == \"General\") { apiCallRequest.CancelRequest(\"Updating the general channel is not allowed.\"); } return apiCallRequest; }; DeleteApiCallOverrideHandler = async (ApiCallRequest apiCallRequest) => { if (DisplayName == \"General\") { apiCallRequest.CancelRequest(\"Deleting the general channel is not allowed.\"); } return apiCallRequest; }; } } MappingHandler The MappingHandler is the most commonly used event handler. You'll see a lot of the model and complex type classes implement this handler. The core purpose of this handler is to handle the JSON to model mapping in cases where this is not done automatically. Also note that when you set the UseCustomMapping property of the GraphFieldMapping or SharePointFieldMapping attributes to true, this handler will also be called for those properties. By default the handler will only be called when there's no automatic JSON to model mapping available, for example in the case of enumerations. internal partial class TeamChannel { internal TeamChannel() { MappingHandler = (FromJson input) => { switch (input.TargetType.Name) { case \"TeamChannelMembershipType\": return ToEnum<TeamChannelMembershipType>(input.JsonElement); } input.Log.LogDebug($\"Field {input.FieldName} could not be mapped when converting from JSON\"); return null; }; } } PostMappingHandler This handler fires after the received JSON has been fully processed. You get the processed JSON as a string for additional needs. internal Web() { PostMappingHandler = (string json) => { // implement post mapping handler, in case you want to do extra data loading/mapping work }; } ValidateUpdateHandler Validating properties being updated is a common use case. Sometimes you want to prevent certain model properties from being updated, or you want to \"rewrite\" the updated value. In below example updating model properties for the General Team channel is prevented. internal partial class TeamChannel { internal TeamChannel() { // Validation handler to prevent updating the general channel ValidateUpdateHandler = (ref PropertyUpdateRequest propertyUpdateRequest) => { // Prevent setting all values on the general channel if (DisplayName == \"General\") { propertyUpdateRequest.CancelUpdate(\"Updating the general channel is not allowed.\"); } }; } }"
  },
  "articles/contributor/extending the model - Microsoft Graph.html": {
    "href": "articles/contributor/extending the model - Microsoft Graph.html",
    "title": "Extending the model for Microsoft Graph | PnP Core SDK",
    "keywords": "Extending the model for Microsoft Graph The PnP Core SDK model contains model, collection, and complex type classes which are populated via either Microsoft Graph or SharePoint REST. In this chapter you'll learn more on how to decorate your classes and their properties to interact with Microsoft 365 via the Microsoft Graph API. Configuring model classes Public model (interface) decoration For model classes that are linq queriable one needs to link the concrete (so the implementation) to the public interface via the ConcreteType class attribute: [ConcreteType(typeof(TeamChannel))] public interface ITeamChannel : IDataModel<ITeamChannel>, IDataModelUpdate, IDataModelDelete { // Ommitted for brevity } Class decoration Each model class needs to have at least one GraphType attribute which is defined on the coded model class (e.g. Team.cs): [GraphType(Uri = \"teams/{Site.GroupId}\")] internal partial class Team { // Ommitted for brevity } When configuring the GraphType attribute for Microsoft Graph you need to set the attribute properties: Property Required Description Uri Yes Defines the URI that uniquely identifies this object. See model tokens to learn more about the possible tokens you can use. Target No A model can be used from multiple scope and if so the Target property defines the scope of the GraphType attribute. Id No Defines the Microsoft graph object field which serves as unique id for the object. Typically this field is called id and that's also the default value, but you can provide another value if needed. Get No Overrides the Uri property for get operations. LinqGet No Some model classes do support linq queries which are translated in corresponding server calls. If a class supports linq in this way, then it also needs to have the LinqGet attribute set. Update No Overrides the Uri property for update operations. Delete No Overrides the Uri property for delete operations. OverflowProperty No Used when working with a dynamic property/value pair (e.g. fields in a SharePoint ListItem) whenever the Microsoft Graph field containing these dynamic properties is not named Values . Beta No Defines that a model can only be handled using the Microsoft Graph beta endpoint. If a user opted out of using the Microsoft Graph beta endpoint then this model will not be populated. Property decoration The property level decoration is done using the GraphProperty and KeyProperty attributes. Each model instance requires to have an override of the Key property and that Key property must be decorated with the KeyProperty attribute which specifies which of the actual fields in the model must be selected as key. The key is for example used to ensure there are no duplicate model class instances in a single collection. Whereas the KeyProperty attribute is always there once in each model class, the usage of the GraphProperty attribute is only required for special cases. Since the properties are defined in the generated model class (e.g. Web.gen.cs and Teams.gen.cs) the decoration via attributes needs to happen in this class as well. // In graph the fieldname is \"name\", whereas in the model the name is \"Title\" [GraphProperty(\"name\")] public string Title { get => GetValue<string>(); set => SetValue(value); } // Mark the property that serves as Key field // (used to ensure there are no duplicates in collections), // use a JsonPath to get the specific value you need [GraphProperty(\"sharepointIds\", JsonPath = \"webId\")] public Guid Id { get => GetValue<Guid>(); set => SetValue(value); } // Define a collection as expandable [GraphProperty(\"lists\", Expandable = true)] public IListCollection Lists { get { if (!HasValue(nameof(Lists))) { var lists = new ListCollection { PnPContext = this.PnPContext, Parent = this, }; SetValue(lists); } return GetValue<IListCollection>(); } } // Configure an additional query to load this model class, this is a non expandable collection [GraphProperty(\"channels\", ExpandByDefault = true, Get = \"teams/{Site.GroupId}/channels\")] public ITeamChannelCollection Channels { get { if (!HasValue(nameof(Channels))) { var channels = new TeamChannelCollection { PnPContext = this.PnPContext, Parent = this, }; SetValue(channels); } return GetValue<ITeamChannelCollection>(); } } // Set the keyfield for this model class [KeyProperty(\"Id\")] public override object Key { get => this.Id; set => this.Id = Guid.Parse(value.ToString()); } You can set following properties on this attribute: Property Required Description FieldName Yes Use this property when the Microsoft Graph fieldname differs from the model property name. Since the field name is required by the default constructor you always need to provide this value when you add this property. JsonPath No When the information returned from Microsoft Graph is a complex type and you only need a single value from it, then you can specify the JsonPath for that value. E.g. when you get sharePointIds.webId as response you tell the model that the fieldname is sharePointIds and the path to get there is webId. The path can be more complex, using a point to define property you need (e.g. property.child.childofchild). Using JsonPath can be a good alternative over using a Complex Type classes if your scenario only requires to reading some properties. Expandable No Defines that a collection is expandable, meaning it can be loaded via the $expand query parameter and used in the lambda expression in Get and GetAsync operations. ExpandByDefault No When the model contains a collection of other model objects then setting this attribute to true will automatically result in the population of that collection. This can negatively impact performance, so only set this when the collection is almost always needed. Get No Sometimes it is not possible to load the complete model via a single Microsoft Graph request, often this is the case with collections (so the collection is not expandable). In this case you need to explain how to load the collection via specifying the needed query. See model tokens to learn more about the possible tokens you can use. UseCustomMapping No Allows you to force a callout to the model's MappingHandler event handler whenever this property is populated. See the Event Handlers article to learn more. Beta No Defines that a model property can only be handled using the Microsoft Graph beta endpoint. If a user opted out of using the Microsoft Graph beta endpoint, then this model property will not be populated. Configuring complex type classes Class decoration Each complex type class does require a GraphType attribute which is defined on the generated complex type class (e.g. TeamFunSettings.gen.cs): [GraphType] internal partial class TeamFunSettings : BaseComplexType<ITeamFunSettings>, ITeamFunSettings { // Ommitted for brevity } Since the complex type class is not queried independently, there is no need to further define properties on the GraphType attribute. Property decoration The property level decoration is done using the GraphProperty attribute. For most properties you do not need to set this attribute, it's only required for special cases. Since the properties are defined in the generated model class (e.g. TeamFunSettings.gen.cs) the decoration via attributes needs to happen in this class as well. Since complex types are not directly queried and are not used in collections only a few of the GraphProperty properties make sense to be used. Property Required Description FieldName Yes Use this property when the Microsoft Graph fieldname differs from the model property name. Since the field name is required by the default constructor you always need to provide this value when you add this property. JsonPath No When the information returned from Microsoft Graph is a complex type and you only need a single value from it, then you can specify the JsonPath for that value. E.g. when you get sharePointIds.webId as response you tell the model that the fieldname is sharePointIds and the path to get there is webId. The path can be more complex, using a point to define property you need (e.g. property.child.childofchild). UseCustomMapping No Allows you to force a callout to the model's MappingHandler event handler whenever this property is populated. See the Event Handlers article to learn more. Beta No Defines that a model property can only be handled using the Microsoft Graph beta endpoint. If a user opted out of using the Microsoft Graph beta endpoint, then this model property will not be populated. Configuring collection classes Collection classes do not have attribute based decoration. Implementing \"Add\" functionality In contradiction with get, update, and delete which are fully handled by decorating classes and properties using attributes, you'll need to write actual code to implement add. Adding is implemented as follows: The public part (interface) is defined on the collection interface. Each functionality (like Add) is implemented via three methods: An async method An async batch method An async batch method that allows to pass in a Batch as first method parameter A sync method that calls the async method with a GetAwaiter().GetResult() A sync batch method that calls the async method with a GetAwaiter().GetResult() A sync batch method that calls the async method with a GetAwaiter().GetResult() and allows to pass in a Batch as first method parameter Add methods defined on the interface are implemented in the collection classes as proxies that call into the respective add methods of the added model class The implementation that performs the actual add is implemented as an AddApiCallHandler event handler in the model class. See the Event Handlers page for more details. Below code snippets show the above three concepts. First one shows the collection interface (e.g. ITeamChannelCollection.cs) with the Add methods: /// <summary> /// Public interface to define a collection of Team Channels /// </summary> public interface ITeamChannelCollection : IDataModelCollection<ITeamChannel> { /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public Task<ITeamChannel> AddAsync(string name, string description = null); /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel Add(string name, string description = null); /// <summary> /// Adds a new channel /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public Task<ITeamChannel> AddBatchAsync(Batch batch, string name, string description = null); /// <summary> /// Adds a new channel /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel AddBatch(Batch batch, string name, string description = null); /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public Task<ITeamChannel> AddBatchAsync(string name, string description = null); /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel AddBatch(string name, string description = null); } Implementation of the interface in the coded collection class (e.g. TeamChannelCollection.cs): internal partial class TeamChannelCollection { /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public async Task<ITeamChannel> AddAsync(string name, string description = null) { if (string.IsNullOrEmpty(name)) { throw new ArgumentNullException(nameof(name)); } // TODO: validate name restrictions var newChannel = CreateNewAndAdd() as TeamChannel; // Assign field values newChannel.DisplayName = name; newChannel.Description = description; return await newChannel.AddAsync().ConfigureAwait(false) as TeamChannel; } /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel Add(string name, string description = null) { return AddAsync(name, description).GetAwaiter().GetResult(); } /// <summary> /// Adds a new channel /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public async Task<ITeamChannel> AddBatchAsync(Batch batch, string name, string description = null) { if (string.IsNullOrEmpty(name)) { throw new ArgumentNullException(nameof(name)); } var newChannel = CreateNewAndAdd() as TeamChannel; // Assign field values newChannel.DisplayName = name; newChannel.Description = description; return await newChannel.AddBatchAsync(batch).ConfigureAwait(false) as TeamChannel; } /// <summary> /// Adds a new channel /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel AddBatch(Batch batch, string name, string description = null) { return AddBatchAsync(batch, name, description).GetAwaiter().GetResult(); } /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public async Task<ITeamChannel> AddBatchAsync(string name, string description = null) { return await AddBatchAsync(PnPContext.CurrentBatch, name, description).ConfigureAwait(false); } /// <summary> /// Adds a new channel /// </summary> /// <param name=\"name\">Display name of the channel</param> /// <param name=\"description\">Optional description of the channel</param> /// <returns>Newly added channel</returns> public ITeamChannel AddBatch(string name, string description = null) { return AddBatchAsync(name, description).GetAwaiter().GetResult(); } } And finally you'll see the actual add logic being implemented in the coded model class (e.g. TeamChannel.cs) via implementing the AddApiCallHandler : internal partial class TeamChannel { private const string baseUri = \"teams/{Parent.GraphId}/channels\"; internal TeamChannel() { // Handler to construct the Add request for this channel AddApiCallHandler = async () => { // Define the JSON body of the update request based on the actual changes dynamic body = new ExpandoObject(); body.displayName = DisplayName; if (!string.IsNullOrEmpty(Description)) { body.description = Description; } // Serialize object to json var bodyContent = JsonSerializer.Serialize(body, typeof(ExpandoObject), new JsonSerializerOptions { WriteIndented = false }); var apiCall = await ApiHelper.ParseApiRequestAsync(this, baseUri).ConfigureAwait(false); return new ApiCall(apiCall, ApiType.Graph, bodyContent); }; } } Providing additional parameters for add requests The AddApiCall handler accepts an optional key value pair parameter: Task<ApiCall> AddApiCall(Dictionary<string, object> additionalInformation = null) . You can use this to provide additional input when you call the Add from your code in the collection class. Below sample shows how this feature is used to offer different SDK consumer methods for creating Team channel tabs (on the TeamChannelTabCollection class) while there's only one generic creation method implementation in the TeamChannelTab class. Let's start with the code in the TeamChannelTabCollection class: public async Task<ITeamChannelTab> AddWikiTabAsync(string name) { if (string.IsNullOrEmpty(name)) { throw new ArgumentNullException(nameof(name)); } (TeamChannelTab newTab, Dictionary<string, object> additionalInformation) = CreateTeamChannelWikiTab(name); return await newTab.AddAsync(additionalInformation).ConfigureAwait(false) as TeamChannelTab; } public async Task<ITeamChannelTab> AddDocumentLibraryTabAsync(string name, Uri documentLibraryUri) { if (string.IsNullOrEmpty(name)) { throw new ArgumentNullException(nameof(name)); } (TeamChannelTab newTab, Dictionary<string, object> additionalInformation) = CreateTeamChannelDocumentLibraryTab(name, documentLibraryUri); return await newTab.AddAsync(additionalInformation).ConfigureAwait(false) as TeamChannelTab; } private Tuple<TeamChannelTab, Dictionary<string, object>> CreateTeamChannelDocumentLibraryTab(string displayName, Uri documentLibraryUri) { var newTab = CreateTeamChannelTab(displayName); Dictionary<string, object> additionalInformation = new Dictionary<string, object> { { \"teamsAppId\", \"com.microsoft.teamspace.tab.files.sharepoint\" }, }; newTab.Configuration = new TeamChannelTabConfiguration { EntityId = \"\", ContentUrl = documentLibraryUri.ToString() }; return new Tuple<TeamChannelTab, Dictionary<string, object>>(newTab, additionalInformation); } private Tuple<TeamChannelTab, Dictionary<string, object>> CreateTeamChannelWikiTab(string displayName) { var newTab = CreateTeamChannelTab(displayName); Dictionary<string, object> additionalInformation = new Dictionary<string, object> { { \"teamsAppId\", \"com.microsoft.teamspace.tab.wiki\" } }; return new Tuple<TeamChannelTab, Dictionary<string, object>>(newTab, additionalInformation); } The code in the TeamChannelTab class then uses the additional parameter values to drive the creation behavior: AddApiCallHandler = async (additionalInformation) => { // Define the JSON body of the update request based on the actual changes dynamic tab = new ExpandoObject(); tab.displayName = DisplayName; string teamsAppId = additionalInformation[\"teamsAppId\"].ToString(); tab.teamsAppId = teamsAppId; switch (teamsAppId) { case \"com.microsoft.teamspace.tab.wiki\": // Wiki, no configuration possible break; default: { tab.Configuration = new ExpandoObject(); if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p=>p.EntityId)) { tab.Configuration.EntityId = Configuration.EntityId; } if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p => p.ContentUrl)) { tab.Configuration.ContentUrl = Configuration.ContentUrl; } if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p => p.RemoveUrl)) { tab.Configuration.RemoveUrl = Configuration.RemoveUrl; } if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p => p.WebsiteUrl)) { tab.Configuration.WebsiteUrl = Configuration.WebsiteUrl; } break; } } // Serialize object to json var bodyContent = JsonSerializer.Serialize(tab, typeof(ExpandoObject), new JsonSerializerOptions { WriteIndented = false }); var parsedApiCall = await ApiHelper.ParseApiRequestAsync(this, baseUri).ConfigureAwait(false); return new ApiCall(parsedApiCall, ApiType.GraphBeta, bodyContent); }; Doing additional API calls Above example showed the AddApiCallHandler which provides a framework for doing add requests, but you often also need to do other types of requests and for that you need to be able to execute API calls. There are 2 ways to do this: Run an API call and automatically load the resulting API call response in the model Run an API call and process the resulting json as part of your code Above methods are described in the next chapters. Running an API call and loading the result in the model When you know that the API call you're making will return json data that has to be loaded into the model then you should use the RequestAsync method for immediate async processing or Request method for batch processing. These methods accept an ApiCall instance as input together with the HttpMethod . // to update Running an API call and processing the resulting json as part of your code Some API calls do return data, but the returned data cannot be loaded into the current model. In those cases you should use the RawRequestAsync method. This method accepts an ApiCall instance as input together with the HttpMethod . Below sample shows how you can archive a Team. The sample shows how the ApiCall is built and executed via the RawRequestAsync method. This method returns an ApiCallResponse object that contains the http response code, the json response and additional response headers from the server, which is processed and as a result the recycle bin item id is returned and the list is removed from the model. public async Task<ITeamAsyncOperation> ArchiveAsync(bool setSPOSiteReadOnlyForMembers) { if (Requested) { dynamic body = new ExpandoObject(); body.shouldSetSpoSiteReadOnlyForMembers = setSPOSiteReadOnlyForMembers; var bodyContent = JsonSerializer.Serialize(body, typeof(ExpandoObject), new JsonSerializerOptions { WriteIndented = false }); var apiCall = new ApiCall($\"teams/{Id}/archive\", ApiType.Graph, bodyContent); var response = await RawRequestAsync(apiCall, HttpMethod.Post).ConfigureAwait(false); if (response.StatusCode == System.Net.HttpStatusCode.Accepted && response.Headers != null && response.Headers.ContainsKey(\"Location\")) { // The archiving operation is in progress, already set the Team IsArchived flag to true (this as ITeam).SetSystemProperty(p => p.IsArchived, true); // we get back a url to request a teamsAsyncOperation (https://docs.microsoft.com/en-us/graph/api/resources/teamsasyncoperation?view=graph-rest-beta) return new TeamAsyncOperation(response.Headers[\"Location\"], PnPContext); } } return null; }"
  },
  "articles/contributor/extending the model - SharePoint REST.html": {
    "href": "articles/contributor/extending the model - SharePoint REST.html",
    "title": "Extending the model for SharePoint REST | PnP Core SDK",
    "keywords": "Extending the model for SharePoint REST The PnP Core SDK model contains model, collection, and complex type classes which are populated via either Microsoft Graph and/or SharePoint REST. In this chapter you'll learn more on how to decorate your classes and their properties to interact with Microsoft 365 via the SharePoint REST API. Configuring model classes Public model (interface) decoration For model classes that are linq queriable one needs to link the concrete (so the implementation) to the public interface via the ConcreteType class attribute: [ConcreteType(typeof(List))] public interface IList : IDataModel<IList>, IDataModelUpdate, IDataModelDelete { // Omitted for brevity } Class decoration Each model class that uses SharePoint REST does need to have at least one SharePointType attribute which is defined on the coded model class (e.g. List.cs): [SharePointType(\"SP.List\", Uri = \"_api/Web/Lists(guid'{Id}')\", Get = \"_api/web/lists\", Update = \"_api/web/lists/getbyid(guid'{Id}')\", LinqGet = \"_api/web/lists\")] internal partial class List { // Omitted for brevity } When configuring the SharePointType attribute for SharePoint REST you need to set attribute properties: Property Required Description Type Yes Defines the SharePoint REST type that maps with the model class. Each model that requires SharePoint REST requires this attribute, hence the type is requested via the attribute constructor. Uri Yes Defines the URI that uniquely identifies this object. See model tokens to learn more about the possible tokens you can use. Target No A model can be used from multiple scope (e.g. the ContentTypeCollection is available for both Web and List model classes) and if so the Target property defines the scope of the SharePointType attribute. Get No Overrides the Uri property for get operations. LinqGet No Some model classes do support linq queries which are translated in corresponding server calls. If a class supports linq in this way, then it also needs to have the LinqGet attribute set. Update No Overrides the Uri property for update operations. Delete No Overrides the Uri property for delete operations. OverflowProperty No Used when working with a dynamic property/value pair (e.g. fields in a SharePoint ListItem) whenever the SharePoint REST field containing these dynamic properties is not named Values . Sample of using multiple SharePointType decorations Below sample shows how a model can be decorated for multiple scopes: [SharePointType(\"SP.ContentType\", Target = typeof(Web), Uri = \"_api/Web/ContentTypes('{Id}')\", Get = \"_api/web/contenttypes\", LinqGet = \"_api/web/contenttypes\")] [SharePointType(\"SP.ContentType\", Target = typeof(List), Uri = \"_api/Web/Lists(guid'{Parent.Id}')/ContentTypes('{Id}')\", Get = \"_api/Web/Lists(guid'{Parent.Id}')/contenttypes\", LinqGet = \"_api/Web/Lists(guid'{Parent.Id}')/contenttypes\")] internal partial class ContentType { // Omitted for brevity } Property decoration The property level decoration is done using the SharePointProperty and KeyProperty attributes. Each model instance does require to have a override of the Key property and that Key property must be decorated with the KeyProperty attribute, which specifies the actual fields in the model that must be selected as key. The key is for example used to ensure there are no duplicate model class instances in a single collection. Whereas the KeyProperty attribute is always there once in each model class, the usage of the SharePointProperty attribute is only needed whenever it makes sense. For most properties you do not need to set this attribute, it's only required for special cases. Since the properties are defined in the generated model class (e.g. List.gen.cs) the decoration via attributes needs to happen in this class as well. // Configure the SharePoint REST field used to populate this model property [SharePointProperty(\"DocumentTemplateUrl\")] public string DocumentTemplate { get => GetValue<string>(); set => SetValue(value); } // Define a collection as expandable [SharePointProperty(\"Items\", Expandable = true)] public IListItemCollection Items { get { if (!HasValue(nameof(Items))) { var items = new ListItemCollection { PnPContext = this.PnPContext, Parent = this }; SetValue(items); } return GetValue<IListItemCollection>(); } } // Set the keyfield for this model class [KeyProperty(\"Id\")] public override object Key { get => this.Id; set => this.Id = Guid.Parse(value.ToString()); } You can set following properties on this attribute: Property Required Description FieldName Yes Use this property when the SharePoint REST fieldname differs from the model property name, since the field name is required by the default constructor you always need to provide this value when you add this property. JsonPath No When the information returned from SharePoint REST is a complex type and you only need a single value from it, then you can specify the JsonPath for that value. E.g. when you get sharePointIds.webId as response you tell the model that the fieldname is sharePointIds and the path to get there is webId. The path can be more complex, using a point to define property you need (e.g. property.child.childofchild). Expandable No Defines that a collection is expandable, meaning it can be loaded via the $expand query parameter and used in the lambda expression in Get and GetAsync operations. ExpandByDefault No When the model contains a collection of other model objects then setting this attribute to true will automatically result in the population of that collection. This can negatively impact performance, so only set this when the collection is almost always needed. UseCustomMapping No Allows you to force a callout to the model's MappingHandler event handler whenever this property is populated. See the Event Handlers article to learn more. Configuring complex type classes Complex type classes are not used when the model is populated via SharePoint REST. Configuring collection classes Collection classes do not have attribute based decoration. Implementing \"Add\" functionality In contradiction with get, update, and delete which are fully handled by decorating classes and properties using attributes, you'll need to write actual code to implement add. Adding is implemented as follows: The public part (interface) is defined on the collection interface. Each functionality (like Add) is implemented via 6 methods: An async method An async batch method An async batch method that allows to pass in a Batch as first method parameter A sync method that calls the async method with a GetAwaiter().GetResult() A sync batch method that calls the async method with a GetAwaiter().GetResult() A sync batch method that calls the async method with a GetAwaiter().GetResult() and allows to pass in a Batch as first method parameter Add methods defined on the interface are implemented in the collection classes as proxies that call into the respective add methods of the added model class. The implementation that performs the actual add is implemented as an AddApiCallHandler event handler in the model class. See the Event Handlers page for more details. Below code snippets show the above three concepts. First one shows the collection interface (e.g. IListCollection.cs) with the Add methods: /// <summary> /// Public interface to define a collection of List objects of SharePoint Online /// </summary> public interface IListCollection : IQueryable<IList>, IDataModelCollection<IList>, ISupportPaging<IList> { /// <summary> /// Adds a new list /// </summary> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public Task<IList> AddAsync(string title, ListTemplateType templateType); /// <summary> /// Adds a new list /// </summary> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public IList Add(string title, ListTemplateType templateType); /// <summary> /// Adds a new list /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public Task<IList> AddBatchAsync(Batch batch, string title, ListTemplateType templateType); /// <summary> /// Adds a new list /// </summary> /// <param name=\"batch\">Batch to use</param> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public IList AddBatch(Batch batch, string title, ListTemplateType templateType); /// <summary> /// Adds a new list /// </summary> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public Task<IList> AddBatchAsync(string title, ListTemplateType templateType); /// <summary> /// Adds a new list /// </summary> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public IList AddBatch(string title, ListTemplateType templateType); } Implementation of the interface in the coded collection class (e.g. ListCollection.cs): internal partial class ListCollection { public async Task<IList> AddBatchAsync(string title, ListTemplateType templateType) { return await AddBatchAsync(PnPContext.CurrentBatch, title, templateType).ConfigureAwait(false); } public IList AddBatch(string title, ListTemplateType templateType) { return AddBatchAsync(title, templateType).GetAwaiter().GetResult(); } public async Task<IList> AddBatchAsync(Batch batch, string title, ListTemplateType templateType) { if (title == null) { throw new ArgumentNullException(nameof(title)); } if (templateType == 0) { throw new ArgumentException($\"{nameof(templateType)} cannot be 0\"); } var newList = CreateNewAndAdd() as List; newList.Title = title; newList.TemplateType = templateType; return await newList.AddBatchAsync(batch).ConfigureAwait(false) as List; } public IList AddBatch(Batch batch, string title, ListTemplateType templateType) { return AddBatchAsync(batch, title, templateType).GetAwaiter().GetResult(); } public async Task<IList> AddAsync(string title, ListTemplateType templateType) { if (title == null) { throw new ArgumentNullException(nameof(title)); } if (templateType == 0) { throw new ArgumentException($\"{nameof(templateType)} cannot be 0\"); } var newList = CreateNewAndAdd() as List; newList.Title = title; newList.TemplateType = templateType; return await newList.AddAsync().ConfigureAwait(false) as List; } public IList Add(string title, ListTemplateType templateType) { return AddAsync(title, templateType).GetAwaiter().GetResult(); } } And finally you'll see the actual add logic being implemented in the coded model class (e.g. List.cs) via implementing the AddApiCallHandler : internal partial class List { internal List() { // Handler to construct the Add request for this list AddApiCallHandler = async () => { var entity = EntityManager.Instance.GetClassInfo(GetType(), this); var addParameters = new { __metadata = new { type = entity.SharePointType }, BaseTemplate = TemplateType, Title }.AsExpando(); string body = JsonSerializer.Serialize(addParameters, typeof(ExpandoObject)); return new ApiCall($\"_api/web/lists\", ApiType.SPORest, body); }; } } Providing additional parameters for add requests The AddApiCall handler accepts an optional key value pair parameter: Task<ApiCall> AddApiCall(Dictionary<string, object> additionalInformation = null) . You can use this to provide additional input when you call the Add from your code in the collection class. Below sample shows how this feature is used to offer different SDK consumer methods for creating Team channel tabs (on the TeamChannelTabCollection class) while there's only one generic creation method implementation in the TeamChannelTab class. Let's start with the code in the TeamChannelTabCollection class: public async Task<ITeamChannelTab> AddWikiTabAsync(string name) { if (string.IsNullOrEmpty(name)) { throw new ArgumentNullException(nameof(name)); } (TeamChannelTab newTab, Dictionary<string, object> additionalInformation) = CreateTeamChannelWikiTab(name); return await newTab.AddAsync(additionalInformation).ConfigureAwait(false) as TeamChannelTab; } public async Task<ITeamChannelTab> AddDocumentLibraryTabAsync(string name, Uri documentLibraryUri) { if (string.IsNullOrEmpty(name)) { throw new ArgumentNullException(nameof(name)); } (TeamChannelTab newTab, Dictionary<string, object> additionalInformation) = CreateTeamChannelDocumentLibraryTab(name, documentLibraryUri); return await newTab.AddAsync(additionalInformation).ConfigureAwait(false) as TeamChannelTab; } private Tuple<TeamChannelTab, Dictionary<string, object>> CreateTeamChannelDocumentLibraryTab(string displayName, Uri documentLibraryUri) { var newTab = CreateTeamChannelTab(displayName); Dictionary<string, object> additionalInformation = new Dictionary<string, object> { { \"teamsAppId\", \"com.microsoft.teamspace.tab.files.sharepoint\" }, }; newTab.Configuration = new TeamChannelTabConfiguration { EntityId = \"\", ContentUrl = documentLibraryUri.ToString() }; return new Tuple<TeamChannelTab, Dictionary<string, object>>(newTab, additionalInformation); } private Tuple<TeamChannelTab, Dictionary<string, object>> CreateTeamChannelWikiTab(string displayName) { var newTab = CreateTeamChannelTab(displayName); Dictionary<string, object> additionalInformation = new Dictionary<string, object> { { \"teamsAppId\", \"com.microsoft.teamspace.tab.wiki\" } }; return new Tuple<TeamChannelTab, Dictionary<string, object>>(newTab, additionalInformation); } The code in the TeamChannelTab class then uses the additional parameter values to drive the creation behavior: AddApiCallHandler = async (additionalInformation) => { // Define the JSON body of the update request based on the actual changes dynamic tab = new ExpandoObject(); tab.displayName = DisplayName; string teamsAppId = additionalInformation[\"teamsAppId\"].ToString(); tab.teamsAppId = teamsAppId; switch (teamsAppId) { case \"com.microsoft.teamspace.tab.wiki\": // Wiki, no configuration possible break; default: { tab.Configuration = new ExpandoObject(); if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p=>p.EntityId)) { tab.Configuration.EntityId = Configuration.EntityId; } if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p => p.ContentUrl)) { tab.Configuration.ContentUrl = Configuration.ContentUrl; } if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p => p.RemoveUrl)) { tab.Configuration.RemoveUrl = Configuration.RemoveUrl; } if (Configuration.IsPropertyAvailable<ITeamChannelTabConfiguration>(p => p.WebsiteUrl)) { tab.Configuration.WebsiteUrl = Configuration.WebsiteUrl; } break; } } // Serialize object to json var bodyContent = JsonSerializer.Serialize(tab, typeof(ExpandoObject), new JsonSerializerOptions { WriteIndented = false }); return new ApiCall((await ApiHelper.ParseApiRequestAsync(this, baseUri)), ApiType.GraphBeta, bodyContent); }; Doing additional API calls Above example showed the AddApiCallHandler which provides a framework for doing add requests, but you often also need to do other types of requests (e.g. adding an available content type to a list, recycling a list, ...) and for that you need to be able to execute API calls. There are 2 ways to do this: Run an API call and automatically load the resulting API call response in the model Run an API call and process the resulting json as part of your code Above methods are described in the next chapters. Running an API call and loading the result in the model When you know that the API call you're making will return json data that has to be loaded into the model then you should use the RequestAsync method for immediate async processing or Request method for batch processing. These methods accept an ApiCall instance as input together with the HttpMethod . Below sample shows how this can be used to add an existing content type to a list. The AddAvailableContentTypeApiCall method defines the API call to be executed and in the AddAvailableContentTypeBatchAsync and AddAvailableContentTypeAsync methods this API call is executed via the respective Request and RequestAsync methods. When executing the API calls the resulting json is automatically processed and loaded into the model, so in the below case the content type will show up in the list content type collection. private ApiCall AddAvailableContentTypeApiCall(string id) { dynamic body = new ExpandoObject(); body.contentTypeId = id; var bodyContent = JsonSerializer.Serialize(body, typeof(ExpandoObject), new JsonSerializerOptions { WriteIndented = false }); // Given this method can apply on both Web.ContentTypes as List.ContentTypes we're getting the entity info which will // automatically provide the correct 'parent' var entity = EntityManager.Instance.GetClassInfo<IContentType>(GetType(), this); return new ApiCall($\"{entity.SharePointGet}/AddAvailableContentType\", ApiType.SPORest, bodyContent); } internal IContentType AddAvailableContentTypeBatchAsync(Batch batch, string id) { var apiCall = AddAvailableContentTypeApiCall(id); await RequestBatchAsync(batch, apiCall, HttpMethod.Post).ConfigureAwait(false); return this; } internal async Task<IContentType> AddAvailableContentTypeAsync(string id) { var apiCall = AddAvailableContentTypeApiCall(id); await RequestAsync(apiCall, HttpMethod.Post).ConfigureAwait(false); return this; } Running an API call and processing the resulting json as part of your code Some API calls do return data, but the returned data cannot be loaded into the current model. In those cases you should use the RawRequestAsync method. This method accepts an ApiCall instance as input together with the HttpMethod . Below sample shows how this can be used to recycle a list (= move list to the site's recycle bin). The sample shows how the ApiCall is built and executed via the RawRequestAsync method. This method returns an ApiCallResponse object that contains the json response from the server, which is processed and as a result the recycle bin item id is returned and the list is removed from the model. public async Task<Guid> RecycleAsync() { var apiCall = new ApiCall($\"_api/Web/Lists(guid'{Id}')/recycle\", ApiType.SPORest); var response = await RawRequestAsync(apiCall, HttpMethod.Post).ConfigureAwait(false); if (!string.IsNullOrEmpty(response.Json)) { var document = JsonSerializer.Deserialize<JsonElement>(response.Json); if (document.TryGetProperty(\"d\", out JsonElement root)) { if (root.TryGetProperty(\"Recycle\", out JsonElement recycleBinItemId)) { // Remove this item from the lists collection RemoveFromParentCollection(); // return the recyclebin item id return recycleBinItemId.GetGuid(); } } } return Guid.Empty; }"
  },
  "articles/contributor/extending the model.html": {
    "href": "articles/contributor/extending the model.html",
    "title": "Extending the model - step by step guidance | PnP Core SDK",
    "keywords": "Extending the model - step by step guidance Extending the model is a very common type of work, especially in the early days of this SDK. This page will walk you through the needed steps, but before engaging it's recommended that you've read this article: The PnP Core SDK model . Important In order to speed up the model development the needed SharePoint REST model classes are for the most part pre created, these classes can be copied over and modified to suit your needs. You can find the pre-generated classes in https://github.com/pnp/pnpcore/tree/dev/src/generated . If you're not able to find your model classes then please create an issue in the issue list so we can update the generation logic to include those. Step 1: Define the public model Step 1.1: Create the interface(s) The public model is an interface and lives in the Public folder. So when extending the SharePoint model you would create the new interface in for example Model\\SharePoint\\Core\\Public or in Model\\SharePoint\\Navigation\\Public . If you feel there's a need to add a new sub level (e.g. Core, Navigation, etc) then you can do that. Key things to check are: Let's consider a model called Model in SharePoint Your interface(s) are in the Public folder Your interface(s) are public (e.g. public interface IWeb ) and follow the standard interface naming convention (so starting with an I e.g. IModel ) Your interface(s) extends the needed base interfaces (see The PnP Core SDK model for more details). At a minimum, a model interface extends the IDataModel<IModel> interface and a collection interface extends the IDataModelCollection<IModel> interface Your interface(s) namespace reflects the top level model folder (e.g. all SharePoint interfaces live in the PnP.Core.Model.SharePoint namespace) Your interface(s) have triple slash comments explaining their purpose Sample of a Model interface namespace PnP.Core.Model.SharePoint { /// <summary> /// Public interface to define a {Model} object of SharePoint Online /// </summary> [ConcreteType(typeof(Model))] public interface IModel : IDataModel<IModel> { } } Sample of a collection of Model items interface namespace PnP.Core.Model.SharePoint { /// <summary> /// Public interface to define a collection of {Model} object of SharePoint Online /// </summary> public interface IModelCollection : IDataModelCollection<IModel> { } } Step 1.2: Add the properties Once the interface is created you need to add properties to it, the properties you want to add are quite often inspired by what the called API's return. So if the API you plan to call to populate this model returns a string field with name FieldA you would want to add a property for it: public string FieldA { get; set; } . Key things to check are: The added properties are public properties The added properties have a getter and a setter, unless the property is model collection (e.g. public IListCollection Lists { get; } in IWeb.cs ) The properties are simple .Net types, enums (see below), complex types or collections of already defined model classes or complex types. See The PnP Core SDK model for more details Properties have triple slash comments explaining their purpose Sample of a Model interface with properties namespace PnP.Core.Model.SharePoint { /// <summary> /// Public interface to define a {Model} object of SharePoint Online /// </summary> public interface IModel : IDataModel<IModel> { /// <summary> /// The unique ID of the {Model} object /// </summary> public string Id { get; set; } /// <summary> /// Gets or Sets the FieldA of the {Model} /// </summary> public string FieldA { get; set; } /// <summary> /// Gets or Sets whether the Model is \"FieldB\" /// </summary> public bool FieldB { get; set; } } } Sample of a ModelCollection interface and a Model2 interface that uses it namespace PnP.Core.Model.SharePoint { /// <summary> /// Public interface to define a collection of {Model} object of SharePoint Online /// </summary> public interface IModelCollection : IDataModelCollection<IModel> { } } namespace PnP.Core.Model.SharePoint { /// <summary> /// Public interface to define a {Model2} object of SharePoint Online /// </summary> public interface IModel2 : IDataModel<IModel> { /// <summary> /// Collection of Model items in the current Model2 object /// </summary> public IModelCollection Items { get; } } } Step 2: Define the internal model Once you've defined the public interface the next step is defining the internal classes that implement the created interface(s). These internal classes live at the same level as your interface classes but then in the Internal folder instead of the Public folder. So if the interface lives in the Model\\SharePoint\\Core\\Public folder then the respective internal class lives in the Model\\SharePoint\\Core\\Internal folder. At this moment the internal classes are split into 2 partial classes: there's a model.cs and a model.gen.cs class. Overtime we might opt to combine these classes into a single class, but for now it's recommended to implement 2 classes. Step 2.1: Create the model.gen.cs class The model.gen.cs class contains the code that in the future could be generated, which are the properties. Key things to check are: It's an internal partial class, e.g. internal partial class Web The class name is aligned to the interface name (e.g. IWeb and Web ) The namespace is the same as the one used for the interface The class implements the needed base classes and interfaces: A model class typically implements BaseDataModel<IModel> and the public interface IModel A collection class BaseDataModelCollection<IModel> and the public interface IModelCollection The used interface needs to be implemented, which means all the properties defined in the interface will be added: Properties are public Properties use the GetValue<> base class method for getting Properties use the SetValue base class method for setting Collection properties have specific get implementations, check The PnP Core SDK model ) for more details You've added the Key property and it points to the property that uniquely identifies your model instance. Ensure you've also updated the KeyProperty value to match how you've implemented the Key property: // Property that uniquely identifies this model instance is a guid named Id public Guid Id { get => GetValue<Guid>(); set => SetValue(value); } // Implement they Key property to use the guid ID: [KeyProperty(\"Id\")] public override object Key { get => this.Id; set => this.Id = Guid.Parse(value.ToString()); } Step 2.2: Create the model.cs class The model.cs contains the custom code, so code that could not be generated. Key things to check are: It's an internal partial class, e.g. internal partial class Web The class name is aligned to the interface name (e.g. IWeb and Web ) The namespace is the same as the one used for the interface Step 3: Decorate the model to enable create/read/update/delete functionality With step 1 and 2 done you've a model definition, but there's no behaviour yet. To bring the model to life, you'll need to decorate it with class and property attributes. Depending on whether you're targeting SharePoint REST API's or Microsoft Graph API's you would use different attributes to decorate the model: Decorating the model for SharePoint REST API's Decorating the model for Microsoft Graph API's Important If you're extending the SharePoint model and there's both a Microsoft Graph and a SharePoint REST API available then start with implementing the model using SharePoint REST. Once that works you can add additional Microsoft Graph based decoration. Step 4: Add additional functionality At this point you should have a working model that can be used to read data and depending on the implementation also supports adding, updating and deleting. The power of the SDK however will not just be the model, but also the \"rich\" extensions on top of it. The extensions can be implemented as methods on the model, e.g. you could imagine an UploadFile method on the ITeamChannel model. For implementing this additional functions you quite often will need to execute API calls and optionally have the resulting json response loaded into the model. For doing that there are the RequestAsync and Request base class methods in case you want the resulting json be processed or the RawRequestAsync method in case you want to process the resulting json as part of your implementation. You'll find more details on this on the pages that explain the model decoration for Graph/REST: Decorating the model for SharePoint REST API's Decorating the model for Microsoft Graph API's Step 5: Write test cases Quality is key aspect of this library and test cases do help to guarantee quality. See the Writing test cases article to learn more about how to do that."
  },
  "articles/contributor/model tokens.html": {
    "href": "articles/contributor/model tokens.html",
    "title": "Model tokens | PnP Core SDK",
    "keywords": "Model tokens Introduction When decorating model classes and properties via attributes, often you need to define an API request. To ensure that these API requests offer the needed flexibility, you can use tokens in the URL request definition. Tokens are embedded between curly brackets. Below snippet shows some samples in which tokens are used: // Site.GroupId token to grab the id of the Microsoft 365 group connected to the current site [GraphType(Uri = \"teams/{Site.GroupId}\")] [GraphProperty(\"installedApps\", Get = \"teams/{Site.GroupId}/installedapps?expand=TeamsApp\")] // Parent.GraphId to get Microsoft Graph Id value of the parent class instance of the model // GraphId to get the If value of the model class instance [GraphType(Uri = \"teams/{Parent.GraphId}/channels/{GraphId}\")] // Id property to get the SharePoint REST Id value of the model class instance [SharePointType(\"SP.List\", Uri = \"_api/Web/Lists(guid'{Id}')\", Get = \"_api/web/lists\", Update = \"_api/web/lists/getbyid(guid'{Id}')\", LinqGet = \"_api/web/lists\")] [GraphType(Get = \"sites/{Parent.GraphId}/lists/{GraphId}\")] // Web.GraphId to get the Microsoft Graph Id value of the SharePoint Web model instance of the current PnPContext instance [GraphProperty(\"items\", Get = \"/sites/{Web.GraphId}/lists/{GraphId}/items?expand=fields\")] Model tokens that can be used Token Description {Id} Value of the SharePoint Id property of the current model instance (e.g. List). {Parent.Id} Value of the SharePoint Id property of the current model's parent instance (e.g. Web for a List --> ListCollection is skipped in this approach). {GraphId} Value of the Microsoft Graph Id property of the current model instance (e.g. TeamChannel). {Parent.GraphId} Value of the Microsoft Graph Id property of the current model's parent instance (e.g. Team for a TeamChannel --> TeamChannelCollection is skipped in this approach). {Site.GroupId} Id value of the Microsoft 365 Group connected to the Site loaded in the current PnPContext (Id is the same for SharePoint REST as Microsoft Graph usage). {Site.Id} SharePoint Id value of the Site loaded in the current PnPContext. {Web.Id} SharePoint Id value of the Web loaded in the current PnPContext. {Web.GraphId} Microsoft Graph Id value of the Web loaded in the current PnPContext. {hostname} Host name of the current site (so for https://contoso.sharepoint.com/sites/team1 this is contoso.sharepoint.com) {serverrelativepath} Server relative path of the current site (so for https://contoso.sharepoint.com/sites/team1 this is /sites/team1)"
  },
  "articles/contributor/readme.html": {
    "href": "articles/contributor/readme.html",
    "title": "The PnP Core SDK model | PnP Core SDK",
    "keywords": "The PnP Core SDK model The model in PnP Core SDK is what the SDK users use to interact with Microsoft 365: it defines the model classes (e.g. List), their fields (Title, Description,...) and their operations (e.g. Get). This model has a public part (interfaces) and an implementation (internal, partial classes). In order to translate the model into respective SharePoint REST and/or Microsoft Graph v1.0 or beta queries the model needs to be decorated with attributes. These attributes drive the needed API calls to Microsoft 365 and the serialization of returned responses (JSON) into the model. As a contributor, extending and enriching the model is how you provide functionality to the developers that will be using this SDK . Where is the code? The PnP Core SDK is maintained in the PnP GitHub repository: https://github.com/pnp/pnpcore . You'll find: The code of the PnP Core SDK in the src\\sdk folder Examples of how to use the PnP Core SDK in the src\\samples folder Generated code to speed up contribution of new model logic in the src\\generated folder The source of the documentation you are reading right now in the docs folder General model principles The model design principles are agnostic to whether the model will be populated via a SharePoint REST or Microsoft Graph call, and therefore starting here to understand the general model principles is advised. Once you understand the model design principles you can learn more about how to decorate the model to work with either SharePoint REST and/or Microsoft Graph. Below picture gives an overview of the used classes in the model based on the Team model implementation: In the model there are 3 types of classes: The majority of the model is built from model classes Model classes typically use simple .Net types or enumerations as type for their properties, but sometimes a complex type is needed which is represented via a complex type class Model classes often live in a collection, so we do have model collection classes A special case is complex type collections, they can be used in collections and the collection will then be a regular .Net List of model collection classes . Each of these classes has a public model implemented via interfaces and an internal model implemented via internal partial classes. Model classes The model classes are the most commonly used classes in our domain model as they represent a Microsoft 365 object that can be queried via either the SharePoint REST or the Microsoft Graph interface. Samples of model classes are Web, Team, List,... Public model The public model is built via public interfaces. Below sample shows the public model for a SharePoint List /// <summary> /// Public interface to define a List object of SharePoint Online /// </summary> [ConcreteType(typeof(List))] public interface IList : IDataModel<IList>, IDataModelUpdate, IDataModelDelete, IQueryableDataModel { /// <summary> /// The Unique ID of the List object /// </summary> public Guid Id { get; } /// <summary> /// Gets or sets the list title /// </summary> public string Title { get; set; } /// <summary> /// Gets or sets the description of the list /// </summary> public string Description { get; set; } // Other properties left for brevity } Each public model: Uses a public interface (e.g. IList in our example) with public fields Uses the ConcreteType attribute to define the implementation type that belongs to this interface Has inline documentation on the model class and fields Always implements the IDataModel<TModel> interface where TModel is the actual interface (e.g. IList in above sample) Optionally implements the IDataModelUpdate interface whenever update functionality in needed on this model class Optionally implements the IDataModelDelete interface whenever delete functionality is needed on this model class Optionally implements the IQueryableDataModel interface whenerver the model supports LINQ querying. This goes hand in hand with using the QueryableDataModelCollection base class for the model's collection class The properties in the model use either basic .Net data types, enumerations, other model/collection types or so called complex types: // Simple .Net type public string Title { get; set; } // Enum public ListReadingDirection Direction { get; set; } // Other model/collection types public IListItemCollection Items { get; } // Complex types (sample comes from the Team model class) public ITeamFunSettings FunSettings { get; set; } Note When a property is read-only you only need to provide a ´get´ in the public model. Internal implementation The internal model implementation is what brings the public model to life: this split approach ensures that library consumers only work with the public model, and as such the library implementation can be updated without breaking the public contract with library consumers. For the internal model class implementation we've opted to use internal partial classes: A Model.gen.cs class for semi-generated model class code A Model.cs class for coded model class code Here's a snippet of the List.gen.cs class: internal partial class List : BaseDataModel<IList>, IList { public Guid Id { get => GetValue<Guid>(); set => SetValue(value); } [GraphProperty(\"displayName\")] public string Title { get => GetValue<string>(); set => SetValue(value); } [GraphProperty(\"description\")] public string Description { get => GetValue<string>(); set => SetValue(value); } // Other properties left for brevity [KeyProperty(\"Id\")] public override object Key { get => this.Id; set => this.Id = Guid.Parse(value.ToString()); } } Each generated model class: Inherits from the BaseDataModel<TModel> class and implements TModel Is an internal , partial class Has public properties that use the GetValue and SetValue inherited methods to get and set property values Has a Key property override which can be used to set/get the key value. The Key is used to organize objects in collections Has property attributes that are used to define the requests to Microsoft 365 and serialization of the received data. These attributes are explained in more detail in their respective chapters later on Here's a snippet of the List.cs class: [SharePointType(\"SP.List\", Uri = \"_api/Web/Lists(guid'{Id}')\", Get = \"_api/web/lists\", Update = \"_api/web/lists/getbyid(guid'{Id}')\", LinqGet = \"_api/web/lists\")] [GraphType(Get = \"sites/{Parent.GraphId}/lists/{GraphId}\")] internal partial class List { public List() { MappingHandler = (FromJson input) => { // Handle the mapping from json to the domain model for the cases which are not generically handled switch (input.TargetType.Name) { case \"ListExperience\": return ToEnum<ListExperience>(input.JsonElement); case \"ListReadingDirection\": return ToEnum<ListReadingDirection>(input.JsonElement); case \"ListTemplateType\": return JsonMappingHelper.ToEnum<ListTemplateType>(input.JsonElement); } input.Log.LogDebug($\"Field {input.FieldName} could not be mapped when converting from JSON\"); return null; }; // Handler to construct the Add request for this list AddApiCallHandler = () => { return new ApiCall($\"_api/web/lists\", ApiType.Rest, JsonSerializer.Serialize(new ListAdd(this, TemplateType, Title))); }; } } Each coded model class: Is an internal , partial class Does have a public default constructor Does not inherit from another class (the inheriting is done in the Model.gen.cs partial class) Contains class level attributes that are used to define the requests to Microsoft 365 and serialization of the received data. These attributes are explained in more detail in their respective chapters later on Can implement event handlers which are used to (see the Event Handlers page for more details): Optionally customize the JSON to Model mapping via the MappingHandler = (FromJson input) handler Implement the API call for doing an Add operation via the AddApiCallHandler = async () handler Optionally implement API call overrides that allow you to update the generated API call before it's send off to the server. There are these handlers: GetApiCallOverrideHandler = async (ApiCall apiCall) , UpdateApiCallOverrideHandler = async (ApiCall apiCall) and DeleteApiCallOverrideHandler = async (ApiCall apiCall) Optionally implement property validation (prevent property updates, alter values) via the ValidateUpdateHandler = (ref FieldUpdateRequest fieldUpdateRequest) handler Model specific methods can be foreseen. These methods provide additional operations on the model class Complex type classes Complex type classes are used to represent types which are too complex for simple .Net type or enumeration, but on the other hand not complex enough to be queried independently via an API call. A good example of this are the TeamFunSettings : when querying for a Team you'll get the TeamFunSettings in the response, but there's no API to directly query TeamFunSettings as such. Note Depending on your needs you can skip the overhead of creating complex types but rather use the JsonPath option of the property attributes. See the Decorating the model chapter to learn more. Public model Like with all our public models, the complex type classes also use interfaces. /// <summary> /// Public interface to define the fun settings for a Team /// </summary> public interface ITeamFunSettings: IComplexType { /// <summary> /// Defines whether the Giphy are allowed in the Team /// </summary> public bool AllowGiphy { get; set; } /// <summary> /// Defines the Giphy content rating (strict or moderate) /// </summary> public TeamGiphyContentRating GiphyContentRating { get; set; } /// <summary> /// Defines whether the stickers and meme are allowed in the Team /// </summary> public bool AllowStickersAndMemes { get; set; } /// <summary> /// Defines whether the custom memes are allowed in the Team /// </summary> public bool AllowCustomMemes { get; set; } } /// <summary> /// Giphy content rating for giphies being used in a team /// </summary> public enum TeamGiphyContentRating { Moderate, Strict } Each public model for a Complex Type class: Uses a public interface (e.g. ITeamFunSettings in our example) with public properties Has inline documentation on the class and properties Always implements the IComplexType interface The properties in the model use either basic .Net data types, other complex types or enumerations: // Basic .Net type public bool AllowGiphy { get; set; } // Enumeration public TeamGiphyContentRating GiphyContentRating { get; set; } Internal implementation For the internal complex type class implementation we've opted to use an internal partial class: A ComplexType.gen.cs class for semi-generated complex type class code Here's a snippet of the TeamFunSettings.gen.cs class: [GraphType] internal partial class TeamFunSettings : BaseComplexType<ITeamFunSettings>, ITeamFunSettings { public TeamFunSettings() { MappingHandler = (FromJson input) => { switch (input.TargetType.Name) { case \"TeamGiphyContentRating\": return ToEnum<TeamGiphyContentRating>(input.JsonElement); } input.Log.LogDebug($\"Field {input.FieldName} could not be mapped when converting from JSON\"); return null; }; } public bool AllowGiphy { get => GetValue<bool>(); set => SetValue(value); } public TeamGiphyContentRating GiphyContentRating { get => GetValue<TeamGiphyContentRating>(); set => SetValue(value); } public bool AllowStickersAndMemes { get => GetValue<bool>(); set => SetValue(value); } public bool AllowCustomMemes { get => GetValue<bool>(); set => SetValue(value); } } Each generated complex model class: Inherits from the BaseComplexType<TModel> class and implements TModel Is an internal , partial class Has the GraphType and/or the SharePointType class attribute Has public properties that use the GetValue and SetValue inherited methods to get and set property values Possibly has property attributes that are used to define the requests to Microsoft 365 and serialization of the received data. These attributes are explained in more detail in their respective chapters later on Can implement event handlers which are used to (see the Event Handlers page for more details): Optionally customize the JSON to Model mapping via the MappingHandler = (FromJson input) handler Optionally implement property validation (prevent property updates, alter values) via the ValidateUpdateHandler = (ref PropertyUpdateRequest propertyUpdateRequest) handler Collection classes Collection classes contain zero or more model class instances, so for example the ListCollection will contain zero or more List model class instances. Public model The public model is built via public interfaces. Below sample shows the public model for a SharePoint ListCollection /// <summary> /// Public interface to define a collection of List objects of SharePoint Online /// </summary> public interface IListCollection : IDataModelCollection<IList>, IQueryable<IList>, ISupportPaging<IList> { /// <summary> /// Adds a new list /// </summary> /// <param name=\"title\">Title of the list</param> /// <param name=\"templateType\">Template type</param> /// <returns>Newly added list</returns> public Task<IList> AddAsync(string title, int templateType); // Other methods omitted for brevity } Each public model interface for a Collection class: Uses a public interface (e.g. IListCollection in our example) with optionally public methods Has inline documentation on the model class and methods Always implements the IDataModelCollection<TModel> interface where TModel is the actual interface (e.g. IList in above sample) Optionally implements the IQueryable<TModel> interface where TModel is the actual interface (e.g. IList in above sample) whenever the model can be queried using linq queries Optionally implements the ISupportPaging<TModel> interface whenever the data in the collection can be retrieved from the server via paging Optionally a collection interface defines methods which add behavior. Internal implementation For the internal collection class implementation we've opted to use internal partial classes: A Collection.gen.cs class for semi-generated collection class code A Collection.cs class for coded collection class code Here's a snippet of the ListCollection.gen.cs class, which is linq queriable: internal partial class ListCollection : QueryableDataModelCollection<IList>, IListCollection { public ListCollection(PnPContext context, IDataModelParent parent, string memberName = null) : base(context, parent, memberName) { this.PnPContext = context; this.Parent = parent; } } If the collection is not linq queriable the generated collection class is very simple: internal partial class TeamAppCollection : BaseDataModelCollection<ITeamApp>, ITeamAppCollection { } Each generated collection class: Inherits from either the BaseDataModelCollection<TModel> for regular collections or from the QueryableDataModelCollection<TModel> class for linq queriable collections and implements the previously created collection interface (e.g. IListCollection ) Is an internal , partial class Here's a snippet of the ListCollection.cs class: internal partial class ListCollection { // Other methods omitted for brevity public async Task<IList> AddAsync(string title, int templateType) { if (title == null) { throw new ArgumentNullException(nameof(title)); } if (templateType == 0) { throw new ArgumentException($\"{nameof(templateType)} cannot be 0\"); } var newList = CreateNewAndAdd() as List; newList.Title = title; newList.TemplateType = templateType; return await newList.AddAsync().ConfigureAwait(false) as List; } // Other methods omitted for brevity } Each coded collection class: Is an internal , partial class Does not inherit from another class (the inheriting is done in the Collection.gen.cs partial class) Contains the implementation of the methods defined in the public interface Can use the CreateNewAndAdd collection base class method to create a new instance and add it to the collection Complex type collections Complex type classes are used to represent types which are too complex for simple .Net type or enumeration, but on the other hand not complex enough to be queried independently via an API call. Sometimes you need a collection of complex type classes, which can be released via the List .Net collection class. Public model The complex type collection is List of complex types as shown in below example. Properties that are a complex type collection should only support a property get . public interface ITeamChatMessage : IDataModel<ITeamChatMessage> { // Other properties left for brevity /// <summary> /// Reactions for this chat message (for example, Like). /// </summary> public List<ITeamChatMessageReaction> Reactions { get; } /// <summary> /// List of entities mentioned in the chat message. Currently supports user, bot, team, channel. /// </summary> public List<ITeamChatMessageMention> Mentions { get; } // Other properties left for brevity } Internal implementation For the internal complex type class collection implementation you need to update the generated partial class of the model class having the collection: A Model.gen.cs class for semi-generated complex type class code Here's a snippet of the TeamChatMessage.gen.cs class: internal partial class TeamChatMessage : BaseDataModel<ITeamChatMessage>, ITeamChatMessage { // Other properties left for brevity public List<ITeamChatMessageReaction> Reactions { get { if (!HasValue(nameof(Reactions))) { SetValue(new List<ITeamChatMessageReaction>()); } return GetValue<List<ITeamChatMessageReaction>>(); } } public List<ITeamChatMessageMention> Mentions { get { if (!HasValue(nameof(Mentions))) { SetValue(new List<ITeamChatMessageMention>()); } return GetValue<List<ITeamChatMessageMention>>(); } } // Other properties left for brevity } Each generated complex model class that contains complex type collections: Uses a List<> of the complex type class Implements the getter as shown in the example. It's important that the HasValue , SetValue , and GetValue methods are used to ensure the change tracking can detect changed values Decorating the model The model, collections and complex type classes you create can be populated via either SharePoint REST queries, Microsoft Graph queries or both. Depending on the needed query approach you'll need to decorate the model classes and/or fields with properties. It's these properties that drive the automatic query generation . When you populate your model via SharePoint REST queries then continue here , in case the model is populated via Microsoft Graph continue here ."
  },
  "articles/contributor/using paging.html": {
    "href": "articles/contributor/using paging.html",
    "title": "Implementing paging | PnP Core SDK",
    "keywords": "Implementing paging If you want a model (e.g. List ) to retrieved using paging, then you'll need to explicitly enable paging and this article will explain how. Using ISupportPaging To enable paging support you need to add the ISupportPaging<> interface on the public collection class interface of the model for which you want to use paging. If you for example want to enabled paged retrieval of Lists then you need to add the interface to the ListCollection class. public interface IListCollection : IQueryable<IList>, IDataModelCollection<IList>, ISupportPaging<IList> { } Once you've done that the paging methods/attribute can be used as shown in this example: using (var context = await pnpContextFactory.CreateAsync(\"SiteToWorkWith\")) { // Get a first page of lists of size 2 await context.Web.Lists.GetPagedAsync(2, p => p.Title); // Do we have a pointer to the next page? if (context.Web.Lists.CanPage) { // Load the next page await context.Web.Lists.GetNextPageAsync(); // Load all pages await context.Web.Lists.GetAllPagesAsync(); } } Important Since paging depends on the ODATA $top operator you also need to make your class linq queriable (by implementing IQueryable<> , next to the default IDataModelCollection<> ). If for some reason you cannot make your collection class linq quariable, then ensure that you've decorated your model class ( List in this case) with LinqGet as shown below [SharePointType(\"SP.List\", Uri = \"_api/Web/Lists(guid'{Id}')\", Update = \"_api/web/lists/getbyid(guid'{Id}')\", LinqGet = \"_api/web/lists\")] [GraphType(Get = \"sites/{Parent.GraphId}/lists/{GraphId}\", LinqGet = \"sites/{Parent.GraphId}/lists\")] internal partial class List { }"
  },
  "articles/contributor/writing documentation.html": {
    "href": "articles/contributor/writing documentation.html",
    "title": "Writing documentation | PnP Core SDK",
    "keywords": "Writing documentation The documentation system is based on DocFX , and combines inline code comments (the so called triple slash comments) with articles written in MD format. The resulting generated documentation is hosted on https://pnp.github.io/pnpcore . To extend documentation you can: Author articles Write inline code documentation via the triple slash comments Once you've made changes to the documentation and your changes are merged into the dev branch then a GitHub workflow will be triggered and this workflow will refresh documentation automatically. Writing articles Articles are at the core of the PnP Core SDK documentation and they live in the docs\\articles folder. Articles are written in DocFX Flavored Markdown , which is an extension on top of GitHub flavored markdown. Articles target either the library consumer or the library contributor, hence they should be added to the consumer or contributor folder respectively. When an article requires images, then all images are added in the docs\\images folder. You can eventually organize images in sub-folders of the docs\\images folder. If you want to show your article in the table of contents, then you need to make the needed changes in toc.yml , which you find in the root of the docs folder. Writing inline code documentation Documentation written in the code files themselves is used to generate the Api Documentation and depends on docfx parsing the triple slash comments that you add to the code. Below resources help you get started: Triple slash (also called XML documents) commenting in .Net code files DocFX support for triple slash comments"
  },
  "articles/contributor/writing tests.html": {
    "href": "articles/contributor/writing tests.html",
    "title": "Writing test cases | PnP Core SDK",
    "keywords": "Writing test cases Test cases are a crucial part of the PnP Core SDK as they help ensuring code quality and provide feedback to contributors on how well their changes are working. All new contributions must be covered by test cases unless the added functionality is already somehow covered by existing test cases. Setting up your environment to run the tests cases If you want to use and extend these unit tests then you'll need to do a simple onetime setup: Go to the test project folder (src\\sdk\\PnP.Core.Test) Copy appsettings.copyme.json to appsettings.xxx.json (xxx identifies your test environment) and update the url's and accounts to match with what's available in your tenant. The test system requires that you have setup the following sites (optionally use setuptestenv.ps1 to help create the needed sites): A modern, group connected, team site (recommended name is pnpcoresdktestgroup ) which was teamified and which has a sub site (recommended name is subsite ) A modern communication site (recommended name is pnpcoresdktest ) which has a sub site (recommended name is subsite ) Copy env.sample to env.txt Open env.txt and put as content the value xxx (xxx identifies your test environment) Ensure that you have the PnP O365 Management Shell multi-tenant app registered in Azure AD and Consented - this is used for the Graph and SharePoint tests. Quickest way to set this up, is to either: Use PnP PowerShell to connect to a site using the '-PnPO365ManagementShell' parameter see reference: https://docs.microsoft.com/en-us/powershell/module/sharepoint-pnp/connect-pnponline?view=sharepoint-ps Refer to the User documentation article Using the multi-tenant PnP Azure AD application That should be it. Happy testing! Running the existing tests in offline mode The test model runs tests by default in an offline modus. This means that tests run really quick and that they should always work, even if you are offline (not connected to the Internet network). There are just few tests that forcibly require to be executed online, and those will fail when you are offline. After you've setup your environment for testing you should open the Visual Studio Test Explorer and click on the Run all tests button to verify that all tests run successfully on your computer. Authoring new test cases Where do I put my test case? All test cases belong to the PnP.Core.Test project and generally speaking the test cases will either be linked to extending the model or linked to the \"core\" part that handles the interaction with SharePoint or Microsoft Graph. For model related test cases, please add them to existing test classes in the respective model folders: SharePoint model tests go into the SharePoint folder. You either create a new file with test cases or add your test into an existing file. Teams model tests go into the Teams folder. You either create a new file with test cases or add your test into an existing file. Azure Active Directory model tests go into the AzureActiveDirectory folder. You either create a new file with test cases or add your test into an existing file If your test extends an already tested model then most likely you'll be able to add your test to one of the existing test classes. When you add \"core\" tests these will need to be added in the Base folder for core tests or in the QueryModel folder for linq tests. Anatomy of a typical test file and test case It's easier to learn this by looking at a sample: [TestClass] public class GetTests { [ClassInitialize] public static void TestFixtureSetup(TestContext context) { // Configure mocking default for all tests in this class, unless override by a specific test //TestCommon.Instance.Mocking = false; } #region Tests that use REST to hit SharePoint [TestMethod] public async Task GetSinglePropertyViaRest() { //TestCommon.Instance.Mocking = false; using (var context = await TestCommon.Instance.GetContextAsync(TestCommon.TestSite)) { var web = await context.Web.GetAsync(p => p.WelcomePage); // Is the property populated Assert.IsTrue(web.IsPropertyAvailable(p => p.WelcomePage)); Assert.IsTrue(!string.IsNullOrEmpty(web.WelcomePage)); // Are other properties still not available Assert.IsFalse(web.IsPropertyAvailable(p => p.Title)); } } } All test classes will have a TestFixtureSetup static method which is marked as class initializer. Using this method you can turn all tests in a given class from offline testing to online testing (so testing without using the mock data). Looking at the test method itself you'll notice that: To create a PnPContext the test cases uses the TestCommon.Instance.GetContext method: it's important to use this method as this one is hooked up to the configuration you specified plus it will deliver a context that understands how to work with mock data. Uncommenting the TestCommon.Instance.Mocking = false; line can be used to put this specific test in online mode: when you start developing your test you'll have do that (as you initially don't have mock data) Mocking of server responses in tests The PnP Core SDK tests use a custom built mocking system which essentially simply saves server responses when running in online mode. When running in offline mode (so when mocking data) the saved server responses are used to mock the server response. All of this works automatically and can be turned on/off by setting the TestCommon.Instance.Mocking property to true or false (see also the FAQ at the end of this page to learn more). When running in online mode each response for a server request will be stored as a file in a sub folder of the current test class. This folder is always named MockData and has a sub folder per test class, which ensures that mocking files for a given test can be easily identified. The filename uses the following pattern {testname}-{context order}-{sequence}.response . Steps to create a test case If you follow below steps you'll be creating test cases according to the PnP Core SDK guidelines: Find the right location to add your test, either use an existing file or create a new test file Add below test to get started [TestMethod] public async Task NameOfYourTestMethod() { TestCommon.Instance.Mocking = false; using (var context = await TestCommon.Instance.GetContextAsync(TestCommon.TestSite)) { // here comes your actual test code using (var context1 = await TestCommon.Instance.GetContextAsync(TestCommon.TestSite, 1)) { // here comes your actual test code, eg code that validates what was created in the first part } } } Write your test with mocking turned off Once your test is ready delete the generated mock data files (see the .response files in the MockData folder) and run your test once more to regenerate them. This step ensures that no stale mocking files will be checked in. Turn mocking on (commenting the TestCommon.Instance.Mocking = false; line) and verify your test still works Check in your test case together with the offline files generated in the mockdata folder Optionally : if your test is creating artifacts in Microsoft 365 it's best to code the cleanup in the test or in the default cleantestenv.copyme.ps1 script Important Each checked in test must be checked in with mocking turned on and as such with the appropriate offline test files (the .response files). This is important as it ensures that test cases execute really fast and that tests can be used in build/deploy pipelines. When you use GetContextAsync multiple times in a single test case then use a sequence number for all but the first usage. The second usage would be like this: await TestCommon.Instance.GetContextAsync(TestCommon.TestSite, 1) , the third usage await TestCommon.Instance.GetContextAsync(TestCommon.TestSite, 2) . Frequently Asked Questions Do I need to recreate the sites after each live test run? You can opt to recreate the sites each time, but that will be time consuming. It's better to clean the created artifacts before launching a new live test run. The artifacts to clean obviously depend on the written test cases and it's a best practice to keep the cleantestenv.copyme.ps1 script up to date with the needed cleaning work. You can tailor this script for your environment and save it as cleantestenv.xxx.ps1 (xxx identifies your test environment) to add your specific cleanup instructions. In addition, we strongly recommend you to prefix the name of any asset or artifact created in the tests with the constant TestCommon.PnPCoreSDKTestPrefix . This will help identifying the assets and ease up the cleaning process. Alternatively, you can use the helper method TestCommon.GetPnPSdkTestAssetName(string name) to ensure any name you choose is always prefixed following our convention. How can I configure tests to run live versus the default offline run? By default all the tests run based upon offline data, this is done to enable fast test execution without being dependent on a Microsoft 365 backend to be available and configured for testing. If you however are adding new test cases or refactoring code you might want to run one or more tests in live mode. There are 3 options: Run a single test live To run a single test live you simply need to uncomment the TestCommon.Instance.Mocking = false; line to configure the test to run without using the mocking data, so run live. [TestMethod] public async Task GetSinglePropertyViaRest() { TestCommon.Instance.Mocking = false; using (var context = await TestCommon.Instance.GetContextAsync(TestCommon.TestSite)) { var web = await context.Web.GetAsync(p => p.WelcomePage); // Is the property populated Assert.IsTrue(web.IsPropertyAvailable(p => p.WelcomePage)); Assert.IsTrue(!string.IsNullOrEmpty(web.WelcomePage)); // Are other properties still not available Assert.IsFalse(web.IsPropertyAvailable(p => p.Title)); } } Note Please only commit tests that can run offline: tests need to have offline data + mocking must be turned on. Run all the tests in a test class live To run all tests in a given test class live you can turn off mocking via a test class initialized: [ClassInitialize] public static void TestFixtureSetup(TestContext context) { // Configure mocking default for all tests in this class, unless override by a specific test TestCommon.Instance.Mocking = false; } Note Please only commit tests that can run offline: tests need to have offline data + mocking must be turned on. Run all the tests live In the rare case you want to run all the test cases live you need to change the default setting of the Mocking property from true to false in TestCommon.cs (in the Utilities folder): public bool Mocking { get; set; } = false; Note Please only commit tests that can run offline: tests need to have offline data + mocking must be turned on. Can I rename test files or test cases Yes, if naming needs to change you can do that. Keep in mind that the offline files live in a folder named accordingly to the test file and the offline files depend on the test case name, so you'll have to do similar renames in offline files or folder. My test cannot run in offline mode and as such it breaks the GitHub \"Build and Test\" workflow If you really can't make your test work offline then you'll need to exclude the test from being executed in the GitHub Build and Test workflow. This can be done by adding the following check to your test case: if (TestCommon.RunningInGitHubWorkflow()) Assert.Inconclusive(\"Skipping live test because we're running inside a GitHub action\"); My tests for Terms fail when running in Live Mode Please add \"Dutch\" to language support for terms, this is only required for live running for term set tests only, this will take a few minutes before it is effective in the Microsoft Graph. If this persists, the test uses a Sleep (of 10 seconds) method to \"wait\" for the removal of test artefacts, sometimes the artefacts are not removed within this time, this will show the test to fail."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "PnP Core SDK - preview | PnP Core SDK",
    "keywords": "PnP Core SDK - preview Intro The PnP Core SDK is an SDK designed to work for Microsoft 365. Its aim is to provide a unified object model to work with the Microsoft 365 ecosystem. At the moment the supported workloads are SharePoint Online and Microsoft Teams. Currently the library is a preview in which the focus is on coding the basics, so that in a next step the actual extending of the library can go smooth. The initial goal for this library will be to cover the needs of developers working with either SharePoint Online or Teams, but obviously we're also open to extend this library further towards other Microsoft 365 workloads if there's community demand for doing so. Important The PnP Core SDK is in preview: it's targeting developers that want to either test or extend it. It's not yet ready to be used in production scenarios, mainly because it still lacks some of the model definitions. Roadmap This is a community effort, hence we cannot guarantee below roadmap but rest assure, we're working hard to stick to plan 😀 If you want to join our team and help realize this, then checkout the How can I help section in our docs. Preview 3: September 2020 Beta 1: October 2020 Beta 2: November 2020 V1: December 2020 Getting started using this library Using the PnP Core SDK is simple, check out the getting started guide. Where is the code? The PnP Core SDK is maintained in the PnP GitHub repository: https://github.com/pnp/pnpcore . How can you help? The model implemented in the preview only covers a small part of what's possible and what's needed. We're asking the community to help us expand the model by: Extending the model via the creation of new model, complex type and collection classes. Check out the Extending the model article to learn how to do this. Adding \"functionalities\" to the model: after extending the model, the typical CRUD functionality is there, but for some parts of the model it makes sense to add functionalities by adding methods on top of the model classes. Check out the Extending the model article to learn how to do this. Writing sample programs that use this library: since this is a .Net Standard library, it doesn't target Windows only, but also macOS and Linux, as well as mobile OS's like Android and iOS. With the rise of Blazor , this library can also be used to build .Net based apps running in the browser. Samples can be added in the src\\samples folder. Working on documentation : good documentation is critical to help developers work with this library, either by using it or by extending it. See the Writing documentation article for more details. Best practices when contributing This is all new and we're here to help, don't hesitate to reach out with your questions and feedback via our issue list To avoid overlapping efforts in the startup phase please let us know if you plan to take on a particular chunk of work (e.g. let's say you want to extend the model to support Planner) If you are extending the model and you need to update the model base logic then please reach out, we want to align and agree on those changes first as these need to fit into our model approach Note The best way to reach out is by creating an issue in the issue list: https://github.com/pnp/pnpcore/issues This community rocks, sharing is caring!"
  },
  "demos/Demo.ASPNetCore/README.html": {
    "href": "demos/Demo.ASPNetCore/README.html",
    "title": "PnP Core SDK - ASP.NET Core Sample | PnP Core SDK",
    "keywords": "PnP Core SDK - ASP.NET Core Sample This solution demonstrates how the PnP Core SDK can be used in a ASP.NET Core web application Source code You can find the sample source code here: /src/samples/Demo.ASPNetCore Run the sample Register and configure an AAD app In order for the user to authenticate on the App, A new app registration should be created on Azure Portal Go to Azure Active Directory Portal In App registrations, click New registration Enter a name for your new app, make sure Accounts in this organizational directory only is selected. As the Redirect URI, in Web platform enter https://localhost:44336/signin-oidc (The port may vary according to your Visual Studio) Under Implicit grant section, check ID tokens Go to API permissions section , click Add a permission Select Microsoft Graph > Delegated permissions > select Directory.Read.All Select Microsoft Graph > Delegated permissions > select User.Read Select Microsoft Graph > Delegated permissions > select Sites.Read.All Select Microsoft Graph > Delegated permissions > select Files.Read.All Select SharePoint > Delegated permissions > select AllSites.Read Click Grant admin consent for {tenant} From Overview , -- copy the value of Directory (tenant) ID -- copy the value of Application (client) ID Configure your application Configure the name of your tenant as the value of AzureAd:Domain in appsettings.json setting Configure the Tenant ID of your app as the value of AzureAd:TenantId in appsettings.json setting Configure the Client ID of your app as the value of AzureAd:ClientId in appsettings.json setting Configure a set of credentials (username and password) for your target Microsoft SharePoint Online/Microsoft Teams environment in the Credential Manager of your Windows machine under the Windows Credentials > Generic Credentials group. Configure the name of the created credentials as the value of PnPCore:Credentials:CredentialManagerAuthentication:CredentialManagerName in appsettings.json setting Configure the URL of a target Microsoft SharePoint Online modern team site collection as the value of PnPCore:Credentials:Sites:DemoSite:SiteUrl in appsettings.json setting Be sure to have a Team in Microsoft Teams backing the modern team site in the above site collection Execute Hit F5 in Visual studio to execute the ASP.Net Core app. When trying to access one of the sections, the applications prompts you for signing in."
  },
  "demos/Demo.AzureFunction/README.html": {
    "href": "demos/Demo.AzureFunction/README.html",
    "title": "PnP Core SDK - Azure Function v3 Sample | PnP Core SDK",
    "keywords": "PnP Core SDK - Azure Function v3 Sample This solution demonstrates how to build a simple backend API in the form of an HTTP Trigger Azure Function A GetSiteDocuments() function that returns the list of documents in the Shared Documents library of the configured site. it uses an App-Only context authenticated with a self signed certificate Note this sample was created with Visual Studio 2019 (v16.7.3) and has been tested with a Windows Azure Function v3. Source code You can find the sample source code here: /src/samples/Demo.AzureFunction Quickstart Setup Note For the quickstart setup, you will need to have a recent version (> 3.24) of PnP PowerShell installed on your machine. From the solution folder execute the following PowerShell. (Make sure you set the values of the variables according to your environment and preferences) $site = \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\" $tenant = \"contoso.onmicrosoft.com\" $pwd = \"pwd\" .\\Configure.ps1 -SiteUrl $site -Tenant $pwd -CertificatePassword $pwd This script will: register a new Azure AD application grant it the permissions to allow the use of all PnP Core SDK features Create a self signed certificate, save it to your local store and export it as .cer and .pfx files Pre-fill your local.settings.json file with the needed information from operations above Feel free to have a look at the Configure.ps1 to check what it does. The settings of the Azure Function will contain the following { \"IsEncrypted\": false, \"Values\": { \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\", \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet\", \"SiteUrl\": \"https://contoso.sharepoint.com/sites/pnpcoresdktestgroup\", \"TenantId\": \"[TENANT ID]\", \"ClientId\": \"[CLIENT ID]\", \"CertificateThumbPrint\": \"[CERTIFICATE THUMBPRINT]\", \"WEBSITE_LOAD_CERTIFICATES\": \"[CERTIFICATE THUMBPRINT]\" } } The settings above are mostly necessary for authentication. Setting Description SiteUrl This parameter allows you to configure the URL of the Site to use for your Default configuration. TenantId The ID (GUID) of your tenant. Used by the PnP Core authentication provider. ClientId The Client ID of your Azure AD app. Used by the PnP Core authentication provider. CertificateThumbPrint The Thumbprint of the certificate. Used by the PnP Core authentication provider. WEBSITE_LOAD_CERTIFICATES The Thumbprint of the certificate. Indicates the Azure Function runtime to load the certificate from its registered certificates. Note For more information about configuring authentication, please visit https://github.com/pnp/pnpcore/blob/dev/docs/articles/consumer/configuring%20authentication.md#application-permissions-acting-as-an-app-account-with-app-only-permissions Try it locally Open the solution in Visual Studio and hit F5 to launch the Azure Function emulator When you see the following your local Azure Function is up and running Azure Functions Core Tools (3.0.2912 Commit hash: bfcbbe48ed6fdacdf9b309261ecc8093df3b83f2) Function Runtime Version: 3.0.14287.0 Hosting environment: Production Content root path: C:\\wrk\\pnp\\pnpcore\\src\\samples\\Demo.AzureFunction\\bin\\Debug\\netcoreapp3.1 Now listening on: http://0.0.0.0:7071 Application started. Press Ctrl+C to shut down. Functions: GetSiteDocuments: [GET] http://localhost:7071/api/GetSiteDocuments To test the API, you can open the above URL in a browser or by typing the following command in a console: curl http://localhost:7071/api/GetSiteDocuments Try it on Azure If you followed all the steps above and the Function is working well locally, you can publish your Azure Function on Azure. For the sake of simplicity, in this sample, we will use the Publish feature from Visual Studio. The extra steps consist in: Make sure the app settings are specified in the Azure Function App Make sure the Certificate we use for authentication is uploaded to the Azure Function App To publish the Azure Function: In the Visual Studio Solution Explorer, right-click the Demo.AzureFunction project and click Publish Create or Import a publishing profile to an Azure Function App Click Publish Click the Manage Azure App Service settings link For each setting for which a Remote value is not yet specified, click the Insert value from Local link Click the Manage in Azure Portal link In the TLS/SSL settings tab, choose Private Key Certificates (.pfx) and click Upload Certificate Browse your computer and select the .pfx certificate we created earlier, enter the password chosen earlier and click Upload To Make sure the Azure Function is working properly, On the Azure Portal, on your Function App blade: Go to the Functions tab Select the GetSiteDocuments function On the Code + Test tab, click the Test/Run button Make sure the chosen Method is GET Click Run Alternatively, from Code + Test tab mentioned aboved you can click the Get Function URL button and copy the URL. Then paste it in your browser or using curl in a terminal (see example here below) # On Windows 10 curl https://pnpcoresdk-demo.azurewebsites.net/api/GetSiteDocuments?code=gqyZ4H259HbYfk7axxxxxxxxxxxxxxxaqmtleLUHISazg/FDvSbLtYaw== StatusCode : 200 StatusDescription : OK Content : {\"documents\":[{\"name\":\"test.docx\",\"timeLastModified\":\"2020-08-31T21:29:56Z\",\"uniqueId\":\"fbc3c372-c1 36-45ee-8341-1e768c973182\"}]} RawContent : HTTP/1.1 200 OK Content-Length: 128 Content-Type: application/json; charset=utf-8 Date: Sun, 27 Sep 2020 15:52:36 GMT {\"documents\":[{\"name\":\"test.docx\",\"timeLastModified\":\"2020-08-31T21:29:56Z\",... Forms : {} Headers : {[Content-Length, 128], [Content-Type, application/json; charset=utf-8], [Date, Sun, 27 Sep 2020 15:52:36 GMT]} Images : {} InputFields : {} Links : {} ParsedHtml : mshtml.HTMLDocumentClass RawContentLength : 128"
  },
  "demos/Demo.Blazor/README.html": {
    "href": "demos/Demo.Blazor/README.html",
    "title": "PnP Core SDK - Blazor Sample | PnP Core SDK",
    "keywords": "PnP Core SDK - Blazor Sample This solution demonstrates how the PnP Core SDK can be used in a Blazor WebAssembly app Source code You can find the sample source code here: /src/samples/Demo.Blazor Run the sample Register and configure an AAD app In order for the user to authenticate on the App, A new app registration should be created on Azure Portal Go to Azure Active Directory Portal In App registrations, click New registration Enter a name for your new app, make sure Accounts in this organizational directory only is selected. As the Redirect URI, in Web platform enter https://localhost:44349/authentication/login-callback (The port may vary according to your Visual Studio) Under Implicit grant section, check Access tokens and ID tokens Go to API permissions section , click Add a permission -- Select SharePoint > Delegated permissions > select AllSites.FullControl -- Select Microsoft Graph > Delegated permissions > select email , openid and Sites.FullControl.All Click Grant admin consent for {tenant} From Overview , -- copy the value of Directory (tenant) ID -- copy the value of Application (client) ID Configure your application Configure the URL of your SharePoint site as the value of SharePoint:SiteUrl app setting in the file wwwroot/appsettings.json , replace the {app_id} and the {tenant_id} accordingly with the values from above Execute Hit F5 in Visual studio to execute the Blazor app. When trying to access one of the sections, the applications prompts you for signing in"
  },
  "demos/Demo.Console/README.html": {
    "href": "demos/Demo.Console/README.html",
    "title": "PnP Core SDK - Console Sample | PnP Core SDK",
    "keywords": "PnP Core SDK - Console Sample This solution demonstrates how the PnP Core SDK can be used in a console application Source code You can find the sample source code here: /src/samples/Demo.Console Run the sample Register and configure an AAD app In order for the user to authenticate on the App, A new app registration should be created on Azure Portal Go to Azure Active Directory Portal In App registrations, click New registration Enter a name for your new app, make sure Accounts in this organizational directory only is selected. As the Redirect URI, in Web platform enter http://localhost (only needed if you want use an interactive authentication flow) Under Implicit grant section, check ID tokens Go to API permissions section , click Add a permission -- Select Azure Active Directory Graph > Delegated permissions > select Directory.Read.All -- Select Azure Active Directory Graph > Delegated permissions > select User.Read Click Grand admin consent for {tenant} From Overview , -- copy the value of Directory (tenant) ID -- copy the value of Application (client) ID Configure your application This demo application comes with code for 2 different authentication providers, the CredentialManagerAuthenticationProvider or the InteractiveAuthenticationProvider can be used. The latter is the default value. To configure the app update the appsettings.json file with: Configure the Tenant ID of your app as the value of CustomSettings:TenantId in appsettings.json setting Configure the Client ID of your app as the value of CustomSettings:ClientId in appsettings.json setting Configure the URL of a target Microsoft SharePoint Online modern team site collection as the value of CustomSettings:DemoSiteUrl in appsettings.json setting Configure the URL of a target Microsoft SharePoint Online sub site as the value of CustomSettings:DemoSubSiteUrl in appsettings.json setting Be sure to have a Team in Microsoft Teams backing the modern team site in the above site collection Execute Hit F5 in Visual studio to execute the console app. The app will prompt for an interactive login (via a browser window)."
  },
  "demos/Demo.RPi/README.html": {
    "href": "demos/Demo.RPi/README.html",
    "title": "Introduction | PnP Core SDK",
    "keywords": "Introduction This sample demonstrates using the pnp core library running on a Raspberry Pi device. Source code You can find the sample source code here: /src/samples/Demo.RPi Setup Hardware The hardware used: Raspberry Pi 4 (4 GB edition) HyperPixel 4-inch screen (optional) Note: this does not imply any limitations or minimal specifications for the apps to run on these types of devices, just a description of the hard used for the project. Software The operating system installed on the Raspberry Pi device is: \"Raspbian GNU/Linux 10 (buster)\" Before, ASP.NET core application can execute, you must install the ASP.NET Core 3.1 Runtime and SDK. https://dotnet.microsoft.com/download/dotnet-core/3.1 specifically the ARM-32 bit edition. Running the app Register and configure an AAD app In order for the user to authenticate on the App, A new app registration should be created on Azure Portal Go to Azure Active Directory Portal In App registrations, click New registration Enter a name for your new app, make sure Accounts in this organizational directory only is selected Under Implicit grant section, check ID tokens Go to API permissions section , click Add a permission -- Select Azure Active Directory Graph > Delegated permissions > select Directory.Read.All -- Select Azure Active Directory Graph > Delegated permissions > select User.Read Click Grand admin consent for {tenant} Change Default client type to Treat application as public client and hit Save From Overview , -- copy the value of Directory (tenant) ID -- copy the value of Application (client) ID Configure your application Update appsettings.json with the connection details to a demo SharePoint site: Configure the Tenant ID of your app as the value of CustomSettings:TenantId in appsettings.json setting Configure the Client ID of your app as the value of CustomSettings:ClientId in appsettings.json setting Configure the user name to use as the value of CustomSettings:UserPrincipalName in appsettings.json setting Configure the password to use as the value of CustomSettings:Password in appsettings.json setting Configure the URL of a target Microsoft SharePoint Online modern team site collection as the value of CustomSettings:DemoSiteUrl in appsettings.json setting To get running: Either download this to the Raspberry Pi device directly or FTP the files over from a desktop PC. Run in Terminal dotnet build Run in Terminal dotnet run This will then output to the console the communications to SharePoint and the resulting details of the site."
  },
  "demos/Demo.WPF/README.html": {
    "href": "demos/Demo.WPF/README.html",
    "title": "PnP Core SDK - WPF Sample | PnP Core SDK",
    "keywords": "PnP Core SDK - WPF Sample This solution demonstrates how the PnP Core SDK can be used in a WPF application Source code You can find the sample source code here: /src/samples/Demo.WPF Run the sample Register and configure an AAD app In order for the user to authenticate on the App, A new app registration should be created on Azure Portal Go to Azure Active Directory Portal In App registrations, click New registration Enter a name for your new app, make sure Accounts in this organizational directory only is selected. As the Redirect URI, in Web platform enter http://localhost (only needed if you want use an interactive authentication flow) Under Implicit grant section, check ID tokens Go to API permissions section , click Add a permission Select Microsoft Graph > Delegated permissions > select Directory.Read.All Select Microsoft Graph > Delegated permissions > select User.Read Select Microsoft Graph > Delegated permissions > select Sites.Read.All Select Microsoft Graph > Delegated permissions > select Files.Read.All Select SharePoint > Delegated permissions > select AllSites.Read Click Grand admin consent for {tenant} From Overview , -- copy the value of Directory (tenant) ID -- copy the value of Application (client) ID Configure your application The application can be used with different authentication providers, see https://pnp.github.io/pnpcore/articles/consumer/configuring%20authentication.html for more details on the options. In this the sample uses an interactive flow, so you need to: Configure the Tenant ID of your app as the value of PnPCore:Credentials:InteractiveFlow:TenantId in appsettings.json setting Configure the Client ID of your app as the value of PnPCore:Credentials:InteractiveFlow:ClientId in appsettings.json setting Configure the URL of a target Microsoft SharePoint Online modern team site collection as the value of PnPCore:Credentials:Sites:DemoSite:SiteUrl in appsettings.json setting Be sure to have a Team in Microsoft Teams backing the modern team site in the above site collection Execute Hit F5 in Visual studio to execute the WPF app. When clicking on one of the buttons to load data, the applications prompts you for signing in via your browser."
  },
  "demos/README.html": {
    "href": "demos/README.html",
    "title": "PnP Core Samples | PnP Core SDK",
    "keywords": "PnP Core Samples Samples are best way to learn how to use, hence we've some example PnP Core SDK sample applications for you to learn. Following samples are available: Sample Description Authentication Demo.Console Demo console app that shows how to use the PnP Core SDK for working with Microsoft 365 data Interactive login ( InteractiveAuthenticationProvider ) Demo.ASPNetCore Demo application showing how use the PnP Core SDK from an ASP.Net Core application Credential manager based auth ( CredentialManagerAuthenticationProvider ) Demo.AzureFunction Azure Function that shows how to use the PnP Core SDK via dependency injection Application permissions ( X509CertificateAuthenticationProvider ) Demo.Blazor Sample Blazor WASM application that prototypes how the PnP Core SDK can be used in Blazor development Custom IAuthenticationProvider implementation Demo.WPF Sample WPF windows application showing how dependency injection and the PnP Core SDK can be used in WPF/XAML apps Interactive login ( InteractiveAuthenticationProvider ) Demo.RPi Sample application running on dotNet Core on the Raspberry Pi Username password login ( UsernamePasswordAuthenticationProvider ) Checkout the README.md file from each sample to learn more."
  },
  "index.html": {
    "href": "index.html",
    "title": "PnP Core SDK - preview | PnP Core SDK",
    "keywords": "PnP Core SDK - preview Intro The PnP Core SDK is an SDK designed to work for Microsoft 365. Its aim is to provide a unified object model to work with the Microsoft 365 ecosystem. At the moment the supported workloads are SharePoint Online and Microsoft Teams. Currently the library is a preview in which the focus is on coding the basics, so that in a next step the actual extending of the library can go smooth. The initial goal for this library will be to cover the needs of developers working with either SharePoint Online or Teams, but obviously we're also open to extend this library further towards other Microsoft 365 workloads if there's community demand for doing so. Important The PnP Core SDK is in preview: it's targeting developers that want to either test or extend it. It's not yet ready to be used in production scenarios, mainly because it still lacks some of the model definitions. Roadmap This is a community effort, hence we cannot guarantee below roadmap but rest assure, we're working hard to stick to plan 😀 If you want to join our team and help realize this, then checkout the How can I help section in our docs. Preview 3: September 2020 Beta 1: October 2020 Beta 2: November 2020 V1: December 2020 Getting started using this library Using the PnP Core SDK is simple, check out the getting started guide. Where is the code? The PnP Core SDK is maintained in the PnP GitHub repository: https://github.com/pnp/pnpcore . How can you help? The model implemented in the preview only covers a small part of what's possible and what's needed. We're asking the community to help us expand the model by: Extending the model via the creation of new model, complex type and collection classes. Check out the Extending the model article to learn how to do this. Adding \"functionalities\" to the model: after extending the model, the typical CRUD functionality is there, but for some parts of the model it makes sense to add functionalities by adding methods on top of the model classes. Check out the Extending the model article to learn how to do this. Writing sample programs that use this library: since this is a .Net Standard library, it doesn't target Windows only, but also macOS and Linux, as well as mobile OS's like Android and iOS. With the rise of Blazor , this library can also be used to build .Net based apps running in the browser. Samples can be added in the src\\samples folder. Working on documentation : good documentation is critical to help developers work with this library, either by using it or by extending it. See the Writing documentation article for more details. Best practices when contributing This is all new and we're here to help, don't hesitate to reach out with your questions and feedback via our issue list To avoid overlapping efforts in the startup phase please let us know if you plan to take on a particular chunk of work (e.g. let's say you want to extend the model to support Planner) If you are extending the model and you need to update the model base logic then please reach out, we want to align and agree on those changes first as these need to fit into our model approach Note The best way to reach out is by creating an issue in the issue list: https://github.com/pnp/pnpcore/issues This community rocks, sharing is caring!"
  },
  "readme.html": {
    "href": "readme.html",
    "title": "PnP Core SDK documentation | PnP Core SDK",
    "keywords": "PnP Core SDK documentation This folder contains the PnP Core SDK documentation. The documentation system is based upon DocFX and combines inline code comments (the so called triple slash comments) with articles written in MD format. The resulting generated documentation is hosted on https://pnp.github.io/pnpcore . Documentation generation The document generation consists of 3 steps outlined below, currently these are manual steps, but we plan to automate them via GitHub Actions: Extract the PnP Core SDK into YML based API documentation: use docfx.exe metadata docfx.json Build the documentation: in this step the YML API documentation and the articles are merged into a documentation site. Use docfx.exe build docfx.json and then check the generated _site folder Copy the generated documentation site to it's hosting location toupdate Note Install the latest DocFX release to get docfx.exe To run anywhere add docfx directory to your environment variables in windows References Setting up the gh-pages branch as an orphaned branch was done using the steps outlined in https://www.gep13.co.uk/blog/how-to-create-gh-pages-branch . To actually work with both \"code\" and \"docs\" branches it's easiest to git clone the repo twice, once for coding and once for publishing documents to the gh-pages branch. Contributing to the documentation We strongly encourage documentation contributions which can be done via improving API documentation (via the triple slash comments in the source code) or creating/updating articles in the articles folder. Martial UI Credit to Oscar Vásquez https://ovasquez.github.io/docfx-material/ for awesome work on the skin."
  }
}